#!/usr/bin/env bash
set -euo pipefail
# ejecucion_manual_workflows.sh
# Versi√≥n manual del script de ejecuci√≥n de workflows sin gh CLI
# Ejecutar desde la ra√≠z del repo

OWNER="ECONEURA"
REPO="ECONEURA-IA"
BRANCH="econeura/audit/hmac-canary/20250920T154117Z-13586"
VAULT_APPROVAL_KEY="${VAULT_APPROVAL_KEY:-<TU_VAULT_APPROVAL_KEY_DE_64_HEX>}"
PR_TITLE="CI/CD Pipeline with HMAC Security Gates"
PR_BODY="Implementa pipeline completo con validaci√≥n HMAC y auditor√≠a paralela"

echo "üöÄ EJECUCI√ìN MANUAL DE WORKFLOWS CI/CD"
echo "======================================"
echo "Fecha: $(date)"
echo "Repositorio: $OWNER/$REPO"
echo "Branch: $BRANCH"
echo ""

# Verificar si la clave est√° configurada
if [ "$VAULT_APPROVAL_KEY" = "<TU_VAULT_APPROVAL_KEY_DE_64_HEX>" ]; then
    echo "‚ö†Ô∏è  ADVERTENCIA: VAULT_APPROVAL_KEY no configurada"
    echo "   Reemplaza <TU_VAULT_APPROVAL_KEY_DE_64_HEX> con tu clave real"
    echo ""
fi

echo "üìã INSTRUCCIONES PARA EJECUCI√ìN MANUAL:"
echo ""

echo "1Ô∏è‚É£ CONFIGURAR SECRET EN GITHUB:"
echo "   üîó Ve a: https://github.com/$OWNER/$REPO/settings/secrets/actions"
echo "   ‚ûï Haz clic en 'New repository secret'"
echo "   üìù Name: VAULT_APPROVAL_KEY"
echo "   üîë Value: $VAULT_APPROVAL_KEY"
echo "   üíæ Haz clic en 'Add secret'"
echo ""

echo "2Ô∏è‚É£ CREAR PULL REQUEST:"
echo "   üîó Ve a: https://github.com/$OWNER/$REPO/compare"
echo "   üìä Selecciona:"
echo "      ‚Ä¢ Base: main"
echo "      ‚Ä¢ Compare: $BRANCH"
echo "   üìù T√≠tulo: '$PR_TITLE'"
echo "   üìÑ Descripci√≥n: '$PR_BODY'"
echo "   ‚úÖ Haz clic en 'Create pull request'"
echo ""

echo "3Ô∏è‚É£ FORZAR EJECUCI√ìN DE WORKFLOWS:"
echo "   Despu√©s de crear el PR, los workflows se ejecutar√°n autom√°ticamente."
echo "   Si quieres forzar la ejecuci√≥n manual:"
echo ""
echo "   üîó Ve a: https://github.com/$OWNER/$REPO/actions"
echo ""
echo "   Para cada workflow:"
echo "   ‚Ä¢ Haz clic en el workflow"
echo "   ‚Ä¢ Haz clic en 'Run workflow'"
echo "   ‚Ä¢ Selecciona la branch: $BRANCH"
echo "   ‚Ä¢ Haz clic en 'Run workflow'"
echo ""

echo "   Workflows a ejecutar:"
echo "   üîê Mandatory Approval Gate"
echo "   ‚ö° Optimized Audit Parallel"
echo "   üê≥ Integration Tests with Compose"
echo ""

echo "4Ô∏è‚É£ MONITOREAR EJECUCIONES:"
echo "   üîó Ve a: https://github.com/$OWNER/$REPO/actions/runs"
echo "   üìä Actualiza la p√°gina cada 30-60 segundos"
echo "   üëÄ Espera que aparezcan las 3 nuevas ejecuciones"
echo ""
echo "   Para cada ejecuci√≥n:"
echo "   ‚Ä¢ Status debe ser: completed"
echo "   ‚Ä¢ Conclusion debe ser: success"
echo "   ‚Ä¢ Si es failure, anota el RUN_ID"
echo ""

echo "5Ô∏è‚É£ REVISAR LOGS DETALLADOS:"
echo "   Para el workflow 'Mandatory Approval Gate':"
echo "   ‚Ä¢ Haz clic en la ejecuci√≥n m√°s reciente"
echo "   ‚Ä¢ Ve a la pesta√±a 'Jobs'"
echo "   ‚Ä¢ Haz clic en el job 'check_artifact_and_validate'"
echo "   ‚Ä¢ Revisa los logs de cada step"
echo ""

echo "6Ô∏è‚É£ DETECTAR RUNS FALLIDOS:"
echo "   üîó Ve a: https://github.com/$OWNER/$REPO/actions/runs"
echo "   üîç Filtra por status: 'Failure' o 'Cancelled'"
echo "   üìù Anota los RUN_ID de cualquier ejecuci√≥n fallida"
echo ""
echo "   Si encuentras runs fallidos:"
echo "   ‚Ä¢ Copia el RUN_ID (n√∫mero de la URL)"
echo "   ‚Ä¢ Ejecuta: ./diagnostico_workflow.sh [RUN_ID]"
echo ""

echo "7Ô∏è‚É£ VERIFICACI√ìN FINAL:"
echo "   Una vez que todos los workflows pasan:"
echo "   ‚Ä¢ El PR debe mostrar 'All checks have passed'"
echo "   ‚Ä¢ El bot√≥n 'Merge pull request' debe estar disponible"
echo "   ‚Ä¢ Confirma que no hay conflictos"
echo "   ‚Ä¢ Haz merge del PR"
echo ""

echo "üìä RESUMEN DE EJECUCI√ìN ESPERADA:"
echo ""
echo "üîê Mandatory Approval Gate:"
echo "   ‚Ä¢ Valida HMAC-SHA256 del approval_signed.json"
echo "   ‚Ä¢ Bloquea merge si la validaci√≥n falla"
echo "   ‚Ä¢ Job: check_artifact_and_validate"
echo ""

echo "‚ö° Optimized Audit Parallel:"
echo "   ‚Ä¢ Ejecuta auditor√≠as en paralelo (hmac, sbom, evidence)"
echo "   ‚Ä¢ Usa matrix strategy para concurrencia"
echo "   ‚Ä¢ Jobs: audit-matrix (3 instancias)"
echo ""

echo "üê≥ Integration Tests with Compose:"
echo "   ‚Ä¢ Levanta servicios con Docker Compose"
echo "   ‚Ä¢ Ejecuta health checks autom√°ticos"
echo "   ‚Ä¢ Job: compose-tests"
echo ""

echo "‚è±Ô∏è  TIEMPOS ESTIMADOS:"
echo "   ‚Ä¢ Mandatory: 2-5 minutos"
echo "   ‚Ä¢ Audit Parallel: 3-8 minutos"
echo "   ‚Ä¢ Integration: 5-10 minutos"
echo "   ‚Ä¢ Total: 10-23 minutos"
echo ""

echo "üîß HERRAMIENTAS DE DIAGN√ìSTICO:"
echo "   ‚Ä¢ ./diagnostico_workflow.sh [RUN_ID] - Diagn√≥stico detallado"
echo "   ‚Ä¢ ./validacion_manual_ci.sh - Verificaci√≥n completa"
echo "   ‚Ä¢ Logs en GitHub Actions - Informaci√≥n detallada"
echo ""

echo "‚úÖ INSTRUCCIONES GENERADAS"
echo "Log guardado en: ./ejecucion_manual_$(date +%Y%m%d_%H%M%S).log"

# Guardar instrucciones en archivo
log_file="./ejecucion_manual_$(date +%Y%m%d_%H%M%S).log"
cat > "$log_file" << EOF
EJECUCI√ìN MANUAL DE WORKFLOWS CI/CD
===================================
Fecha: $(date)
Repositorio: $OWNER/$REPO
Branch: $BRANCH
VAULT_APPROVAL_KEY: $(if [ "$VAULT_APPROVAL_KEY" != "<TU_VAULT_APPROVAL_KEY_DE_64_HEX>" ]; then echo "CONFIGURADA"; else echo "PENDIENTE"; fi)

INSTRUCCIONES: Ver output arriba para pasos detallados

WORKFLOWS A EJECUTAR:
- Mandatory Approval Gate
- Optimized Audit Parallel
- Integration Tests with Compose

URLS IMPORTANTES:
- Secrets: https://github.com/$OWNER/$REPO/settings/secrets/actions
- Compare: https://github.com/$OWNER/$REPO/compare
- Actions: https://github.com/$OWNER/$REPO/actions
- Runs: https://github.com/$OWNER/$REPO/actions/runs
EOF

echo "Log guardado: $log_file"