#!/bin/bash

# üö® VERIFICACI√ìN CR√çTICA R√ÅPIDA - ECONEURA-IA
# Versi√≥n simplificada que verifica errores cr√≠ticos sin dependencias opcionales

echo "üîç VERIFICACI√ìN CR√çTICA R√ÅPIDA"
echo "================================"

ERRORS_FOUND=0

# 1. Verificar sintaxis JSON cr√≠tica
echo ""
echo "1Ô∏è‚É£ JSON CR√çTICO"
echo "==============="
critical_json_files=(
    "package.json"
    "tsconfig.json"
    "tsconfig.base.json"
    ".vscode/settings.json"
    ".vscode/launch.json"
    ".vscode/tasks.json"
    ".devcontainer/devcontainer.json"
    "apps/web/package.json"
    "apps/api/package.json"
    "packages/shared/package.json"
)

for file in "${critical_json_files[@]}"; do
    if [ -f "$file" ]; then
        # Verificar si es JSONC (con comentarios) o JSON puro
        if head -1 "$file" | grep -q "//"; then
            # Es JSONC, intentar validar removiendo comentarios
            if python3 -c "
import json
import re
with open('$file', 'r') as f:
    content = f.read()
# Remover comentarios de l√≠nea
content = re.sub(r'//.*$', '', content, flags=re.MULTILINE)
# Remover comentarios multilinea
content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)
try:
    json.loads(content)
    print('VALID')
except:
    print('INVALID')
" 2>/dev/null | grep -q "VALID"; then
                echo "‚úÖ $file - OK (JSONC)"
            else
                echo "‚ùå ERROR: JSONC inv√°lido en $file"
                ERRORS_FOUND=$((ERRORS_FOUND + 1))
            fi
        else
            # Es JSON puro
            if python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo "‚úÖ $file - OK"
            else
                echo "‚ùå ERROR: JSON inv√°lido en $file"
                ERRORS_FOUND=$((ERRORS_FOUND + 1))
            fi
        fi
    else
        echo "‚ùå ERROR: $file no encontrado"
        ERRORS_FOUND=$((ERRORS_FOUND + 1))
    fi
done

# 2. Verificar archivos cr√≠ticos existen
echo ""
echo "2Ô∏è‚É£ ARCHIVOS CR√çTICOS"
echo "===================="
critical_files=(
    ".eslintrc.js"
    ".prettierrc"
    ".editorconfig"
    "vitest.config.ts"
    "README.md"
    ".gitignore"
)

for file in "${critical_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
    else
        echo "‚ùå ERROR: $file no encontrado"
        ERRORS_FOUND=$((ERRORS_FOUND + 1))
    fi
done

# 3. Verificar estructura de directorios
echo ""
echo "3Ô∏è‚É£ ESTRUCTURA DE DIRECTORIOS"
echo "============================"
critical_dirs=(
    "apps/api/src"
    "apps/web/src"
    "packages/shared/src"
    ".github/workflows"
    ".vscode"
    ".husky"
)

for dir in "${critical_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo "‚úÖ $dir existe"
    else
        echo "‚ùå ERROR: Directorio $dir no encontrado"
        ERRORS_FOUND=$((ERRORS_FOUND + 1))
    fi
done

# 4. Verificar permisos de ejecuci√≥n
echo ""
echo "4Ô∏è‚É£ PERMISOS DE EJECUCI√ìN"
echo "========================"
executable_files=(
    "revision-exhaustiva.sh"
)

for file in "${executable_files[@]}"; do
    if [ -f "$file" ]; then
        if [ -x "$file" ]; then
            echo "‚úÖ $file tiene permisos de ejecuci√≥n"
        else
            echo "‚ùå ERROR: $file no tiene permisos de ejecuci√≥n"
            ERRORS_FOUND=$((ERRORS_FOUND + 1))
        fi
    fi
done

# 5. Verificar estado de Git
echo ""
echo "5Ô∏è‚É£ ESTADO DE GIT"
echo "================"
if [ -d ".git" ]; then
    echo "‚úÖ Repositorio Git inicializado"

    # Verificar si estamos en rama main
    current_branch=$(git branch --show-current 2>/dev/null)
    if [ "$current_branch" = "main" ]; then
        echo "‚úÖ En rama main"
    else
        echo "‚ö†Ô∏è No en rama main (actual: $current_branch)"
    fi

    # Verificar cambios sin commit
    if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
        echo "‚ö†Ô∏è Hay cambios sin commit"
        git status --short
    else
        echo "‚úÖ Repositorio limpio"
    fi
else
    echo "‚ùå ERROR: No es un repositorio Git"
    ERRORS_FOUND=$((ERRORS_FOUND + 1))
fi

# 6. Verificar internacionalizaci√≥n
echo ""
echo "6Ô∏è‚É£ INTERNACIONALIZACI√ìN"
echo "======================"
if [ -d "apps/web/messages" ]; then
    if [ -f "apps/web/messages/es.json" ] && [ -f "apps/web/messages/en.json" ]; then
        echo "‚úÖ Archivos de traducci√≥n ES/EN existen"
    else
        echo "‚ùå ERROR: Archivos de traducci√≥n incompletos"
        ERRORS_FOUND=$((ERRORS_FOUND + 1))
    fi
else
    echo "‚ùå ERROR: Directorio de traducciones no encontrado"
    ERRORS_FOUND=$((ERRORS_FOUND + 1))
fi

# RESULTADO FINAL
echo ""
echo "üèÅ RESULTADO FINAL"
echo "=================="

if [ $ERRORS_FOUND -eq 0 ]; then
    echo "üéâ ¬°REPOSITORIO LIMPIO! No se encontraron errores cr√≠ticos."
    echo "‚úÖ Listo para desarrollo y producci√≥n"
    exit 0
else
    echo "‚ùå Se encontraron $ERRORS_FOUND errores cr√≠ticos que deben corregirse."
    echo ""
    echo "üîß ACCIONES RECOMENDADAS:"
    echo "‚Ä¢ Revisar archivos JSON con sintaxis inv√°lida"
    echo "‚Ä¢ Verificar que todos los archivos cr√≠ticos existan"
    echo "‚Ä¢ Asegurar estructura de directorios correcta"
    echo "‚Ä¢ Corregir permisos de archivos ejecutables"
    echo "‚Ä¢ Verificar configuraci√≥n de internacionalizaci√≥n"
    exit 1
fi