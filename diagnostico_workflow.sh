#!/usr/bin/env bash
set -euo pipefail
# diagnostico_workflow.sh
# Diagn√≥stico r√°pido de workflows fallidos sin gh CLI
# Uso: ./diagnostico_workflow.sh [RUN_ID]

OWNER="ECONEURA"
REPO="ECONEURA-IA"
RUN_ID="${1:-}"

if [ -z "$RUN_ID" ]; then
    echo "‚ùå ERROR: Debes proporcionar un RUN_ID"
    echo "Uso: $0 <RUN_ID>"
    echo ""
    echo "Para encontrar el RUN_ID:"
    echo "1. Ve a: https://github.com/$OWNER/$REPO/actions/runs"
    echo "2. Haz clic en la ejecuci√≥n fallida"
    echo "3. Copia el n√∫mero del RUN_ID de la URL"
    echo "   Ejemplo: https://github.com/ECONEURA/ECONEURA-IA/actions/runs/1234567890"
    echo "   RUN_ID ser√≠a: 1234567890"
    exit 1
fi

echo "üîç DIAGN√ìSTICO DE WORKFLOW FALLIDO"
echo "==================================="
echo "Repositorio: $OWNER/$REPO"
echo "RUN_ID: $RUN_ID"
echo "Fecha: $(date)"
echo ""

echo "üìã INSTRUCCIONES PARA DIAGN√ìSTICO MANUAL:"
echo ""
echo "1Ô∏è‚É£ ACCEDER A LOS LOGS:"
echo "   Ve a: https://github.com/$OWNER/$REPO/actions/runs/$RUN_ID"
echo ""

echo "2Ô∏è‚É£ REVISAR ESTADO GENERAL:"
echo "   ‚Ä¢ Status debe ser: completed"
echo "   ‚Ä¢ Conclusion debe ser: success (si fall√≥ ser√°: failure)"
echo "   ‚Ä¢ Revisa la duraci√≥n total"
echo ""

echo "3Ô∏è‚É£ IDENTIFICAR JOB FALLIDO:"
echo "   ‚Ä¢ Ve a la pesta√±a 'Jobs'"
echo "   ‚Ä¢ Busca jobs marcados en rojo (failed)"
echo "   ‚Ä¢ Jobs verdes son exitosos"
echo ""

echo "4Ô∏è‚É£ REVISAR LOGS DETALLADOS:"
echo "   ‚Ä¢ Haz clic en el job fallido"
echo "   ‚Ä¢ Revisa las pesta√±as: 'Set up job', 'Run ...', etc."
echo "   ‚Ä¢ Busca mensajes de error espec√≠ficos"
echo ""

echo "5Ô∏è‚É£ ERRORES COMUNES A BUSCAR:"
echo ""
echo "üîê ERRORES DE HMAC/APROBACI√ìN:"
echo "   ‚Ä¢ 'HMAC validation failed'"
echo "   ‚Ä¢ 'approval_signed.json not found'"
echo "   ‚Ä¢ 'VAULT_APPROVAL_KEY not configured'"
echo "   ‚Ä¢ 'REVIEW_OK file missing'"
echo ""

echo "‚ö° ERRORES DE AUDITOR√çA:"
echo "   ‚Ä¢ 'validate_with_cache.sh not found'"
echo "   ‚Ä¢ 'automated_audit_pipeline.sh not found'"
echo "   ‚Ä¢ 'Permission denied' en scripts"
echo "   ‚Ä¢ 'Command not found' para herramientas"
echo ""

echo "üê≥ ERRORES DE DOCKER/INTEGRACI√ìN:"
echo "   ‚Ä¢ 'docker-compose up failed'"
echo "   ‚Ä¢ 'health check timeout'"
echo "   ‚Ä¢ 'service not responding'"
echo "   ‚Ä¢ 'port already in use'"
echo ""

echo "üìÅ ERRORES DE ARCHIVOS:"
echo "   ‚Ä¢ 'No such file or directory'"
echo "   ‚Ä¢ 'Permission denied'"
echo "   ‚Ä¢ 'File not found' para scripts de soporte"
echo ""

echo "6Ô∏è‚É£ SOLUCIONES COMUNES:"
echo ""
echo "üîß PARA ERRORES DE SECRET:"
echo "   ‚Ä¢ Configurar VAULT_APPROVAL_KEY en GitHub Secrets"
echo "   ‚Ä¢ Verificar que sea una clave HMAC-SHA256 v√°lida (64 chars hex)"
echo ""

echo "üîß PARA ERRORES DE PERMISOS:"
echo "   ‚Ä¢ Verificar que los scripts tengan chmod +x"
echo "   ‚Ä¢ Asegurar que los archivos est√©n en las rutas correctas"
echo ""

echo "üîß PARA ERRORES DE DEPENDENCIAS:"
echo "   ‚Ä¢ Verificar que jq est√© instalado"
echo "   ‚Ä¢ Verificar que unzip est√© disponible"
echo "   ‚Ä¢ Verificar que openssl est√© instalado"
echo ""

echo "7Ô∏è‚É£ GENERAR REPORTE DE ERROR:"
echo "   Una vez identificado el error, copia:"
echo "   ‚Ä¢ El mensaje de error exacto"
echo "   ‚Ä¢ El job que fall√≥"
echo "   ‚Ä¢ Los √∫ltimos 10-20 l√≠neas del log"
echo "   ‚Ä¢ La configuraci√≥n del workflow"
echo ""

echo "8Ô∏è‚É£ REINTENTAR WORKFLOW:"
echo "   Despu√©s de corregir el problema:"
echo "   ‚Ä¢ Haz commit de los cambios"
echo "   ‚Ä¢ Push a la rama"
echo "   ‚Ä¢ El workflow se ejecutar√° autom√°ticamente"
echo "   ‚Ä¢ O fuerza re-ejecuci√≥n desde GitHub Actions"
echo ""

echo "üìû CONTACTO PARA SOPORTE:"
echo "   Si no puedes resolver el error:"
echo "   ‚Ä¢ Documenta todos los pasos seguidos"
echo "   ‚Ä¢ Incluye el RUN_ID y mensajes de error"
echo "   ‚Ä¢ Describe qu√© cambios hiciste antes del fallo"
echo ""

echo "‚úÖ DIAGN√ìSTICO GENERADO PARA RUN_ID: $RUN_ID"
echo "Log guardado en: ./diagnostico_run_${RUN_ID}_$(date +%Y%m%d_%H%M%S).log"

# Guardar diagn√≥stico en archivo
log_file="./diagnostico_run_${RUN_ID}_$(date +%Y%m%d_%H%M%S).log"
cat > "$log_file" << EOF
DIAGN√ìSTICO DE WORKFLOW FALLIDO
===============================
Fecha: $(date)
Repositorio: $OWNER/$REPO
RUN_ID: $RUN_ID

URL del Run: https://github.com/$OWNER/$REPO/actions/runs/$RUN_ID

INSTRUCCIONES: Ver output arriba para diagn√≥stico detallado
EOF

echo "Log guardado: $log_file"