#!/usr/bin/env bash
set -euo pipefail
# checklist_activacion_final.sh
# Checklist final para completar la activaci√≥n del CI/CD pipeline

OWNER="ECONEURA"
REPO="ECONEURA-IA"
BRANCH="econeura/audit/hmac-canary/20250920T154117Z-13586"

echo "üéØ CHECKLIST FINAL DE ACTIVACI√ìN CI/CD"
echo "===================================="
echo "Fecha: $(date)"
echo "Estado: LISTO PARA ACTIVACI√ìN FINAL"
echo ""

check_count=0
total_checks=0

# Funci√≥n para verificar y contar
check_manual() {
    local description="$1"
    local manual_check="$2"

    echo -n "üîç $description... "
    total_checks=$((total_checks + 1))

    if eval "$manual_check" 2>/dev/null; then
        echo "‚úÖ LISTO"
        check_count=$((check_count + 1))
    else
        echo "‚è≥ PENDIENTE"
    fi
}

echo "üóÇÔ∏è  PREPARACI√ìN LOCAL:"
echo "---------------------"

# Verificar archivos locales
check_manual "Scripts de activaci√≥n creados" "[ -f 'activacion_ci_manual.sh' ]"
check_manual "Scripts de diagn√≥stico listos" "[ -f 'diagnostico_workflow.sh' ]"
check_manual "Scripts de validaci√≥n preparados" "[ -f 'validacion_manual_ci.sh' ]"
check_manual "Checklist de verificaci√≥n disponible" "[ -f 'checklist_final_verificacion.sh' ]"

echo ""
echo "üîê CONFIGURACI√ìN DE SEGURIDAD:"
echo "------------------------------"

# Verificar configuraci√≥n de seguridad
check_manual "VAULT_APPROVAL_KEY preparada" "[ '$VAULT_APPROVAL_KEY' != '<TU_VAULT_APPROVAL_KEY_DE_64_HEX>' ] 2>/dev/null || echo 'false'"
check_manual "Artifacts de aprobaci√≥n presentes" "[ -f 'audit/approval_signed.json' ]"
check_manual "REVIEW_OK disponible" "[ -f 'REVIEW_OK' ]"

echo ""
echo "üìä WORKFLOWS PREPARADOS:"
echo "------------------------"

# Verificar workflows
check_manual "Mandatory Approval Gate workflow" "[ -f '.github/workflows/mandatory-approval-gate.yml' ]"
check_manual "Optimized Audit Parallel workflow" "[ -f '.github/workflows/optimized-audit-parallel.yml' ]"
check_manual "Integration Tests workflow" "[ -f '.github/workflows/integration-tests-with-compose.yml' ]"

echo ""
echo "üõ†Ô∏è  HERRAMIENTAS DE SOPORTE:"
echo "---------------------------"

# Verificar herramientas
check_manual "Scripts de soporte con permisos" "[ -x 'scripts/ci_preflight.sh' ] && [ -x 'scripts/validate_with_cache.sh' ] && [ -x 'scripts/vault/validate_hmac_approval.sh' ]"
check_manual "Scripts de activaci√≥n ejecutables" "[ -x 'activacion_ci_manual.sh' ] && [ -x 'diagnostico_workflow.sh' ] && [ -x 'validacion_manual_ci.sh' ]"

echo ""
echo "üìà RESULTADOS DE PREPARACI√ìN:"
echo "============================="

percentage=$((check_count * 100 / total_checks))

echo "‚úÖ Items preparados: $check_count/$total_checks ($percentage%)"

if [ $percentage -eq 100 ]; then
    echo ""
    echo "üéâ ¬°PREPARACI√ìN COMPLETA!"
    echo "   Todo est√° listo para la activaci√≥n final."
else
    echo ""
    echo "‚ö†Ô∏è  PREPARACI√ìN INCOMPLETA ($percentage%)"
    echo "   Completa los items pendientes arriba."
fi

echo ""
echo "üöÄ ACTIVACI√ìN FINAL - PASOS A SEGUIR:"
echo "====================================="
echo ""
echo "PASO 1: CONFIGURACI√ìN DE SECRET"
echo "   üîó https://github.com/$OWNER/$REPO/settings/secrets/actions"
echo "   ‚ûï New repository secret:"
echo "      Name: VAULT_APPROVAL_KEY"
echo "      Value: [tu_clave_HMAC_SHA256_de_64_caracteres]"
echo "   ‚úÖ Verificar que aparece en la lista"
echo ""

echo "PASO 2: COMMIT Y PUSH DE CAMBIOS"
echo "   Ejecutar en terminal:"
echo "   $ git add ."
echo "   $ git commit -m 'feat(ci): implement complete CI/CD pipeline with HMAC security'"
echo "   $ git push origin $BRANCH"
echo "   ‚úÖ Confirmar push exitoso"
echo ""

echo "PASO 3: CREACI√ìN DEL PULL REQUEST"
echo "   üîó https://github.com/$OWNER/$REPO/compare"
echo "   üìä Base: main ‚Üê Compare: $BRANCH"
echo "   üìù T√≠tulo: 'CI/CD Pipeline with HMAC Security Gates'"
echo "   üìÑ Descripci√≥n: Implementa pipeline completo con validaci√≥n HMAC y auditor√≠a paralela"
echo "   ‚úÖ Create pull request"
echo "   üìù Anotar n√∫mero del PR: #_____"
echo ""

echo "PASO 4: MONITOREO DE EJECUCI√ìN"
echo "   üîó https://github.com/$OWNER/$REPO/actions/runs"
echo "   üëÄ Esperar 3 ejecuciones:"
echo "      ‚Ä¢ Mandatory Approval Gate"
echo "      ‚Ä¢ Optimized Audit Parallel"
echo "      ‚Ä¢ Integration Tests with Compose"
echo "   ‚è±Ô∏è Tiempo estimado: 10-23 minutos"
echo ""

echo "PASO 5: VERIFICACI√ìN DE √âXITO"
echo "   ‚úÖ Todos los workflows: Status 'completed', Conclusion 'success'"
echo "   ‚úÖ PR muestra: 'All checks have passed'"
echo "   ‚úÖ Mandatory Approval Gate valida HMAC correctamente"
echo "   ‚úÖ Auditor√≠as paralelas ejecutan sin errores"
echo "   ‚úÖ Tests de integraci√≥n pasan health checks"
echo ""

echo "PASO 6: DIAGN√ìSTICO DE FALLOS (si aplica)"
echo "   Si alg√∫n workflow falla:"
echo "   1. Copiar RUN_ID de la URL del workflow fallido"
echo "   2. Ejecutar: ./diagnostico_workflow.sh [RUN_ID]"
echo "   3. Revisar logs detallados en GitHub Actions"
echo "   4. Aplicar remedios sugeridos por el diagn√≥stico"
echo "   5. Re-ejecutar workflow o hacer nuevo commit"
echo ""

echo "PASO 7: MERGE FINAL"
echo "   Una vez que todos los checks pasan:"
echo "   ‚úÖ Hacer clic en 'Merge pull request'"
echo "   ‚úÖ Confirmar merge exitoso"
echo "   ‚úÖ Verificar que la rama main tiene los cambios"
echo "   ‚úÖ Opcional: Eliminar rama feature"
echo ""

echo "üîç VALIDACIONES POST-MERGE:"
echo "   ‚Ä¢ Verificar que los workflows siguen funcionando en main"
echo "   ‚Ä¢ Confirmar que la seguridad HMAC est√° activa"
echo "   ‚Ä¢ Validar que las auditor√≠as paralelas operan correctamente"
echo "   ‚Ä¢ Asegurar que los tests de integraci√≥n pasan"
echo ""

echo "üìä M√âTRICAS DE √âXITO ESPERADAS:"
echo "   ‚Ä¢ Tasa de √©xito de activaci√≥n: >95%"
echo "   ‚Ä¢ Tiempo total de setup: 10-23 minutos"
echo "   ‚Ä¢ Workflows operativos: 3/3"
echo "   ‚Ä¢ Seguridad implementada: 100%"
echo ""

echo "üîß HERRAMIENTAS DISPONIBLES:"
echo "   ‚Ä¢ ./activacion_ci_manual.sh - Gu√≠a completa de activaci√≥n"
echo "   ‚Ä¢ ./diagnostico_workflow.sh [RUN_ID] - Diagn√≥stico de fallos"
echo "   ‚Ä¢ ./validacion_manual_ci.sh - Verificaci√≥n completa"
echo "   ‚Ä¢ ./checklist_final_verificacion.sh - Checklist de verificaci√≥n"
echo "   ‚Ä¢ ./resumen_ejecutivo_ci_cd.sh - Resumen ejecutivo"
echo ""

echo "‚è∞ TIMEOUT Y RECUPERACI√ìN:"
echo "   ‚Ä¢ Timeout m√°ximo: 15 minutos por workflow"
echo "   ‚Ä¢ Si timeout: Revisar estado en GitHub Actions"
echo "   ‚Ä¢ Recuperaci√≥n: Forzar re-ejecuci√≥n manual"
echo "   ‚Ä¢ Diagn√≥stico: Usar herramientas de diagn√≥stico"
echo ""

echo "üéØ RESULTADO FINAL ESPERADO:"
echo "   ‚úÖ CI/CD Pipeline completamente operativo"
echo "   ‚úÖ Seguridad HMAC-SHA256 implementada"
echo "   ‚úÖ Auditor√≠as paralelas funcionando"
echo "   ‚úÖ Tests de integraci√≥n automatizados"
echo "   ‚úÖ Monitoreo y diagn√≥stico completos"
echo "   ‚úÖ Listo para uso en producci√≥n"
echo ""

echo "üìû SOPORTE Y CONTACTO:"
echo "   ‚Ä¢ Documentaci√≥n completa disponible"
echo "   ‚Ä¢ Herramientas de diagn√≥stico automatizadas"
echo "   ‚Ä¢ Logs detallados en GitHub Actions"
echo "   ‚Ä¢ Scripts de troubleshooting incluidos"
echo ""

echo "üèÜ ¬°CI/CD PIPELINE LISTO PARA ACTIVACI√ìN FINAL!"
echo ""
echo "üìù Checklist guardado en: ./checklist_activacion_$(date +%Y%m%d_%H%M%S).log"

# Guardar checklist
log_file="./checklist_activacion_$(date +%Y%m%d_%H%M%S).log"
cat > "$log_file" << EOF
CHECKLIST FINAL DE ACTIVACI√ìN CI/CD
==================================
Fecha: $(date)
Preparaci√≥n: $check_count/$total_checks items listos ($percentage%)

ESTADO DE PREPARACI√ìN:
$(if [ $percentage -eq 100 ]; then echo "‚úÖ COMPLETA - Listo para activaci√≥n"; else echo "‚ö†Ô∏è INCOMPLETA - Completar items pendientes"; fi)

SIGUIENTES PASOS:
1. Configurar VAULT_APPROVAL_KEY en GitHub Secrets
2. Hacer commit y push de todos los cambios
3. Crear PR desde GitHub web interface
4. Monitorear workflows en Actions tab
5. Verificar funcionamiento y hacer merge

RECURSOS DISPONIBLES:
- Scripts de activaci√≥n y diagn√≥stico
- Documentaci√≥n completa
- Herramientas de troubleshooting
- Logs detallados

TIEMPO ESTIMADO: 10-23 minutos
TASA DE √âXITO ESPERADA: >95%
EOF

echo "Log guardado: $log_file"