import { QuietHoursConfig, QuietHoursStatus, QuietHoursOverride, CreateQuietHoursRequest, UpdateQuietHoursRequest, QuietHoursStats, OnCallSchedule, OnCallShift, OnCallOverride, OnCallParticipant, CreateOnCallScheduleRequest, UpdateOnCallScheduleRequest, OnCallStats, EscalationRule, EscalationEvent, NotificationPreferences, Notification, NotificationAnalytics, CreateEscalationRuleRequest, UpdateEscalationRuleRequest, TriggerEscalationRequest, SendNotificationRequest } from './quiet-hours-types.js';
export declare class QuietHoursOnCallConsolidatedService {
    private quietHoursConfigs;
    private quietHoursOverrides;
    private quietHoursExceptions;
    private onCallSchedules;
    private onCallShifts;
    private onCallOverrides;
    private onCallParticipants;
    private escalationRules;
    private escalationEvents;
    private notificationPreferences;
    private notifications;
    constructor();
    getQuietHoursConfigs(organizationId: string): Promise<QuietHoursConfig[]>;
    getQuietHoursConfig(id: string): Promise<QuietHoursConfig | null>;
    createQuietHoursConfig(request: CreateQuietHoursRequest): Promise<QuietHoursConfig>;
    updateQuietHoursConfig(id: string, request: UpdateQuietHoursRequest): Promise<QuietHoursConfig | null>;
    deleteQuietHoursConfig(id: string): Promise<boolean>;
    getQuietHoursStatus(organizationId: string, serviceName?: string): Promise<QuietHoursStatus>;
    createQuietHoursOverride(organizationId: string, serviceName: string | undefined, startTime: Date, endTime: Date, reason: string, requestedBy: string): Promise<QuietHoursOverride>;
    updateQuietHoursOverride(id: string, status: 'approved' | 'rejected', approvedBy: string): Promise<QuietHoursOverride | null>;
    getOnCallSchedules(organizationId: string): Promise<OnCallSchedule[]>;
    getOnCallSchedule(id: string): Promise<OnCallSchedule | null>;
    createOnCallSchedule(request: CreateOnCallScheduleRequest): Promise<OnCallSchedule>;
    updateOnCallSchedule(id: string, request: UpdateOnCallScheduleRequest): Promise<OnCallSchedule | null>;
    deleteOnCallSchedule(id: string): Promise<boolean>;
    getCurrentOnCall(scheduleId: string): Promise<OnCallParticipant | null>;
    getOnCallHistory(scheduleId: string, limit?: number): Promise<OnCallShift[]>;
    createOnCallOverride(scheduleId: string, originalUserId: string, overrideUserId: string, startTime: Date, endTime: Date, reason: string, requestedBy: string): Promise<OnCallOverride>;
    updateOnCallOverride(id: string, status: 'approved' | 'rejected', approvedBy: string): Promise<OnCallOverride | null>;
    createEscalationRule(request: CreateEscalationRuleRequest): Promise<EscalationRule>;
    updateEscalationRule(id: string, request: UpdateEscalationRuleRequest): Promise<EscalationRule | null>;
    triggerEscalation(request: TriggerEscalationRequest): Promise<EscalationEvent>;
    createNotificationPreferences(userId: string, organizationId: string, preferences: Partial<NotificationPreferences>): Promise<NotificationPreferences>;
    sendNotification(request: SendNotificationRequest): Promise<Notification>;
    getQuietHoursStats(organizationId: string): Promise<QuietHoursStats>;
    getOnCallStats(organizationId: string): Promise<OnCallStats>;
    getNotificationAnalytics(organizationId: string): Promise<NotificationAnalytics>;
    private initializeDefaultConfigs;
    private startMonitoring;
    private monitorQuietHoursStatus;
    private monitorOnCallShifts;
    private processPendingEscalations;
    private generateId;
    private getCurrentTimeInTimezone;
    private getDayName;
    private getCurrentLevel;
    private isTimeInRange;
    private timeToMinutes;
    private getActiveExceptions;
    private getActiveQuietHoursOverride;
    private getActiveOnCallOverride;
    private getNextChangeTime;
    private getTimeUntilNextChange;
    private calculateCostSavings;
    private generateShifts;
    private calculateCoveragePercentage;
    private evaluateEscalationConditions;
    private evaluateCondition;
    private calculateNextEscalation;
    private processEscalation;
    private processNotification;
    private calculateChannelStats;
    private calculateTimeStats;
    private calculateErrorStats;
    getServiceStats(): Promise<{
        quietHours: QuietHoursStats;
        onCall: OnCallStats;
        notifications: NotificationAnalytics;
    }>;
}
export declare const quietHoursOnCallConsolidated: QuietHoursOnCallConsolidatedService;
//# sourceMappingURL=quiet-hours-oncall-consolidated.service.d.ts.map