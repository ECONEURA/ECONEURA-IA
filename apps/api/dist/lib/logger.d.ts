interface LogContext {
    org?: string;
    orgTier?: string;
    orgFeatures?: string[];
    userId?: string;
    userRole?: string;
    userPermissions?: string[];
    requestId?: string;
    correlationId?: string;
    traceId?: string;
    spanId?: string;
    parentSpanId?: string;
    endpoint?: string;
    method?: string;
    path?: string;
    query?: Record<string, unknown>;
    queryJson?: string;
    duration?: number;
    startTime?: number;
    endTime?: number;
    tokens?: number;
    cost?: number;
    aiModel?: string;
    aiProvider?: string;
    promptTokens?: number;
    completionTokens?: number;
    userAgent?: string;
    ip?: string;
    statusCode?: number;
    error?: string;
    stack?: string;
    port?: number;
    environment?: string;
    version?: string;
    businessUnit?: string;
    operationType?: string;
    resourceType?: string;
    isRetry?: boolean;
    isCached?: boolean;
    isDegraded?: boolean;
    isRateLimited?: boolean;
    service?: string;
    status?: string;
    metricName?: string;
    metricValue?: number;
    metricLabels?: Record<string, string>;
    operation?: string;
    ruleId?: string;
    ruleName?: string;
    updates?: any;
    alertId?: string;
    acknowledgedBy?: string;
    alertCount?: number;
    alerts?: any[];
    key?: string;
    type?: string;
    ttl?: number;
    maxSize?: number;
    patternsCount?: number;
    warmupItems?: number;
    previousSize?: number;
    intervalMinutes?: number;
    organizationId?: string;
    prompt?: string;
    current?: number;
    headers?: Record<string, string>;
    reason?: string;
    criticalAlerts?: number;
    costId?: string;
    budgetId?: string;
    daysToKeep?: number;
    stats?: any;
    age?: number;
    accessCount?: number;
    cacheSize?: number;
    totalItems?: number;
    score?: number;
    flagId?: string;
    variablesCount?: number;
    valueType?: string;
    valueLength?: number;
    aggregateId?: string;
    eventId?: string;
    eventType?: string;
    readModelId?: string;
    commandType?: string;
    commandId?: string;
    queryType?: string;
    queryId?: string;
    fromTimestamp?: string;
    eventCount?: number;
    amount?: number;
    percentage?: number;
    notificationId?: string;
    cutoffDate?: string;
    config?: any;
    serviceId?: string;
    routeId?: string;
    serviceName?: string;
    flags?: any;
    flagIds?: string[];
    remaining?: number;
    apiKey?: string;
    role?: string;
    table?: string;
    resource?: string;
    expected?: string;
    limit?: number;
    strategy?: string;
    filters?: any;
    model?: string;
    mfaType?: string;
    mfaEnabled?: boolean;
    system?: string;
    action?: string;
    permissionId?: string;
    roleId?: string;
    tokenId?: string;
    auditLogId?: string;
    securityEventId?: string;
    threatId?: string;
    ipAddress?: string;
    reputation?: string;
    threatTypes?: string[];
    confidence?: number;
    country?: string;
    lastSeen?: string;
    scopes?: string[];
    roleName?: string;
    auditId?: string;
    bruteForceAttempts?: number;
    accountLocked?: boolean;
    threatReputation?: string;
    threatCountry?: string;
    threatConfidence?: number;
    backupCodes?: string[];
    qrCode?: string;
    phoneNumber?: string;
    verificationCode?: string;
    passwordHash?: string;
    salt?: string;
    jwtPayload?: any;
    failedLoginCount?: number;
    lockoutDuration?: number;
    securityEventCount?: number;
    timeWindow?: string;
    dashboardsCount?: number;
    metrics?: any;
    metricsCount?: number;
    dashboardId?: string;
    reportId?: string;
    filtersCount?: number;
    orderByCount?: number;
    flagName?: string;
    secretsCount?: number;
    fromVersion?: number;
    handlerCount?: number;
    readModelType?: string;
    finalVersion?: number;
    period?: string;
    message?: string;
    recipient?: string;
    name?: string;
    targetUrl?: string;
    errorRate?: number;
    templatesCount?: number;
    templateId?: string;
    priority?: string;
    channel?: string;
    total?: number;
    scheduledAt?: string;
    to?: string;
    retryAfter?: number;
    collaboration?: string;
    connections?: number;
    connectionId?: string;
    userName?: string;
    roomId?: string;
    roomsCount?: number;
    originalQuery?: string;
    hasPermission?: boolean;
    originalData?: any;
    actual?: string;
    serviceUrl?: string;
    health?: string;
    attempt?: number;
    failureCount?: number;
    results?: any;
    context?: any;
    category?: string;
    cpuUsage?: number;
    memoryUsage?: number;
    diskUsage?: number;
    processCount?: number;
    responseTime?: number;
    uptime?: number;
    transactionId?: string;
    spanName?: string;
    spanType?: string;
    activeConnections?: number;
    queryCount?: number;
    slowQueries?: number;
    cacheHitRate?: number;
    anomalyMetric?: string;
    anomalyValue?: number;
    expectedRange?: [number, number];
    severity?: string;
    threshold?: number;
    dashboardName?: string;
    orgId?: string;
    monitoringInterval?: number;
    metricsCollected?: any;
    components?: string[];
    email?: string;
    code?: string;
    reportsCount?: number;
    timeRange?: string;
    dimensionsCount?: number;
    widgetsCount?: number;
    count?: number;
    enabled?: boolean;
    toVersion?: number;
    url?: string;
    notificationsCount?: number;
    features?: string[];
    remoteAddress?: string;
    messageType?: string;
    ownerId?: string;
    usersCount?: number;
    filteredQuery?: string;
    sanitizedData?: any;
    successful?: number;
    permissions?: string[];
    permissionAction?: string;
    auditAction?: string;
    totalUsers?: number;
    maxRetries?: number;
    clientIp?: string;
    body?: any;
    routeName?: string;
    success?: boolean;
    onboardingWorkflowId?: string;
    totalRecords?: number;
    connectionsCount?: number;
    username?: string;
    totalRoles?: number;
    serviceInstance?: string;
    loadBalancerStrategy?: string;
    headersCount?: number;
    totalPermissions?: number;
    resetTime?: string;
    totalAuditLogs?: number;
    serviceInstanceId?: string;
    totalSecurityEvents?: number;
}
interface LogEntry {
    timestamp: string;
    level: 'error' | 'warn' | 'info' | 'debug';
    message: string;
    context?: LogContext;
    traceId?: string;
    spanId?: string;
}
declare class StructuredLogger {
    private logLevel;
    private serviceName;
    private version;
    private shouldLog;
    private generateTraceId;
    private generateSpanId;
    private formatLog;
    private outputLog;
    error(message: string, context?: LogContext): void;
    warn(message: string, context?: LogContext): void;
    info(message: string, context?: LogContext): void;
    debug(message: string, context?: LogContext): void;
    request(method: string, path: string, statusCode: number, duration: number, context?: LogContext): void;
    aiRequest(model: string, provider: string, tokens: number, cost: number, duration: number, context?: LogContext): void;
    aiError(error: string, model: string, context?: LogContext): void;
    budgetWarning(org: string, current: number, limit: number, context?: LogContext): void;
    healthCheck(service: string, status: 'ok' | 'error', duration: number, context?: LogContext): void;
    metric(name: string, value: number, labels?: Record<string, string>, context?: LogContext): void;
    trace(operation: string, duration: number, context?: LogContext): void;
    setLogLevel(level: string): void;
    getStats(): any;
    getLogs(): LogEntry[];
}
export declare const logger: StructuredLogger;
export {};
//# sourceMappingURL=logger.d.ts.map