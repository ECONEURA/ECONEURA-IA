import { z } from 'zod';
export declare const DealStageSchema: z.ZodEnum<["LEAD", "QUALIFIED", "PROPOSAL", "NEGOTIATION", "CLOSED_WON", "CLOSED_LOST", "ON_HOLD", "CANCELLED"]>;
export declare const DealStatusSchema: z.ZodEnum<["ACTIVE", "WON", "LOST", "ON_HOLD", "CANCELLED"]>;
export declare const DealPrioritySchema: z.ZodEnum<["LOW", "MEDIUM", "HIGH", "URGENT"]>;
export declare const DealSourceSchema: z.ZodEnum<["WEBSITE", "EMAIL", "PHONE", "REFERRAL", "SOCIAL_MEDIA", "ADVERTISING", "TRADE_SHOW", "PARTNER", "OTHER"]>;
export type DealStage = z.infer<typeof DealStageSchema>;
export type DealStatus = z.infer<typeof DealStatusSchema>;
export type DealPriority = z.infer<typeof DealPrioritySchema>;
export type DealSource = z.infer<typeof DealSourceSchema>;
export type DealId = string;
export type OrganizationId = string;
export type ContactId = string;
export type CompanyId = string;
export type UserId = string;
export interface DealProps {
    id: DealId;
    organizationId: OrganizationId;
    contactId: ContactId;
    companyId?: CompanyId;
    userId: UserId;
    name: string;
    description?: string;
    stage: DealStage;
    status: DealStatus;
    priority: DealPriority;
    source: DealSource;
    value: number;
    currency: string;
    probability: number;
    expectedCloseDate?: Date;
    actualCloseDate?: Date;
    nextStep?: string;
    nextStepDate?: Date;
    tags?: string[];
    customFields?: Record<string, any>;
    attachments?: string[];
    notes?: string;
    competitors?: string[];
    decisionMakers?: string[];
    budget?: number;
    timeline?: string;
    requirements?: string[];
    objections?: string[];
    createdAt: Date;
    updatedAt: Date;
}
export declare class Deal {
    private props;
    constructor(props: DealProps);
    get id(): DealId;
    get organizationId(): OrganizationId;
    get contactId(): ContactId;
    get companyId(): CompanyId | undefined;
    get userId(): UserId;
    get name(): string;
    get description(): string | undefined;
    get stage(): DealStage;
    get status(): DealStatus;
    get priority(): DealPriority;
    get source(): DealSource;
    get value(): number;
    get currency(): string;
    get probability(): number;
    get expectedCloseDate(): Date | undefined;
    get actualCloseDate(): Date | undefined;
    get nextStep(): string | undefined;
    get nextStepDate(): Date | undefined;
    get tags(): string[];
    get customFields(): Record<string, any>;
    get attachments(): string[];
    get notes(): string | undefined;
    get competitors(): string[];
    get decisionMakers(): string[];
    get budget(): number | undefined;
    get timeline(): string | undefined;
    get requirements(): string[];
    get objections(): string[];
    get createdAt(): Date;
    get updatedAt(): Date;
    updateStage(stage: DealStage): void;
    updateStatus(status: DealStatus): void;
    updatePriority(priority: DealPriority): void;
    updateValue(value: number, currency?: string): void;
    updateProbability(probability: number): void;
    setExpectedCloseDate(date: Date): void;
    setNextStep(step: string, date?: Date): void;
    addTag(tag: string): void;
    removeTag(tag: string): void;
    setCustomField(key: string, value: any): void;
    removeCustomField(key: string): void;
    addAttachment(attachment: string): void;
    removeAttachment(attachment: string): void;
    addCompetitor(competitor: string): void;
    removeCompetitor(competitor: string): void;
    addDecisionMaker(decisionMaker: string): void;
    removeDecisionMaker(decisionMaker: string): void;
    addRequirement(requirement: string): void;
    removeRequirement(requirement: string): void;
    addObjection(objection: string): void;
    removeObjection(objection: string): void;
    validate(): boolean;
    toJSON(): DealProps;
    static fromJSON(data: DealProps): Deal;
    static create(props: Omit<DealProps, 'id' | 'createdAt' | 'updatedAt'>): Deal;
    static createLead(organizationId: OrganizationId, contactId: ContactId, userId: UserId, name: string, value: number, currency?: string, source?: DealSource, companyId?: CompanyId): Deal;
    static createQualified(organizationId: OrganizationId, contactId: ContactId, userId: UserId, name: string, value: number, currency?: string, source?: DealSource, companyId?: CompanyId): Deal;
    static createProposal(organizationId: OrganizationId, contactId: ContactId, userId: UserId, name: string, value: number, currency?: string, source?: DealSource, companyId?: CompanyId): Deal;
    static createNegotiation(organizationId: OrganizationId, contactId: ContactId, userId: UserId, name: string, value: number, currency?: string, source?: DealSource, companyId?: CompanyId): Deal;
    isWon(): boolean;
    isLost(): boolean;
    isActive(): boolean;
    isOnHold(): boolean;
    isCancelled(): boolean;
    isClosed(): boolean;
    getWeightedValue(): number;
    getDaysToClose(): number | null;
    isOverdue(): boolean;
    getStageProgress(): number;
}
//# sourceMappingURL=deal.entity.d.ts.map