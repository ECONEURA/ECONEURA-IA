import { z } from 'zod';
export declare const InteractionTypeSchema: z.ZodEnum<["EMAIL", "PHONE", "MEETING", "NOTE", "TASK", "CALL", "DEMO", "PROPOSAL", "FOLLOW_UP", "OTHER"]>;
export declare const InteractionStatusSchema: z.ZodEnum<["SCHEDULED", "IN_PROGRESS", "COMPLETED", "CANCELLED", "RESCHEDULED"]>;
export declare const InteractionPrioritySchema: z.ZodEnum<["LOW", "MEDIUM", "HIGH", "URGENT"]>;
export type InteractionType = z.infer<typeof InteractionTypeSchema>;
export type InteractionStatus = z.infer<typeof InteractionStatusSchema>;
export type InteractionPriority = z.infer<typeof InteractionPrioritySchema>;
export type InteractionId = string;
export type OrganizationId = string;
export type ContactId = string;
export type CompanyId = string;
export type UserId = string;
export interface InteractionProps {
    id: InteractionId;
    organizationId: OrganizationId;
    contactId: ContactId;
    companyId?: CompanyId;
    userId: UserId;
    type: InteractionType;
    status: InteractionStatus;
    priority: InteractionPriority;
    subject: string;
    description?: string;
    scheduledAt?: Date;
    completedAt?: Date;
    duration?: number;
    outcome?: string;
    nextAction?: string;
    nextActionDate?: Date;
    tags?: string[];
    customFields?: Record<string, any>;
    attachments?: string[];
    createdAt: Date;
    updatedAt: Date;
}
export declare class Interaction {
    private props;
    constructor(props: InteractionProps);
    get id(): InteractionId;
    get organizationId(): OrganizationId;
    get contactId(): ContactId;
    get companyId(): CompanyId | undefined;
    get userId(): UserId;
    get type(): InteractionType;
    get status(): InteractionStatus;
    get priority(): InteractionPriority;
    get subject(): string;
    get description(): string | undefined;
    get scheduledAt(): Date | undefined;
    get completedAt(): Date | undefined;
    get duration(): number | undefined;
    get outcome(): string | undefined;
    get nextAction(): string | undefined;
    get nextActionDate(): Date | undefined;
    get tags(): string[];
    get customFields(): Record<string, any>;
    get attachments(): string[];
    get createdAt(): Date;
    get updatedAt(): Date;
    updateStatus(status: InteractionStatus): void;
    updatePriority(priority: InteractionPriority): void;
    schedule(scheduledAt: Date): void;
    complete(outcome?: string, duration?: number): void;
    setNextAction(action: string, date?: Date): void;
    addTag(tag: string): void;
    removeTag(tag: string): void;
    setCustomField(key: string, value: any): void;
    removeCustomField(key: string): void;
    addAttachment(attachment: string): void;
    removeAttachment(attachment: string): void;
    validate(): boolean;
    toJSON(): InteractionProps;
    static fromJSON(data: InteractionProps): Interaction;
    static create(props: Omit<InteractionProps, 'id' | 'createdAt' | 'updatedAt'>): Interaction;
    static createScheduled(organizationId: OrganizationId, contactId: ContactId, userId: UserId, type: InteractionType, subject: string, scheduledAt: Date, companyId?: CompanyId): Interaction;
    static createTask(organizationId: OrganizationId, contactId: ContactId, userId: UserId, subject: string, description?: string, priority?: InteractionPriority, companyId?: CompanyId): Interaction;
    static createNote(organizationId: OrganizationId, contactId: ContactId, userId: UserId, subject: string, description: string, companyId?: CompanyId): Interaction;
    static createFollowUp(organizationId: OrganizationId, contactId: ContactId, userId: UserId, subject: string, nextActionDate: Date, companyId?: CompanyId): Interaction;
}
//# sourceMappingURL=interaction.entity.d.ts.map