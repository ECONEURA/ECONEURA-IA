import { z } from 'zod';
export declare const CreateDatabaseSchemaRequestSchema: z.ZodObject<{
    organizationId: z.ZodString;
    name: z.ZodEffects<z.ZodString, string, string>;
    type: z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>;
    description: z.ZodOptional<z.ZodEffects<z.ZodOptional<z.ZodString>, string, string>>;
    settings: z.ZodObject<{
        version: z.ZodString;
        encoding: z.ZodDefault<z.ZodString>;
        collation: z.ZodDefault<z.ZodString>;
        timezone: z.ZodDefault<z.ZodString>;
        connectionPool: z.ZodObject<{
            min: z.ZodDefault<z.ZodNumber>;
            max: z.ZodDefault<z.ZodNumber>;
            idle: z.ZodDefault<z.ZodNumber>;
            acquire: z.ZodDefault<z.ZodNumber>;
            evict: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        }, {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        }>;
        migrations: z.ZodObject<{
            enabled: z.ZodDefault<z.ZodBoolean>;
            directory: z.ZodDefault<z.ZodString>;
            table: z.ZodDefault<z.ZodString>;
            lockTable: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        }, {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        }>;
        backup: z.ZodObject<{
            enabled: z.ZodDefault<z.ZodBoolean>;
            frequency: z.ZodDefault<z.ZodString>;
            retention: z.ZodDefault<z.ZodNumber>;
            compression: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        }, {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        }>;
        monitoring: z.ZodObject<{
            enabled: z.ZodDefault<z.ZodBoolean>;
            slowQueryThreshold: z.ZodDefault<z.ZodNumber>;
            logLevel: z.ZodDefault<z.ZodEnum<["debug", "info", "warn", "error"]>>;
            metrics: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        }, {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        }>;
        security: z.ZodObject<{
            ssl: z.ZodDefault<z.ZodBoolean>;
            encryption: z.ZodDefault<z.ZodBoolean>;
            auditLog: z.ZodDefault<z.ZodBoolean>;
            rowLevelSecurity: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        }, {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        }>;
        performance: z.ZodObject<{
            queryOptimization: z.ZodDefault<z.ZodBoolean>;
            indexOptimization: z.ZodDefault<z.ZodBoolean>;
            connectionPooling: z.ZodDefault<z.ZodBoolean>;
            caching: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        }, {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        }>;
        customFields: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        notes: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    }, {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    }>;
    tables: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
        schema: z.ZodString;
        description: z.ZodString;
        columns: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
            length: z.ZodOptional<z.ZodNumber>;
            precision: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
            nullable: z.ZodDefault<z.ZodBoolean>;
            defaultValue: z.ZodOptional<z.ZodAny>;
            constraints: z.ZodDefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodDefault<z.ZodBoolean>;
                initiallyDeferred: z.ZodDefault<z.ZodBoolean>;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">>;
            description: z.ZodString;
            isIndexed: z.ZodDefault<z.ZodBoolean>;
            isPrimaryKey: z.ZodDefault<z.ZodBoolean>;
            isForeignKey: z.ZodDefault<z.ZodBoolean>;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumn: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }>, "many">;
        constraints: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
            columns: z.ZodArray<z.ZodString, "many">;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isDeferrable: z.ZodDefault<z.ZodBoolean>;
            initiallyDeferred: z.ZodDefault<z.ZodBoolean>;
            onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
        }, "strip", z.ZodTypeAny, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }>, "many">>;
        indexes: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            columns: z.ZodArray<z.ZodString, "many">;
            type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
            unique: z.ZodDefault<z.ZodBoolean>;
            partial: z.ZodDefault<z.ZodBoolean>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }>, "many">>;
        triggers: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
            timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
            function: z.ZodString;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }>, "many">>;
        rowLevelSecurity: z.ZodDefault<z.ZodBoolean>;
        policies: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
            roles: z.ZodArray<z.ZodString, "many">;
            using: z.ZodOptional<z.ZodString>;
            withCheck: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }, {
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }>, "many">>;
        statistics: z.ZodObject<{
            rowCount: z.ZodDefault<z.ZodNumber>;
            tableSize: z.ZodDefault<z.ZodNumber>;
            indexSize: z.ZodDefault<z.ZodNumber>;
            totalSize: z.ZodDefault<z.ZodNumber>;
            lastAnalyzed: z.ZodDefault<z.ZodDate>;
            lastVacuumed: z.ZodDefault<z.ZodDate>;
            lastAutoVacuumed: z.ZodDefault<z.ZodDate>;
            deadTuples: z.ZodDefault<z.ZodNumber>;
            liveTuples: z.ZodDefault<z.ZodNumber>;
            nDistinct: z.ZodDefault<z.ZodNumber>;
            correlation: z.ZodDefault<z.ZodNumber>;
            mostCommonValues: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            mostCommonFrequencies: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
            histogramBounds: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }>;
    }, "strip", z.ZodTypeAny, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    organizationId?: string;
    name?: string;
    description?: string;
    settings?: {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    };
    tables?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
}, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    organizationId?: string;
    name?: string;
    description?: string;
    settings?: {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    };
    tables?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
}>;
export declare const UpdateDatabaseSchemaRequestSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    type: z.ZodOptional<z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>>;
    description: z.ZodOptional<z.ZodEffects<z.ZodOptional<z.ZodString>, string, string>>;
    settings: z.ZodOptional<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        encoding: z.ZodOptional<z.ZodString>;
        collation: z.ZodOptional<z.ZodString>;
        timezone: z.ZodOptional<z.ZodString>;
        connectionPool: z.ZodOptional<z.ZodObject<{
            min: z.ZodOptional<z.ZodNumber>;
            max: z.ZodOptional<z.ZodNumber>;
            idle: z.ZodOptional<z.ZodNumber>;
            acquire: z.ZodOptional<z.ZodNumber>;
            evict: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        }, {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        }>>;
        migrations: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            directory: z.ZodOptional<z.ZodString>;
            table: z.ZodOptional<z.ZodString>;
            lockTable: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        }, {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        }>>;
        backup: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            frequency: z.ZodOptional<z.ZodString>;
            retention: z.ZodOptional<z.ZodNumber>;
            compression: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        }, {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        }>>;
        monitoring: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            slowQueryThreshold: z.ZodOptional<z.ZodNumber>;
            logLevel: z.ZodOptional<z.ZodEnum<["debug", "info", "warn", "error"]>>;
            metrics: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        }, {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        }>>;
        security: z.ZodOptional<z.ZodObject<{
            ssl: z.ZodOptional<z.ZodBoolean>;
            encryption: z.ZodOptional<z.ZodBoolean>;
            auditLog: z.ZodOptional<z.ZodBoolean>;
            rowLevelSecurity: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        }, {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        }>>;
        performance: z.ZodOptional<z.ZodObject<{
            queryOptimization: z.ZodOptional<z.ZodBoolean>;
            indexOptimization: z.ZodOptional<z.ZodBoolean>;
            connectionPooling: z.ZodOptional<z.ZodBoolean>;
            caching: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        }, {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        }>>;
        customFields: z.ZodOptional<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
        notes: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    }, {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    name?: string;
    description?: string;
    settings?: {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    };
}, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    name?: string;
    description?: string;
    settings?: {
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: "error" | "info" | "warn" | "debug";
        };
    };
}>;
export declare const AnalyzeDatabaseSchemaRequestSchema: z.ZodObject<{
    id: z.ZodString;
    forceReanalysis: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    forceReanalysis?: boolean;
}, {
    id?: string;
    forceReanalysis?: boolean;
}>;
export declare const DatabaseSchemaIdParamSchema: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
}, {
    id?: string;
}>;
export declare const DatabaseSchemaOrganizationIdParamSchema: z.ZodObject<{
    organizationId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    organizationId?: string;
}, {
    organizationId?: string;
}>;
export declare const DatabaseSchemaSearchQuerySchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    sortBy: z.ZodDefault<z.ZodString>;
    sortOrder: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
} & {
    search: z.ZodOptional<z.ZodString>;
} & {
    type: z.ZodOptional<z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>>;
    status: z.ZodOptional<z.ZodEnum<["design", "development", "testing", "production", "deprecated"]>>;
    tableType: z.ZodOptional<z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>>;
    columnType: z.ZodOptional<z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>>;
    constraintType: z.ZodOptional<z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>>;
    isActive: z.ZodOptional<z.ZodBoolean>;
    hasBackup: z.ZodOptional<z.ZodBoolean>;
    hasMaintenance: z.ZodOptional<z.ZodBoolean>;
    minHealthScore: z.ZodOptional<z.ZodNumber>;
    maxHealthScore: z.ZodOptional<z.ZodNumber>;
    minPerformanceScore: z.ZodOptional<z.ZodNumber>;
    maxPerformanceScore: z.ZodOptional<z.ZodNumber>;
    minSecurityScore: z.ZodOptional<z.ZodNumber>;
    maxSecurityScore: z.ZodOptional<z.ZodNumber>;
    lastBackupFrom: z.ZodOptional<z.ZodDate>;
    lastBackupTo: z.ZodOptional<z.ZodDate>;
    lastMaintenanceFrom: z.ZodOptional<z.ZodDate>;
    lastMaintenanceTo: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    status?: "development" | "production" | "testing" | "design" | "deprecated";
    page?: number;
    limit?: number;
    isActive?: boolean;
    columnType?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
    search?: string;
    sortBy?: string;
    sortOrder?: "asc" | "desc";
    tableType?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
    constraintType?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
    hasBackup?: boolean;
    hasMaintenance?: boolean;
    minHealthScore?: number;
    maxHealthScore?: number;
    minPerformanceScore?: number;
    maxPerformanceScore?: number;
    minSecurityScore?: number;
    maxSecurityScore?: number;
    lastBackupFrom?: Date;
    lastBackupTo?: Date;
    lastMaintenanceFrom?: Date;
    lastMaintenanceTo?: Date;
}, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    status?: "development" | "production" | "testing" | "design" | "deprecated";
    page?: number;
    limit?: number;
    isActive?: boolean;
    columnType?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
    search?: string;
    sortBy?: string;
    sortOrder?: "asc" | "desc";
    tableType?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
    constraintType?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
    hasBackup?: boolean;
    hasMaintenance?: boolean;
    minHealthScore?: number;
    maxHealthScore?: number;
    minPerformanceScore?: number;
    maxPerformanceScore?: number;
    minSecurityScore?: number;
    maxSecurityScore?: number;
    lastBackupFrom?: Date;
    lastBackupTo?: Date;
    lastMaintenanceFrom?: Date;
    lastMaintenanceTo?: Date;
}>;
export declare const DatabaseSchemaBulkUpdateSchema: z.ZodObject<{
    ids: z.ZodArray<z.ZodString, "many">;
    updates: z.ZodObject<{
        status: z.ZodOptional<z.ZodEnum<["design", "development", "testing", "production", "deprecated"]>>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        tags?: string[];
    }, {
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        tags?: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    updates?: {
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        tags?: string[];
    };
    ids?: string[];
}, {
    updates?: {
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        tags?: string[];
    };
    ids?: string[];
}>;
export declare const DatabaseSchemaBulkDeleteSchema: z.ZodObject<{
    ids: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    ids?: string[];
}, {
    ids?: string[];
}>;
export declare const DatabaseColumnResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
    length: z.ZodOptional<z.ZodNumber>;
    precision: z.ZodOptional<z.ZodNumber>;
    scale: z.ZodOptional<z.ZodNumber>;
    nullable: z.ZodBoolean;
    defaultValue: z.ZodOptional<z.ZodAny>;
    constraints: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
        columns: z.ZodArray<z.ZodString, "many">;
        referencedTable: z.ZodOptional<z.ZodString>;
        referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        condition: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isDeferrable: z.ZodBoolean;
        initiallyDeferred: z.ZodBoolean;
        onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
        onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }, {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }>, "many">;
    description: z.ZodString;
    isIndexed: z.ZodBoolean;
    isPrimaryKey: z.ZodBoolean;
    isForeignKey: z.ZodBoolean;
    referencedTable: z.ZodOptional<z.ZodString>;
    referencedColumn: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
    length?: number;
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isPrimaryKey?: boolean;
    defaultValue?: any;
    constraints?: {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }[];
    precision?: number;
    scale?: number;
    nullable?: boolean;
    referencedTable?: string;
    isIndexed?: boolean;
    isForeignKey?: boolean;
    referencedColumn?: string;
}, {
    type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
    length?: number;
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isPrimaryKey?: boolean;
    defaultValue?: any;
    constraints?: {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }[];
    precision?: number;
    scale?: number;
    nullable?: boolean;
    referencedTable?: string;
    isIndexed?: boolean;
    isForeignKey?: boolean;
    referencedColumn?: string;
}>;
export declare const DatabaseConstraintResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
    columns: z.ZodArray<z.ZodString, "many">;
    referencedTable: z.ZodOptional<z.ZodString>;
    referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    condition: z.ZodOptional<z.ZodString>;
    description: z.ZodString;
    isDeferrable: z.ZodBoolean;
    initiallyDeferred: z.ZodBoolean;
    onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
    onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    columns?: string[];
    condition?: string;
    referencedTable?: string;
    referencedColumns?: string[];
    isDeferrable?: boolean;
    initiallyDeferred?: boolean;
    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
}, {
    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    columns?: string[];
    condition?: string;
    referencedTable?: string;
    referencedColumns?: string[];
    isDeferrable?: boolean;
    initiallyDeferred?: boolean;
    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
}>;
export declare const DatabaseIndexResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    table: z.ZodString;
    columns: z.ZodArray<z.ZodString, "many">;
    type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
    unique: z.ZodBoolean;
    partial: z.ZodBoolean;
    condition: z.ZodOptional<z.ZodString>;
    description: z.ZodString;
    isActive: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
    table?: string;
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    columns?: string[];
    partial?: boolean;
    condition?: string;
    unique?: boolean;
}, {
    type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
    table?: string;
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    columns?: string[];
    partial?: boolean;
    condition?: string;
    unique?: boolean;
}>;
export declare const DatabaseTriggerResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    table: z.ZodString;
    event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
    timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
    function: z.ZodString;
    condition: z.ZodOptional<z.ZodString>;
    description: z.ZodString;
    isActive: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    function?: string;
    table?: string;
    name?: string;
    id?: string;
    event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    condition?: string;
    timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
}, {
    function?: string;
    table?: string;
    name?: string;
    id?: string;
    event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    condition?: string;
    timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
}>;
export declare const DatabasePolicyResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    table: z.ZodString;
    command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
    roles: z.ZodArray<z.ZodString, "many">;
    using: z.ZodOptional<z.ZodString>;
    withCheck: z.ZodOptional<z.ZodString>;
    description: z.ZodString;
    isActive: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    table?: string;
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    roles?: string[];
    command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
    using?: string;
    withCheck?: string;
}, {
    table?: string;
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    roles?: string[];
    command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
    using?: string;
    withCheck?: string;
}>;
export declare const DatabaseStatisticsResponseSchema: z.ZodObject<{
    rowCount: z.ZodNumber;
    tableSize: z.ZodNumber;
    indexSize: z.ZodNumber;
    totalSize: z.ZodNumber;
    lastAnalyzed: z.ZodDate;
    lastVacuumed: z.ZodDate;
    lastAutoVacuumed: z.ZodDate;
    deadTuples: z.ZodNumber;
    liveTuples: z.ZodNumber;
    nDistinct: z.ZodNumber;
    correlation: z.ZodNumber;
    mostCommonValues: z.ZodArray<z.ZodAny, "many">;
    mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
    histogramBounds: z.ZodArray<z.ZodAny, "many">;
}, "strip", z.ZodTypeAny, {
    totalSize?: number;
    indexSize?: number;
    tableSize?: number;
    correlation?: number;
    rowCount?: number;
    lastAnalyzed?: Date;
    lastVacuumed?: Date;
    lastAutoVacuumed?: Date;
    deadTuples?: number;
    liveTuples?: number;
    nDistinct?: number;
    mostCommonValues?: any[];
    mostCommonFrequencies?: number[];
    histogramBounds?: any[];
}, {
    totalSize?: number;
    indexSize?: number;
    tableSize?: number;
    correlation?: number;
    rowCount?: number;
    lastAnalyzed?: Date;
    lastVacuumed?: Date;
    lastAutoVacuumed?: Date;
    deadTuples?: number;
    liveTuples?: number;
    nDistinct?: number;
    mostCommonValues?: any[];
    mostCommonFrequencies?: number[];
    histogramBounds?: any[];
}>;
export declare const DatabaseTableResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
    schema: z.ZodString;
    description: z.ZodString;
    columns: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
        length: z.ZodOptional<z.ZodNumber>;
        precision: z.ZodOptional<z.ZodNumber>;
        scale: z.ZodOptional<z.ZodNumber>;
        nullable: z.ZodBoolean;
        defaultValue: z.ZodOptional<z.ZodAny>;
        constraints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
            columns: z.ZodArray<z.ZodString, "many">;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isDeferrable: z.ZodBoolean;
            initiallyDeferred: z.ZodBoolean;
            onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }>, "many">;
        description: z.ZodString;
        isIndexed: z.ZodBoolean;
        isPrimaryKey: z.ZodBoolean;
        isForeignKey: z.ZodBoolean;
        referencedTable: z.ZodOptional<z.ZodString>;
        referencedColumn: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        length?: number;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isPrimaryKey?: boolean;
        defaultValue?: any;
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        precision?: number;
        scale?: number;
        nullable?: boolean;
        referencedTable?: string;
        isIndexed?: boolean;
        isForeignKey?: boolean;
        referencedColumn?: string;
    }, {
        type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        length?: number;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isPrimaryKey?: boolean;
        defaultValue?: any;
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        precision?: number;
        scale?: number;
        nullable?: boolean;
        referencedTable?: string;
        isIndexed?: boolean;
        isForeignKey?: boolean;
        referencedColumn?: string;
    }>, "many">;
    constraints: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
        columns: z.ZodArray<z.ZodString, "many">;
        referencedTable: z.ZodOptional<z.ZodString>;
        referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        condition: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isDeferrable: z.ZodBoolean;
        initiallyDeferred: z.ZodBoolean;
        onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
        onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }, {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }>, "many">;
    indexes: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        columns: z.ZodArray<z.ZodString, "many">;
        type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
        unique: z.ZodBoolean;
        partial: z.ZodBoolean;
        condition: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }, {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }>, "many">;
    triggers: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
        timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
        function: z.ZodString;
        condition: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }, {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }>, "many">;
    rowLevelSecurity: z.ZodBoolean;
    policies: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
        roles: z.ZodArray<z.ZodString, "many">;
        using: z.ZodOptional<z.ZodString>;
        withCheck: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }, {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }>, "many">;
    statistics: z.ZodObject<{
        rowCount: z.ZodNumber;
        tableSize: z.ZodNumber;
        indexSize: z.ZodNumber;
        totalSize: z.ZodNumber;
        lastAnalyzed: z.ZodDate;
        lastVacuumed: z.ZodDate;
        lastAutoVacuumed: z.ZodDate;
        deadTuples: z.ZodNumber;
        liveTuples: z.ZodNumber;
        nDistinct: z.ZodNumber;
        correlation: z.ZodNumber;
        mostCommonValues: z.ZodArray<z.ZodAny, "many">;
        mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
        histogramBounds: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        totalSize?: number;
        indexSize?: number;
        tableSize?: number;
        correlation?: number;
        rowCount?: number;
        lastAnalyzed?: Date;
        lastVacuumed?: Date;
        lastAutoVacuumed?: Date;
        deadTuples?: number;
        liveTuples?: number;
        nDistinct?: number;
        mostCommonValues?: any[];
        mostCommonFrequencies?: number[];
        histogramBounds?: any[];
    }, {
        totalSize?: number;
        indexSize?: number;
        tableSize?: number;
        correlation?: number;
        rowCount?: number;
        lastAnalyzed?: Date;
        lastVacuumed?: Date;
        lastAutoVacuumed?: Date;
        deadTuples?: number;
        liveTuples?: number;
        nDistinct?: number;
        mostCommonValues?: any[];
        mostCommonFrequencies?: number[];
        histogramBounds?: any[];
    }>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    columns?: {
        type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        length?: number;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isPrimaryKey?: boolean;
        defaultValue?: any;
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        precision?: number;
        scale?: number;
        nullable?: boolean;
        referencedTable?: string;
        isIndexed?: boolean;
        isForeignKey?: boolean;
        referencedColumn?: string;
    }[];
    schema?: string;
    triggers?: {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }[];
    indexes?: {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }[];
    policies?: {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }[];
    constraints?: {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }[];
    rowLevelSecurity?: boolean;
    statistics?: {
        totalSize?: number;
        indexSize?: number;
        tableSize?: number;
        correlation?: number;
        rowCount?: number;
        lastAnalyzed?: Date;
        lastVacuumed?: Date;
        lastAutoVacuumed?: Date;
        deadTuples?: number;
        liveTuples?: number;
        nDistinct?: number;
        mostCommonValues?: any[];
        mostCommonFrequencies?: number[];
        histogramBounds?: any[];
    };
}, {
    type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
    name?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    columns?: {
        type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        length?: number;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isPrimaryKey?: boolean;
        defaultValue?: any;
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        precision?: number;
        scale?: number;
        nullable?: boolean;
        referencedTable?: string;
        isIndexed?: boolean;
        isForeignKey?: boolean;
        referencedColumn?: string;
    }[];
    schema?: string;
    triggers?: {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }[];
    indexes?: {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }[];
    policies?: {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }[];
    constraints?: {
        type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: string[];
        condition?: string;
        referencedTable?: string;
        referencedColumns?: string[];
        isDeferrable?: boolean;
        initiallyDeferred?: boolean;
        onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
    }[];
    rowLevelSecurity?: boolean;
    statistics?: {
        totalSize?: number;
        indexSize?: number;
        tableSize?: number;
        correlation?: number;
        rowCount?: number;
        lastAnalyzed?: Date;
        lastVacuumed?: Date;
        lastAutoVacuumed?: Date;
        deadTuples?: number;
        liveTuples?: number;
        nDistinct?: number;
        mostCommonValues?: any[];
        mostCommonFrequencies?: number[];
        histogramBounds?: any[];
    };
}>;
export declare const DatabaseSchemaMetricsResponseSchema: z.ZodObject<{
    totalTables: z.ZodNumber;
    totalViews: z.ZodNumber;
    totalFunctions: z.ZodNumber;
    totalProcedures: z.ZodNumber;
    totalTriggers: z.ZodNumber;
    totalIndexes: z.ZodNumber;
    totalConstraints: z.ZodNumber;
    totalPolicies: z.ZodNumber;
    totalSize: z.ZodNumber;
    averageTableSize: z.ZodNumber;
    largestTable: z.ZodString;
    smallestTable: z.ZodString;
    mostIndexedTable: z.ZodString;
    leastIndexedTable: z.ZodString;
    lastBackupDate: z.ZodOptional<z.ZodDate>;
    lastMaintenanceDate: z.ZodOptional<z.ZodDate>;
    healthScore: z.ZodNumber;
    performanceScore: z.ZodNumber;
    securityScore: z.ZodNumber;
    maintainabilityScore: z.ZodNumber;
    lastAnalysisDate: z.ZodDate;
    analysisDuration: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    lastAnalysisDate?: Date;
    lastBackupDate?: Date;
    lastMaintenanceDate?: Date;
    totalIndexes?: number;
    totalTables?: number;
    totalSize?: number;
    performanceScore?: number;
    totalPolicies?: number;
    totalViews?: number;
    totalFunctions?: number;
    totalProcedures?: number;
    totalTriggers?: number;
    totalConstraints?: number;
    averageTableSize?: number;
    largestTable?: string;
    smallestTable?: string;
    mostIndexedTable?: string;
    leastIndexedTable?: string;
    healthScore?: number;
    securityScore?: number;
    maintainabilityScore?: number;
    analysisDuration?: number;
}, {
    lastAnalysisDate?: Date;
    lastBackupDate?: Date;
    lastMaintenanceDate?: Date;
    totalIndexes?: number;
    totalTables?: number;
    totalSize?: number;
    performanceScore?: number;
    totalPolicies?: number;
    totalViews?: number;
    totalFunctions?: number;
    totalProcedures?: number;
    totalTriggers?: number;
    totalConstraints?: number;
    averageTableSize?: number;
    largestTable?: string;
    smallestTable?: string;
    mostIndexedTable?: string;
    leastIndexedTable?: string;
    healthScore?: number;
    securityScore?: number;
    maintainabilityScore?: number;
    analysisDuration?: number;
}>;
export declare const DatabaseSchemaResponseSchema: z.ZodObject<{
    id: z.ZodString;
    organizationId: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>;
    status: z.ZodEnum<["design", "development", "testing", "production", "deprecated"]>;
    description: z.ZodOptional<z.ZodString>;
    settings: z.ZodObject<{
        type: z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>;
        version: z.ZodString;
        encoding: z.ZodString;
        collation: z.ZodString;
        timezone: z.ZodString;
        connectionPool: z.ZodObject<{
            min: z.ZodNumber;
            max: z.ZodNumber;
            idle: z.ZodNumber;
            acquire: z.ZodNumber;
            evict: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        }, {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        }>;
        migrations: z.ZodObject<{
            enabled: z.ZodBoolean;
            directory: z.ZodString;
            table: z.ZodString;
            lockTable: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        }, {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        }>;
        backup: z.ZodObject<{
            enabled: z.ZodBoolean;
            frequency: z.ZodString;
            retention: z.ZodNumber;
            compression: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        }, {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        }>;
        monitoring: z.ZodObject<{
            enabled: z.ZodBoolean;
            slowQueryThreshold: z.ZodNumber;
            logLevel: z.ZodString;
            metrics: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: string;
        }, {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: string;
        }>;
        security: z.ZodObject<{
            ssl: z.ZodBoolean;
            encryption: z.ZodBoolean;
            auditLog: z.ZodBoolean;
            rowLevelSecurity: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        }, {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        }>;
        performance: z.ZodObject<{
            queryOptimization: z.ZodBoolean;
            indexOptimization: z.ZodBoolean;
            connectionPooling: z.ZodBoolean;
            caching: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        }, {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        }>;
        customFields: z.ZodRecord<z.ZodString, z.ZodAny>;
        tags: z.ZodArray<z.ZodString, "many">;
        notes: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: string;
        };
    }, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: string;
        };
    }>;
    metrics: z.ZodOptional<z.ZodObject<{
        totalTables: z.ZodNumber;
        totalViews: z.ZodNumber;
        totalFunctions: z.ZodNumber;
        totalProcedures: z.ZodNumber;
        totalTriggers: z.ZodNumber;
        totalIndexes: z.ZodNumber;
        totalConstraints: z.ZodNumber;
        totalPolicies: z.ZodNumber;
        totalSize: z.ZodNumber;
        averageTableSize: z.ZodNumber;
        largestTable: z.ZodString;
        smallestTable: z.ZodString;
        mostIndexedTable: z.ZodString;
        leastIndexedTable: z.ZodString;
        lastBackupDate: z.ZodOptional<z.ZodDate>;
        lastMaintenanceDate: z.ZodOptional<z.ZodDate>;
        healthScore: z.ZodNumber;
        performanceScore: z.ZodNumber;
        securityScore: z.ZodNumber;
        maintainabilityScore: z.ZodNumber;
        lastAnalysisDate: z.ZodDate;
        analysisDuration: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        lastAnalysisDate?: Date;
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
        totalIndexes?: number;
        totalTables?: number;
        totalSize?: number;
        performanceScore?: number;
        totalPolicies?: number;
        totalViews?: number;
        totalFunctions?: number;
        totalProcedures?: number;
        totalTriggers?: number;
        totalConstraints?: number;
        averageTableSize?: number;
        largestTable?: string;
        smallestTable?: string;
        mostIndexedTable?: string;
        leastIndexedTable?: string;
        healthScore?: number;
        securityScore?: number;
        maintainabilityScore?: number;
        analysisDuration?: number;
    }, {
        lastAnalysisDate?: Date;
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
        totalIndexes?: number;
        totalTables?: number;
        totalSize?: number;
        performanceScore?: number;
        totalPolicies?: number;
        totalViews?: number;
        totalFunctions?: number;
        totalProcedures?: number;
        totalTriggers?: number;
        totalConstraints?: number;
        averageTableSize?: number;
        largestTable?: string;
        smallestTable?: string;
        mostIndexedTable?: string;
        leastIndexedTable?: string;
        healthScore?: number;
        securityScore?: number;
        maintainabilityScore?: number;
        analysisDuration?: number;
    }>>;
    tables: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
        schema: z.ZodString;
        description: z.ZodString;
        columns: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
            length: z.ZodOptional<z.ZodNumber>;
            precision: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
            nullable: z.ZodBoolean;
            defaultValue: z.ZodOptional<z.ZodAny>;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            description: z.ZodString;
            isIndexed: z.ZodBoolean;
            isPrimaryKey: z.ZodBoolean;
            isForeignKey: z.ZodBoolean;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumn: z.ZodOptional<z.ZodString>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }>, "many">;
        constraints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
            columns: z.ZodArray<z.ZodString, "many">;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isDeferrable: z.ZodBoolean;
            initiallyDeferred: z.ZodBoolean;
            onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }>, "many">;
        indexes: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            columns: z.ZodArray<z.ZodString, "many">;
            type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
            unique: z.ZodBoolean;
            partial: z.ZodBoolean;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }>, "many">;
        triggers: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
            timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
            function: z.ZodString;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }>, "many">;
        rowLevelSecurity: z.ZodBoolean;
        policies: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
            roles: z.ZodArray<z.ZodString, "many">;
            using: z.ZodOptional<z.ZodString>;
            withCheck: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }>, "many">;
        statistics: z.ZodObject<{
            rowCount: z.ZodNumber;
            tableSize: z.ZodNumber;
            indexSize: z.ZodNumber;
            totalSize: z.ZodNumber;
            lastAnalyzed: z.ZodDate;
            lastVacuumed: z.ZodDate;
            lastAutoVacuumed: z.ZodDate;
            deadTuples: z.ZodNumber;
            liveTuples: z.ZodNumber;
            nDistinct: z.ZodNumber;
            correlation: z.ZodNumber;
            mostCommonValues: z.ZodArray<z.ZodAny, "many">;
            mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
            histogramBounds: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }>, "many">;
    views: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
        schema: z.ZodString;
        description: z.ZodString;
        columns: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
            length: z.ZodOptional<z.ZodNumber>;
            precision: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
            nullable: z.ZodBoolean;
            defaultValue: z.ZodOptional<z.ZodAny>;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            description: z.ZodString;
            isIndexed: z.ZodBoolean;
            isPrimaryKey: z.ZodBoolean;
            isForeignKey: z.ZodBoolean;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumn: z.ZodOptional<z.ZodString>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }>, "many">;
        constraints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
            columns: z.ZodArray<z.ZodString, "many">;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isDeferrable: z.ZodBoolean;
            initiallyDeferred: z.ZodBoolean;
            onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }>, "many">;
        indexes: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            columns: z.ZodArray<z.ZodString, "many">;
            type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
            unique: z.ZodBoolean;
            partial: z.ZodBoolean;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }>, "many">;
        triggers: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
            timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
            function: z.ZodString;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }>, "many">;
        rowLevelSecurity: z.ZodBoolean;
        policies: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
            roles: z.ZodArray<z.ZodString, "many">;
            using: z.ZodOptional<z.ZodString>;
            withCheck: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }>, "many">;
        statistics: z.ZodObject<{
            rowCount: z.ZodNumber;
            tableSize: z.ZodNumber;
            indexSize: z.ZodNumber;
            totalSize: z.ZodNumber;
            lastAnalyzed: z.ZodDate;
            lastVacuumed: z.ZodDate;
            lastAutoVacuumed: z.ZodDate;
            deadTuples: z.ZodNumber;
            liveTuples: z.ZodNumber;
            nDistinct: z.ZodNumber;
            correlation: z.ZodNumber;
            mostCommonValues: z.ZodArray<z.ZodAny, "many">;
            mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
            histogramBounds: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }>, "many">;
    functions: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
        schema: z.ZodString;
        description: z.ZodString;
        columns: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
            length: z.ZodOptional<z.ZodNumber>;
            precision: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
            nullable: z.ZodBoolean;
            defaultValue: z.ZodOptional<z.ZodAny>;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            description: z.ZodString;
            isIndexed: z.ZodBoolean;
            isPrimaryKey: z.ZodBoolean;
            isForeignKey: z.ZodBoolean;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumn: z.ZodOptional<z.ZodString>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }>, "many">;
        constraints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
            columns: z.ZodArray<z.ZodString, "many">;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isDeferrable: z.ZodBoolean;
            initiallyDeferred: z.ZodBoolean;
            onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }>, "many">;
        indexes: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            columns: z.ZodArray<z.ZodString, "many">;
            type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
            unique: z.ZodBoolean;
            partial: z.ZodBoolean;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }>, "many">;
        triggers: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
            timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
            function: z.ZodString;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }>, "many">;
        rowLevelSecurity: z.ZodBoolean;
        policies: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
            roles: z.ZodArray<z.ZodString, "many">;
            using: z.ZodOptional<z.ZodString>;
            withCheck: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }>, "many">;
        statistics: z.ZodObject<{
            rowCount: z.ZodNumber;
            tableSize: z.ZodNumber;
            indexSize: z.ZodNumber;
            totalSize: z.ZodNumber;
            lastAnalyzed: z.ZodDate;
            lastVacuumed: z.ZodDate;
            lastAutoVacuumed: z.ZodDate;
            deadTuples: z.ZodNumber;
            liveTuples: z.ZodNumber;
            nDistinct: z.ZodNumber;
            correlation: z.ZodNumber;
            mostCommonValues: z.ZodArray<z.ZodAny, "many">;
            mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
            histogramBounds: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }>, "many">;
    procedures: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
        schema: z.ZodString;
        description: z.ZodString;
        columns: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
            length: z.ZodOptional<z.ZodNumber>;
            precision: z.ZodOptional<z.ZodNumber>;
            scale: z.ZodOptional<z.ZodNumber>;
            nullable: z.ZodBoolean;
            defaultValue: z.ZodOptional<z.ZodAny>;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            description: z.ZodString;
            isIndexed: z.ZodBoolean;
            isPrimaryKey: z.ZodBoolean;
            isForeignKey: z.ZodBoolean;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumn: z.ZodOptional<z.ZodString>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }, {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }>, "many">;
        constraints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
            columns: z.ZodArray<z.ZodString, "many">;
            referencedTable: z.ZodOptional<z.ZodString>;
            referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isDeferrable: z.ZodBoolean;
            initiallyDeferred: z.ZodBoolean;
            onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }, {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }>, "many">;
        indexes: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            columns: z.ZodArray<z.ZodString, "many">;
            type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
            unique: z.ZodBoolean;
            partial: z.ZodBoolean;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }>, "many">;
        triggers: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
            timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
            function: z.ZodString;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }>, "many">;
        rowLevelSecurity: z.ZodBoolean;
        policies: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
            roles: z.ZodArray<z.ZodString, "many">;
            using: z.ZodOptional<z.ZodString>;
            withCheck: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }>, "many">;
        statistics: z.ZodObject<{
            rowCount: z.ZodNumber;
            tableSize: z.ZodNumber;
            indexSize: z.ZodNumber;
            totalSize: z.ZodNumber;
            lastAnalyzed: z.ZodDate;
            lastVacuumed: z.ZodDate;
            lastAutoVacuumed: z.ZodDate;
            deadTuples: z.ZodNumber;
            liveTuples: z.ZodNumber;
            nDistinct: z.ZodNumber;
            correlation: z.ZodNumber;
            mostCommonValues: z.ZodArray<z.ZodAny, "many">;
            mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
            histogramBounds: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }, {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        }>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }, {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }>, "many">;
    triggers: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
        timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
        function: z.ZodString;
        condition: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }, {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }>, "many">;
    indexes: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        columns: z.ZodArray<z.ZodString, "many">;
        type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
        unique: z.ZodBoolean;
        partial: z.ZodBoolean;
        condition: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }, {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }>, "many">;
    policies: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        table: z.ZodString;
        command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
        roles: z.ZodArray<z.ZodString, "many">;
        using: z.ZodOptional<z.ZodString>;
        withCheck: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }, {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }>, "many">;
    lastBackupDate: z.ZodOptional<z.ZodDate>;
    lastMaintenanceDate: z.ZodOptional<z.ZodDate>;
    isActive: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    status?: "development" | "production" | "testing" | "design" | "deprecated";
    organizationId?: string;
    name?: string;
    metrics?: {
        lastAnalysisDate?: Date;
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
        totalIndexes?: number;
        totalTables?: number;
        totalSize?: number;
        performanceScore?: number;
        totalPolicies?: number;
        totalViews?: number;
        totalFunctions?: number;
        totalProcedures?: number;
        totalTriggers?: number;
        totalConstraints?: number;
        averageTableSize?: number;
        largestTable?: string;
        smallestTable?: string;
        mostIndexedTable?: string;
        leastIndexedTable?: string;
        healthScore?: number;
        securityScore?: number;
        maintainabilityScore?: number;
        analysisDuration?: number;
    };
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    settings?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: string;
        };
    };
    tables?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    views?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    functions?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    procedures?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    triggers?: {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }[];
    indexes?: {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }[];
    policies?: {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }[];
    lastBackupDate?: Date;
    lastMaintenanceDate?: Date;
}, {
    type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
    status?: "development" | "production" | "testing" | "design" | "deprecated";
    organizationId?: string;
    name?: string;
    metrics?: {
        lastAnalysisDate?: Date;
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
        totalIndexes?: number;
        totalTables?: number;
        totalSize?: number;
        performanceScore?: number;
        totalPolicies?: number;
        totalViews?: number;
        totalFunctions?: number;
        totalProcedures?: number;
        totalTriggers?: number;
        totalConstraints?: number;
        averageTableSize?: number;
        largestTable?: string;
        smallestTable?: string;
        mostIndexedTable?: string;
        leastIndexedTable?: string;
        healthScore?: number;
        securityScore?: number;
        maintainabilityScore?: number;
        analysisDuration?: number;
    };
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    isActive?: boolean;
    settings?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        security?: {
            encryption?: boolean;
            ssl?: boolean;
            rowLevelSecurity?: boolean;
            auditLog?: boolean;
        };
        version?: string;
        performance?: {
            caching?: boolean;
            queryOptimization?: boolean;
            indexOptimization?: boolean;
            connectionPooling?: boolean;
        };
        tags?: string[];
        notes?: string;
        timezone?: string;
        customFields?: Record<string, any>;
        encoding?: string;
        collation?: string;
        connectionPool?: {
            max?: number;
            min?: number;
            idle?: number;
            acquire?: number;
            evict?: number;
        };
        migrations?: {
            table?: string;
            enabled?: boolean;
            directory?: string;
            lockTable?: string;
        };
        backup?: {
            enabled?: boolean;
            frequency?: string;
            retention?: number;
            compression?: boolean;
        };
        monitoring?: {
            metrics?: boolean;
            enabled?: boolean;
            slowQueryThreshold?: number;
            logLevel?: string;
        };
    };
    tables?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    views?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    functions?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    procedures?: {
        type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        columns?: {
            type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
            length?: number;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isPrimaryKey?: boolean;
            defaultValue?: any;
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            precision?: number;
            scale?: number;
            nullable?: boolean;
            referencedTable?: string;
            isIndexed?: boolean;
            isForeignKey?: boolean;
            referencedColumn?: string;
        }[];
        schema?: string;
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        constraints?: {
            type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: string[];
            condition?: string;
            referencedTable?: string;
            referencedColumns?: string[];
            isDeferrable?: boolean;
            initiallyDeferred?: boolean;
            onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
        }[];
        rowLevelSecurity?: boolean;
        statistics?: {
            totalSize?: number;
            indexSize?: number;
            tableSize?: number;
            correlation?: number;
            rowCount?: number;
            lastAnalyzed?: Date;
            lastVacuumed?: Date;
            lastAutoVacuumed?: Date;
            deadTuples?: number;
            liveTuples?: number;
            nDistinct?: number;
            mostCommonValues?: any[];
            mostCommonFrequencies?: number[];
            histogramBounds?: any[];
        };
    }[];
    triggers?: {
        function?: string;
        table?: string;
        name?: string;
        id?: string;
        event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        condition?: string;
        timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
    }[];
    indexes?: {
        type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        columns?: string[];
        partial?: boolean;
        condition?: string;
        unique?: boolean;
    }[];
    policies?: {
        table?: string;
        name?: string;
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        roles?: string[];
        command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
        using?: string;
        withCheck?: string;
    }[];
    lastBackupDate?: Date;
    lastMaintenanceDate?: Date;
}>;
export declare const DatabaseSchemaListResponseSchema: z.ZodObject<{
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        page?: number;
        limit?: number;
        total?: number;
        totalPages?: number;
        hasNext?: boolean;
        hasPrev?: boolean;
    }, {
        page?: number;
        limit?: number;
        total?: number;
        totalPages?: number;
        hasNext?: boolean;
        hasPrev?: boolean;
    }>;
} & {
    data: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        organizationId: z.ZodString;
        name: z.ZodString;
        type: z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>;
        status: z.ZodEnum<["design", "development", "testing", "production", "deprecated"]>;
        description: z.ZodOptional<z.ZodString>;
        settings: z.ZodObject<{
            type: z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>;
            version: z.ZodString;
            encoding: z.ZodString;
            collation: z.ZodString;
            timezone: z.ZodString;
            connectionPool: z.ZodObject<{
                min: z.ZodNumber;
                max: z.ZodNumber;
                idle: z.ZodNumber;
                acquire: z.ZodNumber;
                evict: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            }, {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            }>;
            migrations: z.ZodObject<{
                enabled: z.ZodBoolean;
                directory: z.ZodString;
                table: z.ZodString;
                lockTable: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            }, {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            }>;
            backup: z.ZodObject<{
                enabled: z.ZodBoolean;
                frequency: z.ZodString;
                retention: z.ZodNumber;
                compression: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            }, {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            }>;
            monitoring: z.ZodObject<{
                enabled: z.ZodBoolean;
                slowQueryThreshold: z.ZodNumber;
                logLevel: z.ZodString;
                metrics: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            }, {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            }>;
            security: z.ZodObject<{
                ssl: z.ZodBoolean;
                encryption: z.ZodBoolean;
                auditLog: z.ZodBoolean;
                rowLevelSecurity: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            }, {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            }>;
            performance: z.ZodObject<{
                queryOptimization: z.ZodBoolean;
                indexOptimization: z.ZodBoolean;
                connectionPooling: z.ZodBoolean;
                caching: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            }, {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            }>;
            customFields: z.ZodRecord<z.ZodString, z.ZodAny>;
            tags: z.ZodArray<z.ZodString, "many">;
            notes: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
            security?: {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            };
            version?: string;
            performance?: {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            };
            tags?: string[];
            notes?: string;
            timezone?: string;
            customFields?: Record<string, any>;
            encoding?: string;
            collation?: string;
            connectionPool?: {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            };
            migrations?: {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            };
            backup?: {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            };
            monitoring?: {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            };
        }, {
            type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
            security?: {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            };
            version?: string;
            performance?: {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            };
            tags?: string[];
            notes?: string;
            timezone?: string;
            customFields?: Record<string, any>;
            encoding?: string;
            collation?: string;
            connectionPool?: {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            };
            migrations?: {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            };
            backup?: {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            };
            monitoring?: {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            };
        }>;
        metrics: z.ZodOptional<z.ZodObject<{
            totalTables: z.ZodNumber;
            totalViews: z.ZodNumber;
            totalFunctions: z.ZodNumber;
            totalProcedures: z.ZodNumber;
            totalTriggers: z.ZodNumber;
            totalIndexes: z.ZodNumber;
            totalConstraints: z.ZodNumber;
            totalPolicies: z.ZodNumber;
            totalSize: z.ZodNumber;
            averageTableSize: z.ZodNumber;
            largestTable: z.ZodString;
            smallestTable: z.ZodString;
            mostIndexedTable: z.ZodString;
            leastIndexedTable: z.ZodString;
            lastBackupDate: z.ZodOptional<z.ZodDate>;
            lastMaintenanceDate: z.ZodOptional<z.ZodDate>;
            healthScore: z.ZodNumber;
            performanceScore: z.ZodNumber;
            securityScore: z.ZodNumber;
            maintainabilityScore: z.ZodNumber;
            lastAnalysisDate: z.ZodDate;
            analysisDuration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            lastAnalysisDate?: Date;
            lastBackupDate?: Date;
            lastMaintenanceDate?: Date;
            totalIndexes?: number;
            totalTables?: number;
            totalSize?: number;
            performanceScore?: number;
            totalPolicies?: number;
            totalViews?: number;
            totalFunctions?: number;
            totalProcedures?: number;
            totalTriggers?: number;
            totalConstraints?: number;
            averageTableSize?: number;
            largestTable?: string;
            smallestTable?: string;
            mostIndexedTable?: string;
            leastIndexedTable?: string;
            healthScore?: number;
            securityScore?: number;
            maintainabilityScore?: number;
            analysisDuration?: number;
        }, {
            lastAnalysisDate?: Date;
            lastBackupDate?: Date;
            lastMaintenanceDate?: Date;
            totalIndexes?: number;
            totalTables?: number;
            totalSize?: number;
            performanceScore?: number;
            totalPolicies?: number;
            totalViews?: number;
            totalFunctions?: number;
            totalProcedures?: number;
            totalTriggers?: number;
            totalConstraints?: number;
            averageTableSize?: number;
            largestTable?: string;
            smallestTable?: string;
            mostIndexedTable?: string;
            leastIndexedTable?: string;
            healthScore?: number;
            securityScore?: number;
            maintainabilityScore?: number;
            analysisDuration?: number;
        }>>;
        tables: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
            schema: z.ZodString;
            description: z.ZodString;
            columns: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
                length: z.ZodOptional<z.ZodNumber>;
                precision: z.ZodOptional<z.ZodNumber>;
                scale: z.ZodOptional<z.ZodNumber>;
                nullable: z.ZodBoolean;
                defaultValue: z.ZodOptional<z.ZodAny>;
                constraints: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                    columns: z.ZodArray<z.ZodString, "many">;
                    referencedTable: z.ZodOptional<z.ZodString>;
                    referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    condition: z.ZodOptional<z.ZodString>;
                    description: z.ZodString;
                    isDeferrable: z.ZodBoolean;
                    initiallyDeferred: z.ZodBoolean;
                    onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    createdAt: z.ZodDate;
                    updatedAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }>, "many">;
                description: z.ZodString;
                isIndexed: z.ZodBoolean;
                isPrimaryKey: z.ZodBoolean;
                isForeignKey: z.ZodBoolean;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumn: z.ZodOptional<z.ZodString>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }>, "many">;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            indexes: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                columns: z.ZodArray<z.ZodString, "many">;
                type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
                unique: z.ZodBoolean;
                partial: z.ZodBoolean;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }>, "many">;
            triggers: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
                timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
                function: z.ZodString;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }>, "many">;
            rowLevelSecurity: z.ZodBoolean;
            policies: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
                roles: z.ZodArray<z.ZodString, "many">;
                using: z.ZodOptional<z.ZodString>;
                withCheck: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }>, "many">;
            statistics: z.ZodObject<{
                rowCount: z.ZodNumber;
                tableSize: z.ZodNumber;
                indexSize: z.ZodNumber;
                totalSize: z.ZodNumber;
                lastAnalyzed: z.ZodDate;
                lastVacuumed: z.ZodDate;
                lastAutoVacuumed: z.ZodDate;
                deadTuples: z.ZodNumber;
                liveTuples: z.ZodNumber;
                nDistinct: z.ZodNumber;
                correlation: z.ZodNumber;
                mostCommonValues: z.ZodArray<z.ZodAny, "many">;
                mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
                histogramBounds: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }>, "many">;
        views: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
            schema: z.ZodString;
            description: z.ZodString;
            columns: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
                length: z.ZodOptional<z.ZodNumber>;
                precision: z.ZodOptional<z.ZodNumber>;
                scale: z.ZodOptional<z.ZodNumber>;
                nullable: z.ZodBoolean;
                defaultValue: z.ZodOptional<z.ZodAny>;
                constraints: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                    columns: z.ZodArray<z.ZodString, "many">;
                    referencedTable: z.ZodOptional<z.ZodString>;
                    referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    condition: z.ZodOptional<z.ZodString>;
                    description: z.ZodString;
                    isDeferrable: z.ZodBoolean;
                    initiallyDeferred: z.ZodBoolean;
                    onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    createdAt: z.ZodDate;
                    updatedAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }>, "many">;
                description: z.ZodString;
                isIndexed: z.ZodBoolean;
                isPrimaryKey: z.ZodBoolean;
                isForeignKey: z.ZodBoolean;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumn: z.ZodOptional<z.ZodString>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }>, "many">;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            indexes: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                columns: z.ZodArray<z.ZodString, "many">;
                type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
                unique: z.ZodBoolean;
                partial: z.ZodBoolean;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }>, "many">;
            triggers: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
                timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
                function: z.ZodString;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }>, "many">;
            rowLevelSecurity: z.ZodBoolean;
            policies: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
                roles: z.ZodArray<z.ZodString, "many">;
                using: z.ZodOptional<z.ZodString>;
                withCheck: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }>, "many">;
            statistics: z.ZodObject<{
                rowCount: z.ZodNumber;
                tableSize: z.ZodNumber;
                indexSize: z.ZodNumber;
                totalSize: z.ZodNumber;
                lastAnalyzed: z.ZodDate;
                lastVacuumed: z.ZodDate;
                lastAutoVacuumed: z.ZodDate;
                deadTuples: z.ZodNumber;
                liveTuples: z.ZodNumber;
                nDistinct: z.ZodNumber;
                correlation: z.ZodNumber;
                mostCommonValues: z.ZodArray<z.ZodAny, "many">;
                mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
                histogramBounds: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }>, "many">;
        functions: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
            schema: z.ZodString;
            description: z.ZodString;
            columns: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
                length: z.ZodOptional<z.ZodNumber>;
                precision: z.ZodOptional<z.ZodNumber>;
                scale: z.ZodOptional<z.ZodNumber>;
                nullable: z.ZodBoolean;
                defaultValue: z.ZodOptional<z.ZodAny>;
                constraints: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                    columns: z.ZodArray<z.ZodString, "many">;
                    referencedTable: z.ZodOptional<z.ZodString>;
                    referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    condition: z.ZodOptional<z.ZodString>;
                    description: z.ZodString;
                    isDeferrable: z.ZodBoolean;
                    initiallyDeferred: z.ZodBoolean;
                    onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    createdAt: z.ZodDate;
                    updatedAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }>, "many">;
                description: z.ZodString;
                isIndexed: z.ZodBoolean;
                isPrimaryKey: z.ZodBoolean;
                isForeignKey: z.ZodBoolean;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumn: z.ZodOptional<z.ZodString>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }>, "many">;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            indexes: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                columns: z.ZodArray<z.ZodString, "many">;
                type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
                unique: z.ZodBoolean;
                partial: z.ZodBoolean;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }>, "many">;
            triggers: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
                timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
                function: z.ZodString;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }>, "many">;
            rowLevelSecurity: z.ZodBoolean;
            policies: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
                roles: z.ZodArray<z.ZodString, "many">;
                using: z.ZodOptional<z.ZodString>;
                withCheck: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }>, "many">;
            statistics: z.ZodObject<{
                rowCount: z.ZodNumber;
                tableSize: z.ZodNumber;
                indexSize: z.ZodNumber;
                totalSize: z.ZodNumber;
                lastAnalyzed: z.ZodDate;
                lastVacuumed: z.ZodDate;
                lastAutoVacuumed: z.ZodDate;
                deadTuples: z.ZodNumber;
                liveTuples: z.ZodNumber;
                nDistinct: z.ZodNumber;
                correlation: z.ZodNumber;
                mostCommonValues: z.ZodArray<z.ZodAny, "many">;
                mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
                histogramBounds: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }>, "many">;
        procedures: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>;
            schema: z.ZodString;
            description: z.ZodString;
            columns: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>;
                length: z.ZodOptional<z.ZodNumber>;
                precision: z.ZodOptional<z.ZodNumber>;
                scale: z.ZodOptional<z.ZodNumber>;
                nullable: z.ZodBoolean;
                defaultValue: z.ZodOptional<z.ZodAny>;
                constraints: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                    columns: z.ZodArray<z.ZodString, "many">;
                    referencedTable: z.ZodOptional<z.ZodString>;
                    referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    condition: z.ZodOptional<z.ZodString>;
                    description: z.ZodString;
                    isDeferrable: z.ZodBoolean;
                    initiallyDeferred: z.ZodBoolean;
                    onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                    createdAt: z.ZodDate;
                    updatedAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }, {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }>, "many">;
                description: z.ZodString;
                isIndexed: z.ZodBoolean;
                isPrimaryKey: z.ZodBoolean;
                isForeignKey: z.ZodBoolean;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumn: z.ZodOptional<z.ZodString>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }, {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }>, "many">;
            constraints: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>;
                columns: z.ZodArray<z.ZodString, "many">;
                referencedTable: z.ZodOptional<z.ZodString>;
                referencedColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isDeferrable: z.ZodBoolean;
                initiallyDeferred: z.ZodBoolean;
                onDelete: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                onUpdate: z.ZodOptional<z.ZodEnum<["CASCADE", "SET NULL", "RESTRICT", "NO ACTION"]>>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }, {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }>, "many">;
            indexes: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                columns: z.ZodArray<z.ZodString, "many">;
                type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
                unique: z.ZodBoolean;
                partial: z.ZodBoolean;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }, {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }>, "many">;
            triggers: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
                timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
                function: z.ZodString;
                condition: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }, {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }>, "many">;
            rowLevelSecurity: z.ZodBoolean;
            policies: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                table: z.ZodString;
                command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
                roles: z.ZodArray<z.ZodString, "many">;
                using: z.ZodOptional<z.ZodString>;
                withCheck: z.ZodOptional<z.ZodString>;
                description: z.ZodString;
                isActive: z.ZodBoolean;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }, {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }>, "many">;
            statistics: z.ZodObject<{
                rowCount: z.ZodNumber;
                tableSize: z.ZodNumber;
                indexSize: z.ZodNumber;
                totalSize: z.ZodNumber;
                lastAnalyzed: z.ZodDate;
                lastVacuumed: z.ZodDate;
                lastAutoVacuumed: z.ZodDate;
                deadTuples: z.ZodNumber;
                liveTuples: z.ZodNumber;
                nDistinct: z.ZodNumber;
                correlation: z.ZodNumber;
                mostCommonValues: z.ZodArray<z.ZodAny, "many">;
                mostCommonFrequencies: z.ZodArray<z.ZodNumber, "many">;
                histogramBounds: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }, {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            }>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }, {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }>, "many">;
        triggers: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            event: z.ZodEnum<["INSERT", "UPDATE", "DELETE", "TRUNCATE"]>;
            timing: z.ZodEnum<["BEFORE", "AFTER", "INSTEAD OF"]>;
            function: z.ZodString;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }, {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }>, "many">;
        indexes: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            columns: z.ZodArray<z.ZodString, "many">;
            type: z.ZodEnum<["btree", "hash", "gin", "gist", "spgist", "brin"]>;
            unique: z.ZodBoolean;
            partial: z.ZodBoolean;
            condition: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }, {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }>, "many">;
        policies: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            table: z.ZodString;
            command: z.ZodEnum<["SELECT", "INSERT", "UPDATE", "DELETE", "ALL"]>;
            roles: z.ZodArray<z.ZodString, "many">;
            using: z.ZodOptional<z.ZodString>;
            withCheck: z.ZodOptional<z.ZodString>;
            description: z.ZodString;
            isActive: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }, {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }>, "many">;
        lastBackupDate: z.ZodOptional<z.ZodDate>;
        lastMaintenanceDate: z.ZodOptional<z.ZodDate>;
        isActive: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        organizationId?: string;
        name?: string;
        metrics?: {
            lastAnalysisDate?: Date;
            lastBackupDate?: Date;
            lastMaintenanceDate?: Date;
            totalIndexes?: number;
            totalTables?: number;
            totalSize?: number;
            performanceScore?: number;
            totalPolicies?: number;
            totalViews?: number;
            totalFunctions?: number;
            totalProcedures?: number;
            totalTriggers?: number;
            totalConstraints?: number;
            averageTableSize?: number;
            largestTable?: string;
            smallestTable?: string;
            mostIndexedTable?: string;
            leastIndexedTable?: string;
            healthScore?: number;
            securityScore?: number;
            maintainabilityScore?: number;
            analysisDuration?: number;
        };
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        settings?: {
            type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
            security?: {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            };
            version?: string;
            performance?: {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            };
            tags?: string[];
            notes?: string;
            timezone?: string;
            customFields?: Record<string, any>;
            encoding?: string;
            collation?: string;
            connectionPool?: {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            };
            migrations?: {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            };
            backup?: {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            };
            monitoring?: {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            };
        };
        tables?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        views?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        functions?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        procedures?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
    }, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        organizationId?: string;
        name?: string;
        metrics?: {
            lastAnalysisDate?: Date;
            lastBackupDate?: Date;
            lastMaintenanceDate?: Date;
            totalIndexes?: number;
            totalTables?: number;
            totalSize?: number;
            performanceScore?: number;
            totalPolicies?: number;
            totalViews?: number;
            totalFunctions?: number;
            totalProcedures?: number;
            totalTriggers?: number;
            totalConstraints?: number;
            averageTableSize?: number;
            largestTable?: string;
            smallestTable?: string;
            mostIndexedTable?: string;
            leastIndexedTable?: string;
            healthScore?: number;
            securityScore?: number;
            maintainabilityScore?: number;
            analysisDuration?: number;
        };
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        settings?: {
            type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
            security?: {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            };
            version?: string;
            performance?: {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            };
            tags?: string[];
            notes?: string;
            timezone?: string;
            customFields?: Record<string, any>;
            encoding?: string;
            collation?: string;
            connectionPool?: {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            };
            migrations?: {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            };
            backup?: {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            };
            monitoring?: {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            };
        };
        tables?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        views?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        functions?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        procedures?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        organizationId?: string;
        name?: string;
        metrics?: {
            lastAnalysisDate?: Date;
            lastBackupDate?: Date;
            lastMaintenanceDate?: Date;
            totalIndexes?: number;
            totalTables?: number;
            totalSize?: number;
            performanceScore?: number;
            totalPolicies?: number;
            totalViews?: number;
            totalFunctions?: number;
            totalProcedures?: number;
            totalTriggers?: number;
            totalConstraints?: number;
            averageTableSize?: number;
            largestTable?: string;
            smallestTable?: string;
            mostIndexedTable?: string;
            leastIndexedTable?: string;
            healthScore?: number;
            securityScore?: number;
            maintainabilityScore?: number;
            analysisDuration?: number;
        };
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        settings?: {
            type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
            security?: {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            };
            version?: string;
            performance?: {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            };
            tags?: string[];
            notes?: string;
            timezone?: string;
            customFields?: Record<string, any>;
            encoding?: string;
            collation?: string;
            connectionPool?: {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            };
            migrations?: {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            };
            backup?: {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            };
            monitoring?: {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            };
        };
        tables?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        views?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        functions?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        procedures?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
    }[];
    pagination?: {
        page?: number;
        limit?: number;
        total?: number;
        totalPages?: number;
        hasNext?: boolean;
        hasPrev?: boolean;
    };
}, {
    data?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        organizationId?: string;
        name?: string;
        metrics?: {
            lastAnalysisDate?: Date;
            lastBackupDate?: Date;
            lastMaintenanceDate?: Date;
            totalIndexes?: number;
            totalTables?: number;
            totalSize?: number;
            performanceScore?: number;
            totalPolicies?: number;
            totalViews?: number;
            totalFunctions?: number;
            totalProcedures?: number;
            totalTriggers?: number;
            totalConstraints?: number;
            averageTableSize?: number;
            largestTable?: string;
            smallestTable?: string;
            mostIndexedTable?: string;
            leastIndexedTable?: string;
            healthScore?: number;
            securityScore?: number;
            maintainabilityScore?: number;
            analysisDuration?: number;
        };
        id?: string;
        createdAt?: Date;
        updatedAt?: Date;
        description?: string;
        isActive?: boolean;
        settings?: {
            type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
            security?: {
                encryption?: boolean;
                ssl?: boolean;
                rowLevelSecurity?: boolean;
                auditLog?: boolean;
            };
            version?: string;
            performance?: {
                caching?: boolean;
                queryOptimization?: boolean;
                indexOptimization?: boolean;
                connectionPooling?: boolean;
            };
            tags?: string[];
            notes?: string;
            timezone?: string;
            customFields?: Record<string, any>;
            encoding?: string;
            collation?: string;
            connectionPool?: {
                max?: number;
                min?: number;
                idle?: number;
                acquire?: number;
                evict?: number;
            };
            migrations?: {
                table?: string;
                enabled?: boolean;
                directory?: string;
                lockTable?: string;
            };
            backup?: {
                enabled?: boolean;
                frequency?: string;
                retention?: number;
                compression?: boolean;
            };
            monitoring?: {
                metrics?: boolean;
                enabled?: boolean;
                slowQueryThreshold?: number;
                logLevel?: string;
            };
        };
        tables?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        views?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        functions?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        procedures?: {
            type?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            columns?: {
                type?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
                length?: number;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isPrimaryKey?: boolean;
                defaultValue?: any;
                constraints?: {
                    type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                    name?: string;
                    id?: string;
                    createdAt?: Date;
                    updatedAt?: Date;
                    description?: string;
                    columns?: string[];
                    condition?: string;
                    referencedTable?: string;
                    referencedColumns?: string[];
                    isDeferrable?: boolean;
                    initiallyDeferred?: boolean;
                    onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                    onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                }[];
                precision?: number;
                scale?: number;
                nullable?: boolean;
                referencedTable?: string;
                isIndexed?: boolean;
                isForeignKey?: boolean;
                referencedColumn?: string;
            }[];
            schema?: string;
            triggers?: {
                function?: string;
                table?: string;
                name?: string;
                id?: string;
                event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                condition?: string;
                timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
            }[];
            indexes?: {
                type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                columns?: string[];
                partial?: boolean;
                condition?: string;
                unique?: boolean;
            }[];
            policies?: {
                table?: string;
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                isActive?: boolean;
                roles?: string[];
                command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
                using?: string;
                withCheck?: string;
            }[];
            constraints?: {
                type?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
                name?: string;
                id?: string;
                createdAt?: Date;
                updatedAt?: Date;
                description?: string;
                columns?: string[];
                condition?: string;
                referencedTable?: string;
                referencedColumns?: string[];
                isDeferrable?: boolean;
                initiallyDeferred?: boolean;
                onDelete?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
                onUpdate?: "CASCADE" | "SET NULL" | "RESTRICT" | "NO ACTION";
            }[];
            rowLevelSecurity?: boolean;
            statistics?: {
                totalSize?: number;
                indexSize?: number;
                tableSize?: number;
                correlation?: number;
                rowCount?: number;
                lastAnalyzed?: Date;
                lastVacuumed?: Date;
                lastAutoVacuumed?: Date;
                deadTuples?: number;
                liveTuples?: number;
                nDistinct?: number;
                mostCommonValues?: any[];
                mostCommonFrequencies?: number[];
                histogramBounds?: any[];
            };
        }[];
        triggers?: {
            function?: string;
            table?: string;
            name?: string;
            id?: string;
            event?: "DELETE" | "INSERT" | "UPDATE" | "TRUNCATE";
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            condition?: string;
            timing?: "BEFORE" | "AFTER" | "INSTEAD OF";
        }[];
        indexes?: {
            type?: "btree" | "hash" | "gin" | "gist" | "spgist" | "brin";
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            columns?: string[];
            partial?: boolean;
            condition?: string;
            unique?: boolean;
        }[];
        policies?: {
            table?: string;
            name?: string;
            id?: string;
            createdAt?: Date;
            updatedAt?: Date;
            description?: string;
            isActive?: boolean;
            roles?: string[];
            command?: "DELETE" | "INSERT" | "UPDATE" | "SELECT" | "ALL";
            using?: string;
            withCheck?: string;
        }[];
        lastBackupDate?: Date;
        lastMaintenanceDate?: Date;
    }[];
    pagination?: {
        page?: number;
        limit?: number;
        total?: number;
        totalPages?: number;
        hasNext?: boolean;
        hasPrev?: boolean;
    };
}>;
export declare const DatabaseSchemaStatsResponseSchema: z.ZodObject<{
    total: z.ZodNumber;
    active: z.ZodNumber;
    inactive: z.ZodNumber;
    createdThisMonth: z.ZodNumber;
    createdThisYear: z.ZodNumber;
    updatedThisMonth: z.ZodNumber;
    updatedThisYear: z.ZodNumber;
} & {
    byType: z.ZodRecord<z.ZodString, z.ZodNumber>;
    byStatus: z.ZodRecord<z.ZodString, z.ZodNumber>;
    byTableType: z.ZodRecord<z.ZodString, z.ZodNumber>;
    byColumnType: z.ZodRecord<z.ZodString, z.ZodNumber>;
    byConstraintType: z.ZodRecord<z.ZodString, z.ZodNumber>;
    totalTables: z.ZodNumber;
    totalViews: z.ZodNumber;
    totalFunctions: z.ZodNumber;
    totalProcedures: z.ZodNumber;
    totalTriggers: z.ZodNumber;
    totalIndexes: z.ZodNumber;
    totalConstraints: z.ZodNumber;
    totalPolicies: z.ZodNumber;
    totalSize: z.ZodNumber;
    averageTableSize: z.ZodNumber;
    averageHealthScore: z.ZodNumber;
    averagePerformanceScore: z.ZodNumber;
    averageSecurityScore: z.ZodNumber;
    averageMaintainabilityScore: z.ZodNumber;
    lastBackupDate: z.ZodOptional<z.ZodDate>;
    lastMaintenanceDate: z.ZodOptional<z.ZodDate>;
    totalBackupSize: z.ZodNumber;
    totalMaintenanceTime: z.ZodNumber;
    schemasWithBackup: z.ZodNumber;
    schemasWithMaintenance: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    active?: number;
    inactive?: number;
    total?: number;
    byStatus?: Record<string, number>;
    lastBackupDate?: Date;
    lastMaintenanceDate?: Date;
    totalIndexes?: number;
    totalTables?: number;
    totalSize?: number;
    totalPolicies?: number;
    createdThisMonth?: number;
    createdThisYear?: number;
    updatedThisMonth?: number;
    updatedThisYear?: number;
    totalViews?: number;
    totalFunctions?: number;
    totalProcedures?: number;
    totalTriggers?: number;
    totalConstraints?: number;
    averageTableSize?: number;
    byType?: Record<string, number>;
    byTableType?: Record<string, number>;
    byColumnType?: Record<string, number>;
    byConstraintType?: Record<string, number>;
    averageHealthScore?: number;
    averagePerformanceScore?: number;
    averageSecurityScore?: number;
    averageMaintainabilityScore?: number;
    totalBackupSize?: number;
    totalMaintenanceTime?: number;
    schemasWithBackup?: number;
    schemasWithMaintenance?: number;
}, {
    active?: number;
    inactive?: number;
    total?: number;
    byStatus?: Record<string, number>;
    lastBackupDate?: Date;
    lastMaintenanceDate?: Date;
    totalIndexes?: number;
    totalTables?: number;
    totalSize?: number;
    totalPolicies?: number;
    createdThisMonth?: number;
    createdThisYear?: number;
    updatedThisMonth?: number;
    updatedThisYear?: number;
    totalViews?: number;
    totalFunctions?: number;
    totalProcedures?: number;
    totalTriggers?: number;
    totalConstraints?: number;
    averageTableSize?: number;
    byType?: Record<string, number>;
    byTableType?: Record<string, number>;
    byColumnType?: Record<string, number>;
    byConstraintType?: Record<string, number>;
    averageHealthScore?: number;
    averagePerformanceScore?: number;
    averageSecurityScore?: number;
    averageMaintainabilityScore?: number;
    totalBackupSize?: number;
    totalMaintenanceTime?: number;
    schemasWithBackup?: number;
    schemasWithMaintenance?: number;
}>;
export declare const BatchAnalysisRequestSchema: z.ZodObject<{
    ids: z.ZodArray<z.ZodString, "many">;
    forceReanalysis: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    ids?: string[];
    forceReanalysis?: boolean;
}, {
    ids?: string[];
    forceReanalysis?: boolean;
}>;
export declare const DatabaseSchemaReportRequestSchema: z.ZodObject<{
    organizationId: z.ZodString;
    filters: z.ZodOptional<z.ZodObject<{
        type: z.ZodOptional<z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>>;
        status: z.ZodOptional<z.ZodEnum<["design", "development", "testing", "production", "deprecated"]>>;
        tableType: z.ZodOptional<z.ZodEnum<["table", "view", "materialized_view", "function", "procedure", "trigger", "index", "sequence"]>>;
        columnType: z.ZodOptional<z.ZodEnum<["varchar", "text", "integer", "bigint", "decimal", "boolean", "date", "timestamp", "json", "jsonb", "uuid", "array", "enum"]>>;
        constraintType: z.ZodOptional<z.ZodEnum<["primary_key", "foreign_key", "unique", "check", "not_null", "default", "index"]>>;
        isActive: z.ZodOptional<z.ZodBoolean>;
        hasBackup: z.ZodOptional<z.ZodBoolean>;
        hasMaintenance: z.ZodOptional<z.ZodBoolean>;
        dateRange: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            startDate: z.ZodOptional<z.ZodDate>;
            endDate: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            startDate?: Date;
            endDate?: Date;
        }, {
            startDate?: Date;
            endDate?: Date;
        }>, {
            startDate?: Date;
            endDate?: Date;
        }, {
            startDate?: Date;
            endDate?: Date;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        isActive?: boolean;
        columnType?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        tableType?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        constraintType?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        hasBackup?: boolean;
        hasMaintenance?: boolean;
        dateRange?: {
            startDate?: Date;
            endDate?: Date;
        };
    }, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        isActive?: boolean;
        columnType?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        tableType?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        constraintType?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        hasBackup?: boolean;
        hasMaintenance?: boolean;
        dateRange?: {
            startDate?: Date;
            endDate?: Date;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    organizationId?: string;
    filters?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        isActive?: boolean;
        columnType?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        tableType?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        constraintType?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        hasBackup?: boolean;
        hasMaintenance?: boolean;
        dateRange?: {
            startDate?: Date;
            endDate?: Date;
        };
    };
}, {
    organizationId?: string;
    filters?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        isActive?: boolean;
        columnType?: "bigint" | "boolean" | "timestamp" | "json" | "integer" | "date" | "array" | "text" | "decimal" | "varchar" | "jsonb" | "uuid" | "enum";
        tableType?: "function" | "table" | "index" | "trigger" | "view" | "materialized_view" | "procedure" | "sequence";
        constraintType?: "default" | "index" | "check" | "primary_key" | "foreign_key" | "unique" | "not_null";
        hasBackup?: boolean;
        hasMaintenance?: boolean;
        dateRange?: {
            startDate?: Date;
            endDate?: Date;
        };
    };
}>;
export declare const TableReportRequestSchema: z.ZodObject<{
    organizationId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    organizationId?: string;
}, {
    organizationId?: string;
}>;
export declare const PerformanceReportRequestSchema: z.ZodObject<{
    organizationId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    organizationId?: string;
}, {
    organizationId?: string;
}>;
export declare const MaintenanceReportRequestSchema: z.ZodObject<{
    organizationId: z.ZodString;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    filters: z.ZodOptional<z.ZodObject<{
        type: z.ZodOptional<z.ZodEnum<["postgresql", "mysql", "sqlite", "mongodb", "redis", "elasticsearch"]>>;
        status: z.ZodOptional<z.ZodEnum<["design", "development", "testing", "production", "deprecated"]>>;
        minHealthScore: z.ZodOptional<z.ZodNumber>;
        maxHealthScore: z.ZodOptional<z.ZodNumber>;
        minPerformanceScore: z.ZodOptional<z.ZodNumber>;
        maxPerformanceScore: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        minHealthScore?: number;
        maxHealthScore?: number;
        minPerformanceScore?: number;
        maxPerformanceScore?: number;
    }, {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        minHealthScore?: number;
        maxHealthScore?: number;
        minPerformanceScore?: number;
        maxPerformanceScore?: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    organizationId?: string;
    filters?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        minHealthScore?: number;
        maxHealthScore?: number;
        minPerformanceScore?: number;
        maxPerformanceScore?: number;
    };
    startDate?: Date;
    endDate?: Date;
}, {
    organizationId?: string;
    filters?: {
        type?: "redis" | "postgresql" | "mysql" | "sqlite" | "mongodb" | "elasticsearch";
        status?: "development" | "production" | "testing" | "design" | "deprecated";
        minHealthScore?: number;
        maxHealthScore?: number;
        minPerformanceScore?: number;
        maxPerformanceScore?: number;
    };
    startDate?: Date;
    endDate?: Date;
}>;
export type CreateDatabaseSchemaRequest = z.infer<typeof CreateDatabaseSchemaRequestSchema>;
export type UpdateDatabaseSchemaRequest = z.infer<typeof UpdateDatabaseSchemaRequestSchema>;
export type AnalyzeDatabaseSchemaRequest = z.infer<typeof AnalyzeDatabaseSchemaRequestSchema>;
export type DatabaseSchemaIdParam = z.infer<typeof DatabaseSchemaIdParamSchema>;
export type DatabaseSchemaOrganizationIdParam = z.infer<typeof DatabaseSchemaOrganizationIdParamSchema>;
export type DatabaseSchemaSearchQuery = z.infer<typeof DatabaseSchemaSearchQuerySchema>;
export type DatabaseSchemaBulkUpdate = z.infer<typeof DatabaseSchemaBulkUpdateSchema>;
export type DatabaseSchemaBulkDelete = z.infer<typeof DatabaseSchemaBulkDeleteSchema>;
export type DatabaseSchemaResponse = z.infer<typeof DatabaseSchemaResponseSchema>;
export type DatabaseSchemaListResponse = z.infer<typeof DatabaseSchemaListResponseSchema>;
export type DatabaseSchemaStatsResponse = z.infer<typeof DatabaseSchemaStatsResponseSchema>;
export type DatabaseColumnResponse = z.infer<typeof DatabaseColumnResponseSchema>;
export type DatabaseConstraintResponse = z.infer<typeof DatabaseConstraintResponseSchema>;
export type DatabaseIndexResponse = z.infer<typeof DatabaseIndexResponseSchema>;
export type DatabaseTriggerResponse = z.infer<typeof DatabaseTriggerResponseSchema>;
export type DatabasePolicyResponse = z.infer<typeof DatabasePolicyResponseSchema>;
export type DatabaseStatisticsResponse = z.infer<typeof DatabaseStatisticsResponseSchema>;
export type DatabaseTableResponse = z.infer<typeof DatabaseTableResponseSchema>;
export type DatabaseSchemaMetricsResponse = z.infer<typeof DatabaseSchemaMetricsResponseSchema>;
export type BatchAnalysisRequest = z.infer<typeof BatchAnalysisRequestSchema>;
export type DatabaseSchemaReportRequest = z.infer<typeof DatabaseSchemaReportRequestSchema>;
export type TableReportRequest = z.infer<typeof TableReportRequestSchema>;
export type PerformanceReportRequest = z.infer<typeof PerformanceReportRequestSchema>;
export type MaintenanceReportRequest = z.infer<typeof MaintenanceReportRequestSchema>;
//# sourceMappingURL=database-schema.dto.d.ts.map