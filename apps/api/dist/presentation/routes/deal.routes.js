import { Router } from 'express';

import { authenticate } from '../middleware/auth.middleware.js';
import { authorize } from '../middleware/rbac.middleware.js';
import { validateRequest } from '../middleware/validation.middleware.js';
import { CreateDealSchema, CreateLeadSchema, CreateQualifiedSchema, CreateProposalSchema, CreateNegotiationSchema, UpdateDealSchema, UpdateStageSchema, UpdateStatusSchema, UpdatePrioritySchema, UpdateValueSchema, UpdateProbabilitySchema, SetExpectedCloseDateSchema, SetNextStepSchema, AddTagSchema, RemoveTagSchema, AddCompetitorSchema, RemoveCompetitorSchema, AddDecisionMakerSchema, RemoveDecisionMakerSchema, SetCustomFieldSchema, RemoveCustomFieldSchema, DealIdParamSchema, DealContactIdParamSchema, DealCompanyIdParamSchema, DealUserIdParamSchema, DealSearchQuerySchema, DealFiltersQuerySchema, DealBulkUpdateSchema, DealBulkDeleteSchema, DealStageParamSchema, DealStatusParamSchema, DealPriorityParamSchema, DealSourceParamSchema, DealValueRangeQuerySchema, DealProbabilityRangeQuerySchema, DealExpectedCloseQuerySchema, DealClosedInPeriodQuerySchema } from '../dto/deal.dto.js';
export function createDealRoutes(dealController) {
    const router = Router();
    router.use(authenticate);
    router.post('/', authorize(['admin', 'manager', 'user']), validateRequest(CreateDealSchema), dealController.createDeal.bind(dealController));
    router.post('/leads', authorize(['admin', 'manager', 'user']), validateRequest(CreateLeadSchema), dealController.createLead.bind(dealController));
    router.post('/qualified', authorize(['admin', 'manager', 'user']), validateRequest(CreateQualifiedSchema), dealController.createQualified.bind(dealController));
    router.post('/proposals', authorize(['admin', 'manager', 'user']), validateRequest(CreateProposalSchema), dealController.createProposal.bind(dealController));
    router.post('/negotiations', authorize(['admin', 'manager', 'user']), validateRequest(CreateNegotiationSchema), dealController.createNegotiation.bind(dealController));
    router.get('/', authorize(['admin', 'manager', 'user']), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/stats', authorize(['admin', 'manager', 'user']), validateRequest(DealFiltersQuerySchema, 'query'), dealController.getDealStats.bind(dealController));
    router.get('/pipeline', authorize(['admin', 'manager', 'user']), dealController.getPipelineData.bind(dealController));
    router.get('/forecast', authorize(['admin', 'manager', 'user']), dealController.getSalesForecast.bind(dealController));
    router.get('/conversion-rates', authorize(['admin', 'manager', 'user']), dealController.getConversionRates.bind(dealController));
    router.get('/dashboard', authorize(['admin', 'manager', 'user']), dealController.getDashboardData.bind(dealController));
    router.get('/:id', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), dealController.getDealById.bind(dealController));
    router.put('/:id', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(UpdateDealSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/stage', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(UpdateStageSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/status', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(UpdateStatusSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/priority', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(UpdatePrioritySchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/value', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(UpdateValueSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/probability', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(UpdateProbabilitySchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/expected-close-date', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(SetExpectedCloseDateSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/next-step', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(SetNextStepSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/tags', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(AddTagSchema), dealController.updateDeal.bind(dealController));
    router.delete('/:id/tags', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(RemoveTagSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/competitors', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(AddCompetitorSchema), dealController.updateDeal.bind(dealController));
    router.delete('/:id/competitors', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(RemoveCompetitorSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/decision-makers', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(AddDecisionMakerSchema), dealController.updateDeal.bind(dealController));
    router.delete('/:id/decision-makers', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(RemoveDecisionMakerSchema), dealController.updateDeal.bind(dealController));
    router.patch('/:id/custom-fields', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(SetCustomFieldSchema), dealController.updateDeal.bind(dealController));
    router.delete('/:id/custom-fields', authorize(['admin', 'manager', 'user']), validateRequest(DealIdParamSchema, 'params'), validateRequest(RemoveCustomFieldSchema), dealController.updateDeal.bind(dealController));
    router.delete('/:id', authorize(['admin', 'manager']), validateRequest(DealIdParamSchema, 'params'), dealController.deleteDeal.bind(dealController));
    router.get('/contacts/:contactId/deals', authorize(['admin', 'manager', 'user']), validateRequest(DealContactIdParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByContact.bind(dealController));
    router.get('/companies/:companyId/deals', authorize(['admin', 'manager', 'user']), validateRequest(DealCompanyIdParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByCompany.bind(dealController));
    router.get('/stage/:stage', authorize(['admin', 'manager', 'user']), validateRequest(DealStageParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/status/:status', authorize(['admin', 'manager', 'user']), validateRequest(DealStatusParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/priority/:priority', authorize(['admin', 'manager', 'user']), validateRequest(DealPriorityParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/source/:source', authorize(['admin', 'manager', 'user']), validateRequest(DealSourceParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/value-range', authorize(['admin', 'manager', 'user']), validateRequest(DealValueRangeQuerySchema, 'query'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/probability-range', authorize(['admin', 'manager', 'user']), validateRequest(DealProbabilityRangeQuerySchema, 'query'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/high-value', authorize(['admin', 'manager', 'user']), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/high-probability', authorize(['admin', 'manager', 'user']), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/expected-to-close', authorize(['admin', 'manager', 'user']), validateRequest(DealExpectedCloseQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/overdue', authorize(['admin', 'manager', 'user']), dealController.getDealsByOrganization.bind(dealController));
    router.get('/expected-this-month', authorize(['admin', 'manager', 'user']), dealController.getDealsByOrganization.bind(dealController));
    router.get('/expected-this-quarter', authorize(['admin', 'manager', 'user']), dealController.getDealsByOrganization.bind(dealController));
    router.get('/expected-this-year', authorize(['admin', 'manager', 'user']), dealController.getDealsByOrganization.bind(dealController));
    router.get('/closed-in-period', authorize(['admin', 'manager', 'user']), validateRequest(DealClosedInPeriodQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/users/:userId/deals', authorize(['admin', 'manager', 'user']), validateRequest(DealUserIdParamSchema, 'params'), validateRequest(DealSearchQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/users/:userId/overdue', authorize(['admin', 'manager', 'user']), validateRequest(DealUserIdParamSchema, 'params'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/users/:userId/won', authorize(['admin', 'manager', 'user']), validateRequest(DealUserIdParamSchema, 'params'), validateRequest(DealClosedInPeriodQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.get('/users/:userId/lost', authorize(['admin', 'manager', 'user']), validateRequest(DealUserIdParamSchema, 'params'), validateRequest(DealClosedInPeriodQuerySchema, 'query'), dealController.getDealsByOrganization.bind(dealController));
    router.put('/bulk', authorize(['admin', 'manager']), validateRequest(DealBulkUpdateSchema), dealController.updateDeal.bind(dealController));
    router.delete('/bulk', authorize(['admin', 'manager']), validateRequest(DealBulkDeleteSchema), dealController.deleteDeal.bind(dealController));
    return router;
}
//# sourceMappingURL=deal.routes.js.map