import { Router } from 'express';

import { authenticate } from '../middleware/auth.middleware.js';
import { authorize } from '../middleware/rbac.middleware.js';
import { validateRequest } from '../middleware/validation.middleware.js';
import { CreateInteractionSchema, CreateScheduledInteractionSchema, CreateTaskSchema, CreateNoteSchema, CreateFollowUpSchema, UpdateInteractionSchema, UpdateStatusSchema, UpdatePrioritySchema, ScheduleInteractionSchema, CompleteInteractionSchema, SetNextActionSchema, AddTagSchema, RemoveTagSchema, SetCustomFieldSchema, RemoveCustomFieldSchema, InteractionIdParamSchema, InteractionContactIdParamSchema, InteractionCompanyIdParamSchema, InteractionUserIdParamSchema, InteractionSearchQuerySchema, InteractionFiltersQuerySchema, InteractionBulkUpdateSchema, InteractionBulkDeleteSchema, InteractionTypeParamSchema, InteractionStatusParamSchema, InteractionPriorityParamSchema, InteractionScheduledQuerySchema, InteractionUpcomingQuerySchema } from '../dto/interaction.dto.js';
export function createInteractionRoutes(interactionController) {
    const router = Router();
    router.use(authenticate);
    router.post('/', authorize(['admin', 'manager', 'user']), validateRequest(CreateInteractionSchema), interactionController.createInteraction.bind(interactionController));
    router.post('/scheduled', authorize(['admin', 'manager', 'user']), validateRequest(CreateScheduledInteractionSchema), interactionController.createScheduledInteraction.bind(interactionController));
    router.post('/tasks', authorize(['admin', 'manager', 'user']), validateRequest(CreateTaskSchema), interactionController.createTask.bind(interactionController));
    router.post('/notes', authorize(['admin', 'manager', 'user']), validateRequest(CreateNoteSchema), interactionController.createNote.bind(interactionController));
    router.post('/follow-ups', authorize(['admin', 'manager', 'user']), validateRequest(CreateFollowUpSchema), interactionController.createFollowUp.bind(interactionController));
    router.get('/', authorize(['admin', 'manager', 'user']), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/stats', authorize(['admin', 'manager', 'user']), validateRequest(InteractionFiltersQuerySchema, 'query'), interactionController.getInteractionStats.bind(interactionController));
    router.get('/dashboard', authorize(['admin', 'manager', 'user']), interactionController.getDashboardData.bind(interactionController));
    router.get('/:id', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), interactionController.getInteractionById.bind(interactionController));
    router.put('/:id', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(UpdateInteractionSchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/status', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(UpdateStatusSchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/priority', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(UpdatePrioritySchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/schedule', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(ScheduleInteractionSchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/complete', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(CompleteInteractionSchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/next-action', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(SetNextActionSchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/tags', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(AddTagSchema), interactionController.updateInteraction.bind(interactionController));
    router.delete('/:id/tags', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(RemoveTagSchema), interactionController.updateInteraction.bind(interactionController));
    router.patch('/:id/custom-fields', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(SetCustomFieldSchema), interactionController.updateInteraction.bind(interactionController));
    router.delete('/:id/custom-fields', authorize(['admin', 'manager', 'user']), validateRequest(InteractionIdParamSchema, 'params'), validateRequest(RemoveCustomFieldSchema), interactionController.updateInteraction.bind(interactionController));
    router.delete('/:id', authorize(['admin', 'manager']), validateRequest(InteractionIdParamSchema, 'params'), interactionController.deleteInteraction.bind(interactionController));
    router.get('/contacts/:contactId/interactions', authorize(['admin', 'manager', 'user']), validateRequest(InteractionContactIdParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByContact.bind(interactionController));
    router.get('/companies/:companyId/interactions', authorize(['admin', 'manager', 'user']), validateRequest(InteractionCompanyIdParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByCompany.bind(interactionController));
    router.get('/type/:type', authorize(['admin', 'manager', 'user']), validateRequest(InteractionTypeParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/status/:status', authorize(['admin', 'manager', 'user']), validateRequest(InteractionStatusParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/priority/:priority', authorize(['admin', 'manager', 'user']), validateRequest(InteractionPriorityParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/scheduled', authorize(['admin', 'manager', 'user']), validateRequest(InteractionScheduledQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/upcoming', authorize(['admin', 'manager', 'user']), validateRequest(InteractionUpcomingQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/overdue', authorize(['admin', 'manager', 'user']), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/completed', authorize(['admin', 'manager', 'user']), validateRequest(InteractionScheduledQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/tasks', authorize(['admin', 'manager', 'user']), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/tasks/overdue', authorize(['admin', 'manager', 'user']), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/tasks/upcoming', authorize(['admin', 'manager', 'user']), validateRequest(InteractionUpcomingQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/follow-ups', authorize(['admin', 'manager', 'user']), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/follow-ups/overdue', authorize(['admin', 'manager', 'user']), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/follow-ups/upcoming', authorize(['admin', 'manager', 'user']), validateRequest(InteractionUpcomingQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/users/:userId/interactions', authorize(['admin', 'manager', 'user']), validateRequest(InteractionUserIdParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/users/:userId/tasks', authorize(['admin', 'manager', 'user']), validateRequest(InteractionUserIdParamSchema, 'params'), validateRequest(InteractionSearchQuerySchema, 'query'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.get('/users/:userId/overdue', authorize(['admin', 'manager', 'user']), validateRequest(InteractionUserIdParamSchema, 'params'), interactionController.getInteractionsByOrganization.bind(interactionController));
    router.put('/bulk', authorize(['admin', 'manager']), validateRequest(InteractionBulkUpdateSchema), interactionController.updateInteraction.bind(interactionController));
    router.delete('/bulk', authorize(['admin', 'manager']), validateRequest(InteractionBulkDeleteSchema), interactionController.deleteInteraction.bind(interactionController));
    return router;
}
//# sourceMappingURL=interaction.routes.js.map