import { z } from 'zod';
declare const envSchema: z.ZodObject<{
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "staging", "production", "test"]>>;
    PORT: z.ZodDefault<z.ZodNumber>;
    HOST: z.ZodDefault<z.ZodString>;
    DATABASE_URL: z.ZodString;
    PRISMA_LOG_LEVEL: z.ZodDefault<z.ZodEnum<["info", "query", "warn", "error"]>>;
    REDIS_URL: z.ZodString;
    REDIS_PASSWORD: z.ZodOptional<z.ZodString>;
    JWT_SECRET: z.ZodString;
    JWT_EXPIRES_IN: z.ZodDefault<z.ZodString>;
    BCRYPT_ROUNDS: z.ZodDefault<z.ZodNumber>;
    EMAIL_SMTP_URL: z.ZodOptional<z.ZodString>;
    EMAIL_FROM: z.ZodOptional<z.ZodString>;
    OPENAI_API_KEY: z.ZodOptional<z.ZodString>;
    AZURE_OPENAI_ENDPOINT: z.ZodOptional<z.ZodString>;
    AZURE_OPENAI_API_KEY: z.ZodOptional<z.ZodString>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["error", "warn", "info", "debug"]>>;
    SENTRY_DSN: z.ZodOptional<z.ZodString>;
    PROMETHEUS_ENABLED: z.ZodDefault<z.ZodBoolean>;
    METRICS_PORT: z.ZodDefault<z.ZodNumber>;
    ENABLE_API_DOCS: z.ZodDefault<z.ZodBoolean>;
    ENABLE_RATE_LIMITING: z.ZodDefault<z.ZodBoolean>;
    ENABLE_CORS: z.ZodDefault<z.ZodBoolean>;
    REQUEST_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    MAX_REQUEST_SIZE: z.ZodDefault<z.ZodString>;
    SKIP_AUTH: z.ZodDefault<z.ZodBoolean>;
    CHAOS_ENABLED: z.ZodDefault<z.ZodBoolean>;
    DEFAULT_ORG_ID: z.ZodOptional<z.ZodString>;
    ENABLE_MULTI_TENANT: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    NODE_ENV?: "test" | "development" | "production" | "staging";
    PORT?: number;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    JWT_SECRET?: string;
    HOST?: string;
    PRISMA_LOG_LEVEL?: "error" | "info" | "query" | "warn";
    REDIS_PASSWORD?: string;
    JWT_EXPIRES_IN?: string;
    BCRYPT_ROUNDS?: number;
    EMAIL_SMTP_URL?: string;
    EMAIL_FROM?: string;
    OPENAI_API_KEY?: string;
    AZURE_OPENAI_ENDPOINT?: string;
    AZURE_OPENAI_API_KEY?: string;
    LOG_LEVEL?: "error" | "info" | "warn" | "debug";
    SENTRY_DSN?: string;
    PROMETHEUS_ENABLED?: boolean;
    METRICS_PORT?: number;
    ENABLE_API_DOCS?: boolean;
    ENABLE_RATE_LIMITING?: boolean;
    ENABLE_CORS?: boolean;
    REQUEST_TIMEOUT?: number;
    MAX_REQUEST_SIZE?: string;
    SKIP_AUTH?: boolean;
    CHAOS_ENABLED?: boolean;
    DEFAULT_ORG_ID?: string;
    ENABLE_MULTI_TENANT?: boolean;
}, {
    NODE_ENV?: "test" | "development" | "production" | "staging";
    PORT?: number;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    JWT_SECRET?: string;
    HOST?: string;
    PRISMA_LOG_LEVEL?: "error" | "info" | "query" | "warn";
    REDIS_PASSWORD?: string;
    JWT_EXPIRES_IN?: string;
    BCRYPT_ROUNDS?: number;
    EMAIL_SMTP_URL?: string;
    EMAIL_FROM?: string;
    OPENAI_API_KEY?: string;
    AZURE_OPENAI_ENDPOINT?: string;
    AZURE_OPENAI_API_KEY?: string;
    LOG_LEVEL?: "error" | "info" | "warn" | "debug";
    SENTRY_DSN?: string;
    PROMETHEUS_ENABLED?: boolean;
    METRICS_PORT?: number;
    ENABLE_API_DOCS?: boolean;
    ENABLE_RATE_LIMITING?: boolean;
    ENABLE_CORS?: boolean;
    REQUEST_TIMEOUT?: number;
    MAX_REQUEST_SIZE?: string;
    SKIP_AUTH?: boolean;
    CHAOS_ENABLED?: boolean;
    DEFAULT_ORG_ID?: string;
    ENABLE_MULTI_TENANT?: boolean;
}>;
export type EnvConfig = z.infer<typeof envSchema>;
export declare const env: {
    NODE_ENV?: "test" | "development" | "production" | "staging";
    PORT?: number;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    JWT_SECRET?: string;
    HOST?: string;
    PRISMA_LOG_LEVEL?: "error" | "info" | "query" | "warn";
    REDIS_PASSWORD?: string;
    JWT_EXPIRES_IN?: string;
    BCRYPT_ROUNDS?: number;
    EMAIL_SMTP_URL?: string;
    EMAIL_FROM?: string;
    OPENAI_API_KEY?: string;
    AZURE_OPENAI_ENDPOINT?: string;
    AZURE_OPENAI_API_KEY?: string;
    LOG_LEVEL?: "error" | "info" | "warn" | "debug";
    SENTRY_DSN?: string;
    PROMETHEUS_ENABLED?: boolean;
    METRICS_PORT?: number;
    ENABLE_API_DOCS?: boolean;
    ENABLE_RATE_LIMITING?: boolean;
    ENABLE_CORS?: boolean;
    REQUEST_TIMEOUT?: number;
    MAX_REQUEST_SIZE?: string;
    SKIP_AUTH?: boolean;
    CHAOS_ENABLED?: boolean;
    DEFAULT_ORG_ID?: string;
    ENABLE_MULTI_TENANT?: boolean;
};
export declare const isDevelopment: () => boolean;
export declare const isProduction: () => boolean;
export declare const isTest: () => boolean;
export declare const dbConfig: {
    readonly url: string;
    readonly logLevel: "error" | "info" | "query" | "warn";
};
export declare const redisConfig: {
    readonly url: string;
    readonly password: string;
};
export declare const jwtConfig: {
    readonly secret: string;
    readonly expiresIn: string;
};
export declare const serverConfig: {
    readonly port: number;
    readonly host: string;
    readonly timeout: number;
    readonly maxRequestSize: string;
};
export {};
//# sourceMappingURL=env.d.ts.map