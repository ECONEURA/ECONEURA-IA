# Multi-stage build para optimizaci贸n
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Instalar dependencias
RUN npm install -g pnpm && pnpm install --frozen-lockfile

# Copiar c贸digo fuente
COPY . .

# Build optimizado
RUN pnpm run build:optimized

# Stage de producci贸n
FROM node:18-alpine AS production

WORKDIR /app

# Instalar solo dependencias de producci贸n
COPY package*.json ./
COPY pnpm-lock.yaml ./
RUN npm install -g pnpm && pnpm install --frozen-lockfile --prod

# Copiar build optimizado
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/.cache ./.cache

# Crear usuario no-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Cambiar ownership
RUN chown -R nodejs:nodejs /app
USER nodejs

# Variables de entorno optimizadas
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048 --optimize-for-size"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

EXPOSE 3000

CMD ["node", "--max-old-space-size=2048", "dist/index.js"]
