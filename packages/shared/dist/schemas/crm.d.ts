import { z } from 'zod';
export declare const CompanySchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    email: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    website: z.ZodOptional<z.ZodString>;
    industry: z.ZodOptional<z.ZodString>;
    size: z.ZodOptional<z.ZodEnum<["startup", "small", "medium", "large", "enterprise"]>>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "prospect", "customer"]>>;
    address: z.ZodOptional<z.ZodObject<{
        street: z.ZodOptional<z.ZodString>;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        zipCode: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    }, {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    }>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "prospect" | "customer";
    orgId?: string;
    id?: string;
    size?: "enterprise" | "startup" | "small" | "medium" | "large";
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    industry?: string;
    address?: {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    };
    tags?: string[];
}, {
    status?: "active" | "inactive" | "prospect" | "customer";
    orgId?: string;
    id?: string;
    size?: "enterprise" | "startup" | "small" | "medium" | "large";
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    industry?: string;
    address?: {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    };
    tags?: string[];
}>;
export declare const CreateCompanySchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    email: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    website: z.ZodOptional<z.ZodString>;
    industry: z.ZodOptional<z.ZodString>;
    size: z.ZodOptional<z.ZodEnum<["startup", "small", "medium", "large", "enterprise"]>>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "prospect", "customer"]>>;
    address: z.ZodOptional<z.ZodObject<{
        street: z.ZodOptional<z.ZodString>;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        zipCode: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    }, {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    }>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "prospect" | "customer";
    orgId?: string;
    size?: "enterprise" | "startup" | "small" | "medium" | "large";
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    industry?: string;
    address?: {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    };
    tags?: string[];
}, {
    status?: "active" | "inactive" | "prospect" | "customer";
    orgId?: string;
    size?: "enterprise" | "startup" | "small" | "medium" | "large";
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    industry?: string;
    address?: {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    };
    tags?: string[];
}>;
export declare const UpdateCompanySchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    phone: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    website: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    industry: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    size: z.ZodOptional<z.ZodOptional<z.ZodEnum<["startup", "small", "medium", "large", "enterprise"]>>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["active", "inactive", "prospect", "customer"]>>>;
    address: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        street: z.ZodOptional<z.ZodString>;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        zipCode: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    }, {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    }>>>;
    tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    orgId: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "orgId" | "id">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "prospect" | "customer";
    size?: "enterprise" | "startup" | "small" | "medium" | "large";
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    industry?: string;
    address?: {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    };
    tags?: string[];
}, {
    status?: "active" | "inactive" | "prospect" | "customer";
    size?: "enterprise" | "startup" | "small" | "medium" | "large";
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    industry?: string;
    address?: {
        city?: string;
        state?: string;
        country?: string;
        street?: string;
        zipCode?: string;
    };
    tags?: string[];
}>;
export declare const ContactSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    firstName: z.ZodString;
    lastName: z.ZodString;
    email: z.ZodString;
    phone: z.ZodOptional<z.ZodString>;
    jobTitle: z.ZodOptional<z.ZodString>;
    department: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    isPrimary: z.ZodDefault<z.ZodBoolean>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "bounced"]>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "bounced";
    orgId?: string;
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    isPrimary?: boolean;
    tags?: string[];
    jobTitle?: string;
    department?: string;
    companyId?: string;
}, {
    status?: "active" | "inactive" | "bounced";
    orgId?: string;
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    isPrimary?: boolean;
    tags?: string[];
    jobTitle?: string;
    department?: string;
    companyId?: string;
}>;
export declare const CreateContactSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    firstName: z.ZodString;
    lastName: z.ZodString;
    email: z.ZodString;
    phone: z.ZodOptional<z.ZodString>;
    jobTitle: z.ZodOptional<z.ZodString>;
    department: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    isPrimary: z.ZodDefault<z.ZodBoolean>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "bounced"]>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "bounced";
    orgId?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    isPrimary?: boolean;
    tags?: string[];
    jobTitle?: string;
    department?: string;
    companyId?: string;
}, {
    status?: "active" | "inactive" | "bounced";
    orgId?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    isPrimary?: boolean;
    tags?: string[];
    jobTitle?: string;
    department?: string;
    companyId?: string;
}>;
export declare const UpdateContactSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    jobTitle: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    department: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    companyId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    isPrimary: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["active", "inactive", "bounced"]>>>;
    tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    orgId: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "orgId" | "id">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "bounced";
    createdAt?: string;
    updatedAt?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    isPrimary?: boolean;
    tags?: string[];
    jobTitle?: string;
    department?: string;
    companyId?: string;
}, {
    status?: "active" | "inactive" | "bounced";
    createdAt?: string;
    updatedAt?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    isPrimary?: boolean;
    tags?: string[];
    jobTitle?: string;
    department?: string;
    companyId?: string;
}>;
export declare const DealSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    stage: z.ZodDefault<z.ZodEnum<["lead", "qualified", "proposal", "negotiation", "closed_won", "closed_lost"]>>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "archived"]>>;
    probability: z.ZodDefault<z.ZodNumber>;
    expectedCloseDate: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    contactId: z.ZodOptional<z.ZodString>;
    assignedTo: z.ZodOptional<z.ZodString>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "archived";
    orgId?: string;
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    companyId?: string;
    amount?: number;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    probability?: number;
    expectedCloseDate?: string;
    contactId?: string;
    assignedTo?: string;
}, {
    status?: "active" | "inactive" | "archived";
    orgId?: string;
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    companyId?: string;
    amount?: number;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    probability?: number;
    expectedCloseDate?: string;
    contactId?: string;
    assignedTo?: string;
}>;
export declare const CreateDealSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    stage: z.ZodDefault<z.ZodEnum<["lead", "qualified", "proposal", "negotiation", "closed_won", "closed_lost"]>>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "archived"]>>;
    probability: z.ZodDefault<z.ZodNumber>;
    expectedCloseDate: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    contactId: z.ZodOptional<z.ZodString>;
    assignedTo: z.ZodOptional<z.ZodString>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "archived";
    orgId?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    companyId?: string;
    amount?: number;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    probability?: number;
    expectedCloseDate?: string;
    contactId?: string;
    assignedTo?: string;
}, {
    status?: "active" | "inactive" | "archived";
    orgId?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    companyId?: string;
    amount?: number;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    probability?: number;
    expectedCloseDate?: string;
    contactId?: string;
    assignedTo?: string;
}>;
export declare const UpdateDealSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    amount: z.ZodOptional<z.ZodNumber>;
    currency: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    stage: z.ZodOptional<z.ZodDefault<z.ZodEnum<["lead", "qualified", "proposal", "negotiation", "closed_won", "closed_lost"]>>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["active", "inactive", "archived"]>>>;
    probability: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    expectedCloseDate: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    companyId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    contactId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    assignedTo: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    orgId: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "orgId" | "id">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "archived";
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    companyId?: string;
    amount?: number;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    probability?: number;
    expectedCloseDate?: string;
    contactId?: string;
    assignedTo?: string;
}, {
    status?: "active" | "inactive" | "archived";
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    companyId?: string;
    amount?: number;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    probability?: number;
    expectedCloseDate?: string;
    contactId?: string;
    assignedTo?: string;
}>;
export declare const DealFilterSchema: z.ZodObject<{
    q: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    contactId: z.ZodOptional<z.ZodString>;
    stage: z.ZodOptional<z.ZodEnum<["lead", "qualified", "proposal", "negotiation", "closed_won", "closed_lost"]>>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "archived"]>>;
    minAmount: z.ZodOptional<z.ZodNumber>;
    maxAmount: z.ZodOptional<z.ZodNumber>;
    assignedTo: z.ZodOptional<z.ZodString>;
    expectedCloseDateFrom: z.ZodOptional<z.ZodString>;
    expectedCloseDateTo: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "archived";
    tags?: string[];
    companyId?: string;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    contactId?: string;
    assignedTo?: string;
    q?: string;
    minAmount?: number;
    maxAmount?: number;
    expectedCloseDateFrom?: string;
    expectedCloseDateTo?: string;
}, {
    status?: "active" | "inactive" | "archived";
    tags?: string[];
    companyId?: string;
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    contactId?: string;
    assignedTo?: string;
    q?: string;
    minAmount?: number;
    maxAmount?: number;
    expectedCloseDateFrom?: string;
    expectedCloseDateTo?: string;
}>;
export declare const MoveDealStageSchema: z.ZodObject<{
    stage: z.ZodEnum<["lead", "qualified", "proposal", "negotiation", "closed_won", "closed_lost"]>;
    reason: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    reason?: string;
    notes?: string;
}, {
    stage?: "lead" | "qualified" | "proposal" | "negotiation" | "closed_won" | "closed_lost";
    reason?: string;
    notes?: string;
}>;
export declare const DealAnalyticsSchema: z.ZodObject<{
    totalDeals: z.ZodNumber;
    totalValue: z.ZodNumber;
    averageDealSize: z.ZodNumber;
    winRate: z.ZodNumber;
    averageSalesCycle: z.ZodNumber;
    dealsByStage: z.ZodRecord<z.ZodString, z.ZodNumber>;
    dealsByStatus: z.ZodRecord<z.ZodString, z.ZodNumber>;
    dealsByMonth: z.ZodArray<z.ZodObject<{
        month: z.ZodString;
        count: z.ZodNumber;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value?: number;
        month?: string;
        count?: number;
    }, {
        value?: number;
        month?: string;
        count?: number;
    }>, "many">;
    topPerformers: z.ZodArray<z.ZodObject<{
        userId: z.ZodString;
        name: z.ZodString;
        dealsCount: z.ZodNumber;
        totalValue: z.ZodNumber;
        winRate: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        userId?: string;
        name?: string;
        totalValue?: number;
        winRate?: number;
        dealsCount?: number;
    }, {
        userId?: string;
        name?: string;
        totalValue?: number;
        winRate?: number;
        dealsCount?: number;
    }>, "many">;
    pipelineHealth: z.ZodObject<{
        healthy: z.ZodBoolean;
        score: z.ZodNumber;
        issues: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        issues?: string[];
        healthy?: boolean;
        score?: number;
    }, {
        issues?: string[];
        healthy?: boolean;
        score?: number;
    }>;
}, "strip", z.ZodTypeAny, {
    totalDeals?: number;
    totalValue?: number;
    averageDealSize?: number;
    winRate?: number;
    averageSalesCycle?: number;
    dealsByStage?: Record<string, number>;
    dealsByStatus?: Record<string, number>;
    dealsByMonth?: {
        value?: number;
        month?: string;
        count?: number;
    }[];
    topPerformers?: {
        userId?: string;
        name?: string;
        totalValue?: number;
        winRate?: number;
        dealsCount?: number;
    }[];
    pipelineHealth?: {
        issues?: string[];
        healthy?: boolean;
        score?: number;
    };
}, {
    totalDeals?: number;
    totalValue?: number;
    averageDealSize?: number;
    winRate?: number;
    averageSalesCycle?: number;
    dealsByStage?: Record<string, number>;
    dealsByStatus?: Record<string, number>;
    dealsByMonth?: {
        value?: number;
        month?: string;
        count?: number;
    }[];
    topPerformers?: {
        userId?: string;
        name?: string;
        totalValue?: number;
        winRate?: number;
        dealsCount?: number;
    }[];
    pipelineHealth?: {
        issues?: string[];
        healthy?: boolean;
        score?: number;
    };
}>;
export declare const InteractionSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["email", "call", "meeting", "note", "task"]>;
    subject: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    direction: z.ZodOptional<z.ZodEnum<["inbound", "outbound"]>>;
    status: z.ZodDefault<z.ZodEnum<["pending", "completed", "cancelled"]>>;
    scheduledAt: z.ZodOptional<z.ZodString>;
    completedAt: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    contactId: z.ZodOptional<z.ZodString>;
    dealId: z.ZodOptional<z.ZodString>;
    assignedTo: z.ZodOptional<z.ZodString>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type?: "email" | "call" | "meeting" | "note" | "task";
    status?: "pending" | "completed" | "cancelled";
    orgId?: string;
    id?: string;
    metadata?: Record<string, any>;
    createdAt?: string;
    updatedAt?: string;
    tags?: string[];
    companyId?: string;
    contactId?: string;
    assignedTo?: string;
    subject?: string;
    content?: string;
    direction?: "inbound" | "outbound";
    scheduledAt?: string;
    completedAt?: string;
    dealId?: string;
}, {
    type?: "email" | "call" | "meeting" | "note" | "task";
    status?: "pending" | "completed" | "cancelled";
    orgId?: string;
    id?: string;
    metadata?: Record<string, any>;
    createdAt?: string;
    updatedAt?: string;
    tags?: string[];
    companyId?: string;
    contactId?: string;
    assignedTo?: string;
    subject?: string;
    content?: string;
    direction?: "inbound" | "outbound";
    scheduledAt?: string;
    completedAt?: string;
    dealId?: string;
}>;
export declare const CreateInteractionSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["email", "call", "meeting", "note", "task"]>;
    subject: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    direction: z.ZodOptional<z.ZodEnum<["inbound", "outbound"]>>;
    status: z.ZodDefault<z.ZodEnum<["pending", "completed", "cancelled"]>>;
    scheduledAt: z.ZodOptional<z.ZodString>;
    completedAt: z.ZodOptional<z.ZodString>;
    companyId: z.ZodOptional<z.ZodString>;
    contactId: z.ZodOptional<z.ZodString>;
    dealId: z.ZodOptional<z.ZodString>;
    assignedTo: z.ZodOptional<z.ZodString>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    type?: "email" | "call" | "meeting" | "note" | "task";
    status?: "pending" | "completed" | "cancelled";
    orgId?: string;
    metadata?: Record<string, any>;
    tags?: string[];
    companyId?: string;
    contactId?: string;
    assignedTo?: string;
    subject?: string;
    content?: string;
    direction?: "inbound" | "outbound";
    scheduledAt?: string;
    completedAt?: string;
    dealId?: string;
}, {
    type?: "email" | "call" | "meeting" | "note" | "task";
    status?: "pending" | "completed" | "cancelled";
    orgId?: string;
    metadata?: Record<string, any>;
    tags?: string[];
    companyId?: string;
    contactId?: string;
    assignedTo?: string;
    subject?: string;
    content?: string;
    direction?: "inbound" | "outbound";
    scheduledAt?: string;
    completedAt?: string;
    dealId?: string;
}>;
export declare const UpdateInteractionSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    type: z.ZodOptional<z.ZodEnum<["email", "call", "meeting", "note", "task"]>>;
    subject: z.ZodOptional<z.ZodString>;
    content: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    direction: z.ZodOptional<z.ZodOptional<z.ZodEnum<["inbound", "outbound"]>>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["pending", "completed", "cancelled"]>>>;
    scheduledAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    completedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    companyId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    contactId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    dealId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    assignedTo: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    orgId: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "orgId" | "id">, "strip", z.ZodTypeAny, {
    type?: "email" | "call" | "meeting" | "note" | "task";
    status?: "pending" | "completed" | "cancelled";
    metadata?: Record<string, any>;
    createdAt?: string;
    updatedAt?: string;
    tags?: string[];
    companyId?: string;
    contactId?: string;
    assignedTo?: string;
    subject?: string;
    content?: string;
    direction?: "inbound" | "outbound";
    scheduledAt?: string;
    completedAt?: string;
    dealId?: string;
}, {
    type?: "email" | "call" | "meeting" | "note" | "task";
    status?: "pending" | "completed" | "cancelled";
    metadata?: Record<string, any>;
    createdAt?: string;
    updatedAt?: string;
    tags?: string[];
    companyId?: string;
    contactId?: string;
    assignedTo?: string;
    subject?: string;
    content?: string;
    direction?: "inbound" | "outbound";
    scheduledAt?: string;
    completedAt?: string;
    dealId?: string;
}>;
export type Company = z.infer<typeof CompanySchema>;
export type CreateCompany = z.infer<typeof CreateCompanySchema>;
export type UpdateCompany = z.infer<typeof UpdateCompanySchema>;
export type Contact = z.infer<typeof ContactSchema>;
export type CreateContact = z.infer<typeof CreateContactSchema>;
export type UpdateContact = z.infer<typeof UpdateContactSchema>;
export type Deal = z.infer<typeof DealSchema>;
export type CreateDeal = z.infer<typeof CreateDealSchema>;
export type UpdateDeal = z.infer<typeof UpdateDealSchema>;
export type DealFilter = z.infer<typeof DealFilterSchema>;
export type MoveDealStage = z.infer<typeof MoveDealStageSchema>;
export type DealAnalytics = z.infer<typeof DealAnalyticsSchema>;
export type Interaction = z.infer<typeof InteractionSchema>;
export type CreateInteraction = z.infer<typeof CreateInteractionSchema>;
export type UpdateInteraction = z.infer<typeof UpdateInteractionSchema>;
//# sourceMappingURL=crm.d.ts.map