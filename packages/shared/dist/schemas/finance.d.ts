import { z } from 'zod';
export declare const InvoiceSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    invoiceNumber: z.ZodString;
    type: z.ZodDefault<z.ZodEnum<["invoice", "credit_note", "debit_note"]>>;
    status: z.ZodDefault<z.ZodEnum<["draft", "sent", "viewed", "paid", "overdue", "cancelled"]>>;
    entityType: z.ZodEnum<["company", "contact"]>;
    entityId: z.ZodString;
    issueDate: z.ZodString;
    dueDate: z.ZodString;
    currency: z.ZodDefault<z.ZodString>;
    subtotal: z.ZodNumber;
    taxAmount: z.ZodDefault<z.ZodNumber>;
    totalAmount: z.ZodNumber;
    paidAmount: z.ZodDefault<z.ZodNumber>;
    balanceDue: z.ZodNumber;
    taxRate: z.ZodDefault<z.ZodNumber>;
    notes: z.ZodOptional<z.ZodString>;
    terms: z.ZodOptional<z.ZodString>;
    lineItems: z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        quantity: z.ZodNumber;
        unitPrice: z.ZodNumber;
        total: z.ZodNumber;
        taxRate: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }, {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }>, "many">;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type?: "invoice" | "credit_note" | "debit_note";
    status?: "cancelled" | "draft" | "sent" | "viewed" | "paid" | "overdue";
    orgId?: string;
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    currency?: string;
    notes?: string;
    taxRate?: number;
    subtotal?: number;
    taxAmount?: number;
    totalAmount?: number;
    invoiceNumber?: string;
    entityType?: "company" | "contact";
    entityId?: string;
    issueDate?: string;
    dueDate?: string;
    paidAmount?: number;
    balanceDue?: number;
    terms?: string;
    lineItems?: {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }[];
}, {
    type?: "invoice" | "credit_note" | "debit_note";
    status?: "cancelled" | "draft" | "sent" | "viewed" | "paid" | "overdue";
    orgId?: string;
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    currency?: string;
    notes?: string;
    taxRate?: number;
    subtotal?: number;
    taxAmount?: number;
    totalAmount?: number;
    invoiceNumber?: string;
    entityType?: "company" | "contact";
    entityId?: string;
    issueDate?: string;
    dueDate?: string;
    paidAmount?: number;
    balanceDue?: number;
    terms?: string;
    lineItems?: {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }[];
}>;
export declare const CreateInvoiceSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    invoiceNumber: z.ZodString;
    type: z.ZodDefault<z.ZodEnum<["invoice", "credit_note", "debit_note"]>>;
    status: z.ZodDefault<z.ZodEnum<["draft", "sent", "viewed", "paid", "overdue", "cancelled"]>>;
    entityType: z.ZodEnum<["company", "contact"]>;
    entityId: z.ZodString;
    issueDate: z.ZodString;
    dueDate: z.ZodString;
    currency: z.ZodDefault<z.ZodString>;
    subtotal: z.ZodNumber;
    taxAmount: z.ZodDefault<z.ZodNumber>;
    totalAmount: z.ZodNumber;
    paidAmount: z.ZodDefault<z.ZodNumber>;
    balanceDue: z.ZodNumber;
    taxRate: z.ZodDefault<z.ZodNumber>;
    notes: z.ZodOptional<z.ZodString>;
    terms: z.ZodOptional<z.ZodString>;
    lineItems: z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        quantity: z.ZodNumber;
        unitPrice: z.ZodNumber;
        total: z.ZodNumber;
        taxRate: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }, {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }>, "many">;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    type?: "invoice" | "credit_note" | "debit_note";
    status?: "cancelled" | "draft" | "sent" | "viewed" | "paid" | "overdue";
    orgId?: string;
    currency?: string;
    notes?: string;
    taxRate?: number;
    subtotal?: number;
    taxAmount?: number;
    totalAmount?: number;
    invoiceNumber?: string;
    entityType?: "company" | "contact";
    entityId?: string;
    issueDate?: string;
    dueDate?: string;
    paidAmount?: number;
    balanceDue?: number;
    terms?: string;
    lineItems?: {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }[];
}, {
    type?: "invoice" | "credit_note" | "debit_note";
    status?: "cancelled" | "draft" | "sent" | "viewed" | "paid" | "overdue";
    orgId?: string;
    currency?: string;
    notes?: string;
    taxRate?: number;
    subtotal?: number;
    taxAmount?: number;
    totalAmount?: number;
    invoiceNumber?: string;
    entityType?: "company" | "contact";
    entityId?: string;
    issueDate?: string;
    dueDate?: string;
    paidAmount?: number;
    balanceDue?: number;
    terms?: string;
    lineItems?: {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }[];
}>;
export declare const UpdateInvoiceSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    invoiceNumber: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodDefault<z.ZodEnum<["invoice", "credit_note", "debit_note"]>>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["draft", "sent", "viewed", "paid", "overdue", "cancelled"]>>>;
    entityType: z.ZodOptional<z.ZodEnum<["company", "contact"]>>;
    entityId: z.ZodOptional<z.ZodString>;
    issueDate: z.ZodOptional<z.ZodString>;
    dueDate: z.ZodOptional<z.ZodString>;
    currency: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    subtotal: z.ZodOptional<z.ZodNumber>;
    taxAmount: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    totalAmount: z.ZodOptional<z.ZodNumber>;
    paidAmount: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    balanceDue: z.ZodOptional<z.ZodNumber>;
    taxRate: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    notes: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    terms: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    lineItems: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        description: z.ZodString;
        quantity: z.ZodNumber;
        unitPrice: z.ZodNumber;
        total: z.ZodNumber;
        taxRate: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }, {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }>, "many">>;
    orgId: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "orgId" | "id">, "strip", z.ZodTypeAny, {
    type?: "invoice" | "credit_note" | "debit_note";
    status?: "cancelled" | "draft" | "sent" | "viewed" | "paid" | "overdue";
    createdAt?: string;
    updatedAt?: string;
    currency?: string;
    notes?: string;
    taxRate?: number;
    subtotal?: number;
    taxAmount?: number;
    totalAmount?: number;
    invoiceNumber?: string;
    entityType?: "company" | "contact";
    entityId?: string;
    issueDate?: string;
    dueDate?: string;
    paidAmount?: number;
    balanceDue?: number;
    terms?: string;
    lineItems?: {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }[];
}, {
    type?: "invoice" | "credit_note" | "debit_note";
    status?: "cancelled" | "draft" | "sent" | "viewed" | "paid" | "overdue";
    createdAt?: string;
    updatedAt?: string;
    currency?: string;
    notes?: string;
    taxRate?: number;
    subtotal?: number;
    taxAmount?: number;
    totalAmount?: number;
    invoiceNumber?: string;
    entityType?: "company" | "contact";
    entityId?: string;
    issueDate?: string;
    dueDate?: string;
    paidAmount?: number;
    balanceDue?: number;
    terms?: string;
    lineItems?: {
        total?: number;
        id?: string;
        description?: string;
        taxRate?: number;
        quantity?: number;
        unitPrice?: number;
    }[];
}>;
export declare const PaymentSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    invoiceId: z.ZodString;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    method: z.ZodEnum<["cash", "bank_transfer", "credit_card", "paypal", "stripe", "sepa"]>;
    reference: z.ZodOptional<z.ZodString>;
    transactionId: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["pending", "completed", "failed", "cancelled"]>>;
    processedAt: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status?: "failed" | "pending" | "completed" | "cancelled";
    orgId?: string;
    id?: string;
    metadata?: Record<string, any>;
    createdAt?: string;
    updatedAt?: string;
    currency?: string;
    amount?: number;
    invoiceId?: string;
    method?: "cash" | "bank_transfer" | "credit_card" | "paypal" | "stripe" | "sepa";
    reference?: string;
    transactionId?: string;
    processedAt?: string;
}, {
    status?: "failed" | "pending" | "completed" | "cancelled";
    orgId?: string;
    id?: string;
    metadata?: Record<string, any>;
    createdAt?: string;
    updatedAt?: string;
    currency?: string;
    amount?: number;
    invoiceId?: string;
    method?: "cash" | "bank_transfer" | "credit_card" | "paypal" | "stripe" | "sepa";
    reference?: string;
    transactionId?: string;
    processedAt?: string;
}>;
export declare const CreatePaymentSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    invoiceId: z.ZodString;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    method: z.ZodEnum<["cash", "bank_transfer", "credit_card", "paypal", "stripe", "sepa"]>;
    reference: z.ZodOptional<z.ZodString>;
    transactionId: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["pending", "completed", "failed", "cancelled"]>>;
    processedAt: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    status?: "failed" | "pending" | "completed" | "cancelled";
    orgId?: string;
    metadata?: Record<string, any>;
    currency?: string;
    amount?: number;
    invoiceId?: string;
    method?: "cash" | "bank_transfer" | "credit_card" | "paypal" | "stripe" | "sepa";
    reference?: string;
    transactionId?: string;
    processedAt?: string;
}, {
    status?: "failed" | "pending" | "completed" | "cancelled";
    orgId?: string;
    metadata?: Record<string, any>;
    currency?: string;
    amount?: number;
    invoiceId?: string;
    method?: "cash" | "bank_transfer" | "credit_card" | "paypal" | "stripe" | "sepa";
    reference?: string;
    transactionId?: string;
    processedAt?: string;
}>;
export declare const SEPATransactionSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    messageId: z.ZodOptional<z.ZodString>;
    accountId: z.ZodString;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    valueDate: z.ZodString;
    bookingDate: z.ZodOptional<z.ZodString>;
    creditorName: z.ZodOptional<z.ZodString>;
    creditorIBAN: z.ZodOptional<z.ZodString>;
    debtorName: z.ZodOptional<z.ZodString>;
    debtorIBAN: z.ZodOptional<z.ZodString>;
    remittanceInfo: z.ZodOptional<z.ZodString>;
    endToEndId: z.ZodOptional<z.ZodString>;
    mandateId: z.ZodOptional<z.ZodString>;
    creditorId: z.ZodOptional<z.ZodString>;
    reasonCode: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["pending", "processed", "rejected", "returned"]>>;
    orgId: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status?: "pending" | "processed" | "rejected" | "returned";
    orgId?: string;
    id?: string;
    createdAt?: string;
    currency?: string;
    amount?: number;
    messageId?: string;
    accountId?: string;
    valueDate?: string;
    bookingDate?: string;
    creditorName?: string;
    creditorIBAN?: string;
    debtorName?: string;
    debtorIBAN?: string;
    remittanceInfo?: string;
    endToEndId?: string;
    mandateId?: string;
    creditorId?: string;
    reasonCode?: string;
}, {
    status?: "pending" | "processed" | "rejected" | "returned";
    orgId?: string;
    id?: string;
    createdAt?: string;
    currency?: string;
    amount?: number;
    messageId?: string;
    accountId?: string;
    valueDate?: string;
    bookingDate?: string;
    creditorName?: string;
    creditorIBAN?: string;
    debtorName?: string;
    debtorIBAN?: string;
    remittanceInfo?: string;
    endToEndId?: string;
    mandateId?: string;
    creditorId?: string;
    reasonCode?: string;
}>;
export declare const SEPAUploadResultSchema: z.ZodObject<{
    fileId: z.ZodString;
    fileName: z.ZodString;
    format: z.ZodEnum<["CAMT", "MT940"]>;
    transactionsCount: z.ZodNumber;
    processedCount: z.ZodNumber;
    errorsCount: z.ZodNumber;
    status: z.ZodEnum<["processing", "completed", "failed"]>;
    errors: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    createdAt: z.ZodString;
    transactions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        messageId: z.ZodOptional<z.ZodString>;
        accountId: z.ZodString;
        amount: z.ZodNumber;
        currency: z.ZodDefault<z.ZodString>;
        valueDate: z.ZodString;
        bookingDate: z.ZodOptional<z.ZodString>;
        creditorName: z.ZodOptional<z.ZodString>;
        creditorIBAN: z.ZodOptional<z.ZodString>;
        debtorName: z.ZodOptional<z.ZodString>;
        debtorIBAN: z.ZodOptional<z.ZodString>;
        remittanceInfo: z.ZodOptional<z.ZodString>;
        endToEndId: z.ZodOptional<z.ZodString>;
        mandateId: z.ZodOptional<z.ZodString>;
        creditorId: z.ZodOptional<z.ZodString>;
        reasonCode: z.ZodOptional<z.ZodString>;
        status: z.ZodDefault<z.ZodEnum<["pending", "processed", "rejected", "returned"]>>;
        orgId: z.ZodString;
        createdAt: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        status?: "pending" | "processed" | "rejected" | "returned";
        orgId?: string;
        id?: string;
        createdAt?: string;
        currency?: string;
        amount?: number;
        messageId?: string;
        accountId?: string;
        valueDate?: string;
        bookingDate?: string;
        creditorName?: string;
        creditorIBAN?: string;
        debtorName?: string;
        debtorIBAN?: string;
        remittanceInfo?: string;
        endToEndId?: string;
        mandateId?: string;
        creditorId?: string;
        reasonCode?: string;
    }, {
        status?: "pending" | "processed" | "rejected" | "returned";
        orgId?: string;
        id?: string;
        createdAt?: string;
        currency?: string;
        amount?: number;
        messageId?: string;
        accountId?: string;
        valueDate?: string;
        bookingDate?: string;
        creditorName?: string;
        creditorIBAN?: string;
        debtorName?: string;
        debtorIBAN?: string;
        remittanceInfo?: string;
        endToEndId?: string;
        mandateId?: string;
        creditorId?: string;
        reasonCode?: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status?: "failed" | "completed" | "processing";
    errors?: string[];
    createdAt?: string;
    fileId?: string;
    fileName?: string;
    format?: "CAMT" | "MT940";
    transactionsCount?: number;
    processedCount?: number;
    errorsCount?: number;
    transactions?: {
        status?: "pending" | "processed" | "rejected" | "returned";
        orgId?: string;
        id?: string;
        createdAt?: string;
        currency?: string;
        amount?: number;
        messageId?: string;
        accountId?: string;
        valueDate?: string;
        bookingDate?: string;
        creditorName?: string;
        creditorIBAN?: string;
        debtorName?: string;
        debtorIBAN?: string;
        remittanceInfo?: string;
        endToEndId?: string;
        mandateId?: string;
        creditorId?: string;
        reasonCode?: string;
    }[];
}, {
    status?: "failed" | "completed" | "processing";
    errors?: string[];
    createdAt?: string;
    fileId?: string;
    fileName?: string;
    format?: "CAMT" | "MT940";
    transactionsCount?: number;
    processedCount?: number;
    errorsCount?: number;
    transactions?: {
        status?: "pending" | "processed" | "rejected" | "returned";
        orgId?: string;
        id?: string;
        createdAt?: string;
        currency?: string;
        amount?: number;
        messageId?: string;
        accountId?: string;
        valueDate?: string;
        bookingDate?: string;
        creditorName?: string;
        creditorIBAN?: string;
        debtorName?: string;
        debtorIBAN?: string;
        remittanceInfo?: string;
        endToEndId?: string;
        mandateId?: string;
        creditorId?: string;
        reasonCode?: string;
    }[];
}>;
export declare const BudgetSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    period: z.ZodDefault<z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>>;
    startDate: z.ZodString;
    endDate: z.ZodOptional<z.ZodString>;
    categories: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    alertThreshold: z.ZodDefault<z.ZodNumber>;
    criticalThreshold: z.ZodDefault<z.ZodNumber>;
    isActive: z.ZodDefault<z.ZodBoolean>;
    notifications: z.ZodDefault<z.ZodObject<{
        email: z.ZodDefault<z.ZodBoolean>;
        sms: z.ZodDefault<z.ZodBoolean>;
        teams: z.ZodDefault<z.ZodBoolean>;
        slack: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    }, {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    }>>;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    createdAt?: string;
    isActive?: boolean;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    organizationId?: string;
    amount?: number;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    startDate?: string;
    endDate?: string;
    categories?: string[];
    alertThreshold?: number;
    criticalThreshold?: number;
    notifications?: {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    };
}, {
    id?: string;
    createdAt?: string;
    isActive?: boolean;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    organizationId?: string;
    amount?: number;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    startDate?: string;
    endDate?: string;
    categories?: string[];
    alertThreshold?: number;
    criticalThreshold?: number;
    notifications?: {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    };
}>;
export declare const CreateBudgetSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    period: z.ZodDefault<z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>>;
    startDate: z.ZodString;
    endDate: z.ZodOptional<z.ZodString>;
    categories: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    alertThreshold: z.ZodDefault<z.ZodNumber>;
    criticalThreshold: z.ZodDefault<z.ZodNumber>;
    isActive: z.ZodDefault<z.ZodBoolean>;
    notifications: z.ZodDefault<z.ZodObject<{
        email: z.ZodDefault<z.ZodBoolean>;
        sms: z.ZodDefault<z.ZodBoolean>;
        teams: z.ZodDefault<z.ZodBoolean>;
        slack: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    }, {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    }>>;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    isActive?: boolean;
    name?: string;
    description?: string;
    currency?: string;
    organizationId?: string;
    amount?: number;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    startDate?: string;
    endDate?: string;
    categories?: string[];
    alertThreshold?: number;
    criticalThreshold?: number;
    notifications?: {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    };
}, {
    isActive?: boolean;
    name?: string;
    description?: string;
    currency?: string;
    organizationId?: string;
    amount?: number;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    startDate?: string;
    endDate?: string;
    categories?: string[];
    alertThreshold?: number;
    criticalThreshold?: number;
    notifications?: {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    };
}>;
export declare const UpdateBudgetSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    organizationId: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    amount: z.ZodOptional<z.ZodNumber>;
    currency: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    period: z.ZodOptional<z.ZodDefault<z.ZodEnum<["daily", "weekly", "monthly", "quarterly", "yearly"]>>>;
    startDate: z.ZodOptional<z.ZodString>;
    endDate: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    categories: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    alertThreshold: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    criticalThreshold: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    isActive: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    notifications: z.ZodOptional<z.ZodDefault<z.ZodObject<{
        email: z.ZodDefault<z.ZodBoolean>;
        sms: z.ZodDefault<z.ZodBoolean>;
        teams: z.ZodDefault<z.ZodBoolean>;
        slack: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    }, {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    }>>>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "id" | "organizationId">, "strip", z.ZodTypeAny, {
    createdAt?: string;
    isActive?: boolean;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    amount?: number;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    startDate?: string;
    endDate?: string;
    categories?: string[];
    alertThreshold?: number;
    criticalThreshold?: number;
    notifications?: {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    };
}, {
    createdAt?: string;
    isActive?: boolean;
    updatedAt?: string;
    name?: string;
    description?: string;
    currency?: string;
    amount?: number;
    period?: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
    startDate?: string;
    endDate?: string;
    categories?: string[];
    alertThreshold?: number;
    criticalThreshold?: number;
    notifications?: {
        email?: boolean;
        sms?: boolean;
        teams?: boolean;
        slack?: boolean;
    };
}>;
export type Company = z.infer<typeof CompanySchema>;
export type CreateCompany = z.infer<typeof CreateCompanySchema>;
export type UpdateCompany = z.infer<typeof UpdateCompanySchema>;
export type Contact = z.infer<typeof ContactSchema>;
export type CreateContact = z.infer<typeof CreateContactSchema>;
export type UpdateContact = z.infer<typeof UpdateContactSchema>;
export type Deal = z.infer<typeof DealSchema>;
export type CreateDeal = z.infer<typeof CreateDealSchema>;
export type UpdateDeal = z.infer<typeof UpdateDealSchema>;
export type Invoice = z.infer<typeof InvoiceSchema>;
export type CreateInvoice = z.infer<typeof CreateInvoiceSchema>;
export type UpdateInvoice = z.infer<typeof UpdateInvoiceSchema>;
export type Payment = z.infer<typeof PaymentSchema>;
export type CreatePayment = z.infer<typeof CreatePaymentSchema>;
export type SEPATransaction = z.infer<typeof SEPATransactionSchema>;
export type SEPAUploadResult = z.infer<typeof SEPAUploadResultSchema>;
export type Budget = z.infer<typeof BudgetSchema>;
export type CreateBudget = z.infer<typeof CreateBudgetSchema>;
export type UpdateBudget = z.infer<typeof UpdateBudgetSchema>;
//# sourceMappingURL=finance.d.ts.map