import { z } from 'zod';
export declare const ProductSchema: z.ZodObject<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    sku: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    category: z.ZodOptional<z.ZodString>;
    unit: z.ZodDefault<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "discontinued"]>>;
    barcode: z.ZodOptional<z.ZodString>;
    weight: z.ZodOptional<z.ZodNumber>;
    dimensions: z.ZodOptional<z.ZodObject<{
        length: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        unit: z.ZodDefault<z.ZodEnum<["cm", "m", "in", "ft"]>>;
    }, "strip", z.ZodTypeAny, {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    }, {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    }>>;
    costPrice: z.ZodDefault<z.ZodNumber>;
    sellingPrice: z.ZodDefault<z.ZodNumber>;
    currency: z.ZodDefault<z.ZodString>;
    taxRate: z.ZodDefault<z.ZodNumber>;
    minStockLevel: z.ZodDefault<z.ZodNumber>;
    maxStockLevel: z.ZodOptional<z.ZodNumber>;
    reorderPoint: z.ZodDefault<z.ZodNumber>;
    reorderQuantity: z.ZodDefault<z.ZodNumber>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "discontinued";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    category?: string;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    deletedAt?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    sku?: string;
    unit?: string;
    barcode?: string;
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    };
    costPrice?: number;
    sellingPrice?: number;
    taxRate?: number;
    minStockLevel?: number;
    maxStockLevel?: number;
    reorderPoint?: number;
    reorderQuantity?: number;
}, {
    status?: "active" | "inactive" | "discontinued";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    category?: string;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    deletedAt?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    sku?: string;
    unit?: string;
    barcode?: string;
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    };
    costPrice?: number;
    sellingPrice?: number;
    taxRate?: number;
    minStockLevel?: number;
    maxStockLevel?: number;
    reorderPoint?: number;
    reorderQuantity?: number;
}>;
export declare const CreateProductSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    sku: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    category: z.ZodOptional<z.ZodString>;
    unit: z.ZodDefault<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "discontinued"]>>;
    barcode: z.ZodOptional<z.ZodString>;
    weight: z.ZodOptional<z.ZodNumber>;
    dimensions: z.ZodOptional<z.ZodObject<{
        length: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        unit: z.ZodDefault<z.ZodEnum<["cm", "m", "in", "ft"]>>;
    }, "strip", z.ZodTypeAny, {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    }, {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    }>>;
    costPrice: z.ZodDefault<z.ZodNumber>;
    sellingPrice: z.ZodDefault<z.ZodNumber>;
    currency: z.ZodDefault<z.ZodString>;
    taxRate: z.ZodDefault<z.ZodNumber>;
    minStockLevel: z.ZodDefault<z.ZodNumber>;
    maxStockLevel: z.ZodOptional<z.ZodNumber>;
    reorderPoint: z.ZodDefault<z.ZodNumber>;
    reorderQuantity: z.ZodDefault<z.ZodNumber>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "id" | "createdAt" | "updatedAt" | "deletedAt">, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "discontinued";
    orgId?: string;
    metadata?: Record<string, unknown>;
    category?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    sku?: string;
    unit?: string;
    barcode?: string;
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    };
    costPrice?: number;
    sellingPrice?: number;
    taxRate?: number;
    minStockLevel?: number;
    maxStockLevel?: number;
    reorderPoint?: number;
    reorderQuantity?: number;
}, {
    status?: "active" | "inactive" | "discontinued";
    orgId?: string;
    metadata?: Record<string, unknown>;
    category?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    sku?: string;
    unit?: string;
    barcode?: string;
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    };
    costPrice?: number;
    sellingPrice?: number;
    taxRate?: number;
    minStockLevel?: number;
    maxStockLevel?: number;
    reorderPoint?: number;
    reorderQuantity?: number;
}>;
export declare const UpdateProductSchema: z.ZodObject<{
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["active", "inactive", "discontinued"]>>>;
    orgId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    category: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    currency: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    sku: z.ZodOptional<z.ZodString>;
    unit: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    barcode: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    weight: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    dimensions: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        length: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        unit: z.ZodDefault<z.ZodEnum<["cm", "m", "in", "ft"]>>;
    }, "strip", z.ZodTypeAny, {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    }, {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    }>>>;
    costPrice: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    sellingPrice: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    taxRate: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    minStockLevel: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    maxStockLevel: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    reorderPoint: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    reorderQuantity: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "discontinued";
    orgId?: string;
    metadata?: Record<string, unknown>;
    category?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    sku?: string;
    unit?: string;
    barcode?: string;
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    };
    costPrice?: number;
    sellingPrice?: number;
    taxRate?: number;
    minStockLevel?: number;
    maxStockLevel?: number;
    reorderPoint?: number;
    reorderQuantity?: number;
}, {
    status?: "active" | "inactive" | "discontinued";
    orgId?: string;
    metadata?: Record<string, unknown>;
    category?: string;
    name?: string;
    description?: string;
    currency?: string;
    tags?: string[];
    sku?: string;
    unit?: string;
    barcode?: string;
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
        unit?: "cm" | "m" | "in" | "ft";
    };
    costPrice?: number;
    sellingPrice?: number;
    taxRate?: number;
    minStockLevel?: number;
    maxStockLevel?: number;
    reorderPoint?: number;
    reorderQuantity?: number;
}>;
export declare const ProductFilterSchema: z.ZodObject<{
    q: z.ZodOptional<z.ZodString>;
    sku: z.ZodOptional<z.ZodString>;
    category: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "discontinued"]>>;
    minPrice: z.ZodOptional<z.ZodNumber>;
    maxPrice: z.ZodOptional<z.ZodNumber>;
    lowStock: z.ZodOptional<z.ZodBoolean>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "discontinued";
    category?: string;
    tags?: string[];
    q?: string;
    sku?: string;
    minPrice?: number;
    maxPrice?: number;
    lowStock?: boolean;
}, {
    status?: "active" | "inactive" | "discontinued";
    category?: string;
    tags?: string[];
    q?: string;
    sku?: string;
    minPrice?: number;
    maxPrice?: number;
    lowStock?: boolean;
}>;
export declare const SupplierSchema: z.ZodObject<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    code: z.ZodString;
    name: z.ZodString;
    taxId: z.ZodOptional<z.ZodString>;
    contactPerson: z.ZodOptional<z.ZodString>;
    email: z.ZodString;
    phone: z.ZodOptional<z.ZodString>;
    website: z.ZodOptional<z.ZodString>;
    address: z.ZodOptional<z.ZodString>;
    city: z.ZodOptional<z.ZodString>;
    postalCode: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "blocked"]>>;
    paymentTerms: z.ZodOptional<z.ZodString>;
    deliveryLeadTime: z.ZodDefault<z.ZodNumber>;
    rating: z.ZodOptional<z.ZodNumber>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    deletedAt?: string;
    website?: string;
    taxId?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    tags?: string[];
    contactPerson?: string;
    paymentTerms?: string;
    deliveryLeadTime?: number;
    rating?: number;
}, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    deletedAt?: string;
    website?: string;
    taxId?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    tags?: string[];
    contactPerson?: string;
    paymentTerms?: string;
    deliveryLeadTime?: number;
    rating?: number;
}>;
export declare const CreateSupplierSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    code: z.ZodString;
    name: z.ZodString;
    taxId: z.ZodOptional<z.ZodString>;
    contactPerson: z.ZodOptional<z.ZodString>;
    email: z.ZodString;
    phone: z.ZodOptional<z.ZodString>;
    website: z.ZodOptional<z.ZodString>;
    address: z.ZodOptional<z.ZodString>;
    city: z.ZodOptional<z.ZodString>;
    postalCode: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "blocked"]>>;
    paymentTerms: z.ZodOptional<z.ZodString>;
    deliveryLeadTime: z.ZodDefault<z.ZodNumber>;
    rating: z.ZodOptional<z.ZodNumber>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "id" | "createdAt" | "updatedAt" | "deletedAt">, "strip", z.ZodTypeAny, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    taxId?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    tags?: string[];
    contactPerson?: string;
    paymentTerms?: string;
    deliveryLeadTime?: number;
    rating?: number;
}, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    taxId?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    tags?: string[];
    contactPerson?: string;
    paymentTerms?: string;
    deliveryLeadTime?: number;
    rating?: number;
}>;
export declare const UpdateSupplierSchema: z.ZodObject<{
    code: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["active", "inactive", "blocked"]>>>;
    orgId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    website: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    taxId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    city: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    postalCode: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    country: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    address: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    tags: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    contactPerson: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    paymentTerms: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    deliveryLeadTime: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    rating: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    taxId?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    tags?: string[];
    contactPerson?: string;
    paymentTerms?: string;
    deliveryLeadTime?: number;
    rating?: number;
}, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    website?: string;
    taxId?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    tags?: string[];
    contactPerson?: string;
    paymentTerms?: string;
    deliveryLeadTime?: number;
    rating?: number;
}>;
export declare const SupplierFilterSchema: z.ZodObject<{
    q: z.ZodOptional<z.ZodString>;
    code: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "blocked"]>>;
    country: z.ZodOptional<z.ZodString>;
    minRating: z.ZodOptional<z.ZodNumber>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    country?: string;
    tags?: string[];
    q?: string;
    minRating?: number;
}, {
    code?: string;
    status?: "active" | "inactive" | "blocked";
    country?: string;
    tags?: string[];
    q?: string;
    minRating?: number;
}>;
export declare const WarehouseSchema: z.ZodObject<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    code: z.ZodString;
    name: z.ZodString;
    type: z.ZodDefault<z.ZodEnum<["main", "secondary", "transit", "virtual"]>>;
    address: z.ZodString;
    city: z.ZodString;
    postalCode: z.ZodString;
    country: z.ZodString;
    manager: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    capacity: z.ZodOptional<z.ZodNumber>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "maintenance"]>>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    code?: string;
    type?: "main" | "secondary" | "transit" | "virtual";
    status?: "active" | "inactive" | "maintenance";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    deletedAt?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    manager?: string;
    capacity?: number;
}, {
    code?: string;
    type?: "main" | "secondary" | "transit" | "virtual";
    status?: "active" | "inactive" | "maintenance";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    name?: string;
    email?: string;
    phone?: string;
    deletedAt?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    manager?: string;
    capacity?: number;
}>;
export declare const CreateWarehouseSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    code: z.ZodString;
    name: z.ZodString;
    type: z.ZodDefault<z.ZodEnum<["main", "secondary", "transit", "virtual"]>>;
    address: z.ZodString;
    city: z.ZodString;
    postalCode: z.ZodString;
    country: z.ZodString;
    manager: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    capacity: z.ZodOptional<z.ZodNumber>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "maintenance"]>>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "id" | "createdAt" | "updatedAt" | "deletedAt">, "strip", z.ZodTypeAny, {
    code?: string;
    type?: "main" | "secondary" | "transit" | "virtual";
    status?: "active" | "inactive" | "maintenance";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    manager?: string;
    capacity?: number;
}, {
    code?: string;
    type?: "main" | "secondary" | "transit" | "virtual";
    status?: "active" | "inactive" | "maintenance";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    manager?: string;
    capacity?: number;
}>;
export declare const UpdateWarehouseSchema: z.ZodObject<{
    code: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodDefault<z.ZodEnum<["main", "secondary", "transit", "virtual"]>>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["active", "inactive", "maintenance"]>>>;
    orgId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    phone: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    city: z.ZodOptional<z.ZodString>;
    postalCode: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
    address: z.ZodOptional<z.ZodString>;
    manager: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    capacity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    code?: string;
    type?: "main" | "secondary" | "transit" | "virtual";
    status?: "active" | "inactive" | "maintenance";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    manager?: string;
    capacity?: number;
}, {
    code?: string;
    type?: "main" | "secondary" | "transit" | "virtual";
    status?: "active" | "inactive" | "maintenance";
    orgId?: string;
    metadata?: Record<string, unknown>;
    name?: string;
    email?: string;
    phone?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    address?: string;
    manager?: string;
    capacity?: number;
}>;
export declare const InventorySchema: z.ZodObject<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    productId: z.ZodString;
    warehouseId: z.ZodString;
    quantity: z.ZodDefault<z.ZodNumber>;
    reservedQuantity: z.ZodDefault<z.ZodNumber>;
    availableQuantity: z.ZodDefault<z.ZodNumber>;
    location: z.ZodOptional<z.ZodString>;
    batchNumber: z.ZodOptional<z.ZodString>;
    serialNumber: z.ZodOptional<z.ZodString>;
    expiryDate: z.ZodOptional<z.ZodString>;
    lastCountDate: z.ZodOptional<z.ZodString>;
    lastCountQuantity: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    location?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    reservedQuantity?: number;
    availableQuantity?: number;
    batchNumber?: string;
    serialNumber?: string;
    expiryDate?: string;
    lastCountDate?: string;
    lastCountQuantity?: number;
}, {
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    location?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    reservedQuantity?: number;
    availableQuantity?: number;
    batchNumber?: string;
    serialNumber?: string;
    expiryDate?: string;
    lastCountDate?: string;
    lastCountQuantity?: number;
}>;
export declare const CreateInventorySchema: z.ZodObject<Omit<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    productId: z.ZodString;
    warehouseId: z.ZodString;
    quantity: z.ZodDefault<z.ZodNumber>;
    reservedQuantity: z.ZodDefault<z.ZodNumber>;
    availableQuantity: z.ZodDefault<z.ZodNumber>;
    location: z.ZodOptional<z.ZodString>;
    batchNumber: z.ZodOptional<z.ZodString>;
    serialNumber: z.ZodOptional<z.ZodString>;
    expiryDate: z.ZodOptional<z.ZodString>;
    lastCountDate: z.ZodOptional<z.ZodString>;
    lastCountQuantity: z.ZodOptional<z.ZodNumber>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "id" | "createdAt" | "updatedAt" | "deletedAt" | "availableQuantity">, "strip", z.ZodTypeAny, {
    orgId?: string;
    metadata?: Record<string, unknown>;
    location?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    reservedQuantity?: number;
    batchNumber?: string;
    serialNumber?: string;
    expiryDate?: string;
    lastCountDate?: string;
    lastCountQuantity?: number;
}, {
    orgId?: string;
    metadata?: Record<string, unknown>;
    location?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    reservedQuantity?: number;
    batchNumber?: string;
    serialNumber?: string;
    expiryDate?: string;
    lastCountDate?: string;
    lastCountQuantity?: number;
}>;
export declare const UpdateInventorySchema: z.ZodObject<{
    orgId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
    location: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    productId: z.ZodOptional<z.ZodString>;
    warehouseId: z.ZodOptional<z.ZodString>;
    quantity: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    reservedQuantity: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    batchNumber: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    serialNumber: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    expiryDate: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    lastCountDate: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    lastCountQuantity: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    orgId?: string;
    metadata?: Record<string, unknown>;
    location?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    reservedQuantity?: number;
    batchNumber?: string;
    serialNumber?: string;
    expiryDate?: string;
    lastCountDate?: string;
    lastCountQuantity?: number;
}, {
    orgId?: string;
    metadata?: Record<string, unknown>;
    location?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    reservedQuantity?: number;
    batchNumber?: string;
    serialNumber?: string;
    expiryDate?: string;
    lastCountDate?: string;
    lastCountQuantity?: number;
}>;
export declare const InventoryAdjustmentSchema: z.ZodObject<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    productId: z.ZodString;
    warehouseId: z.ZodString;
    type: z.ZodEnum<["purchase", "sale", "return", "damage", "loss", "count", "transfer_in", "transfer_out", "production", "adjustment"]>;
    quantity: z.ZodNumber;
    previousQuantity: z.ZodNumber;
    newQuantity: z.ZodNumber;
    cost: z.ZodOptional<z.ZodNumber>;
    reason: z.ZodOptional<z.ZodString>;
    referenceType: z.ZodOptional<z.ZodEnum<["purchase_order", "sales_order", "transfer", "manual", "production"]>>;
    referenceId: z.ZodOptional<z.ZodString>;
    performedByUserId: z.ZodString;
    approvedByUserId: z.ZodOptional<z.ZodString>;
    batchNumber: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    type?: "production" | "count" | "purchase" | "sale" | "return" | "damage" | "loss" | "transfer_in" | "transfer_out" | "adjustment";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    reason?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    batchNumber?: string;
    previousQuantity?: number;
    newQuantity?: number;
    cost?: number;
    referenceType?: "production" | "purchase_order" | "sales_order" | "transfer" | "manual";
    referenceId?: string;
    performedByUserId?: string;
    approvedByUserId?: string;
}, {
    type?: "production" | "count" | "purchase" | "sale" | "return" | "damage" | "loss" | "transfer_in" | "transfer_out" | "adjustment";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    reason?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    batchNumber?: string;
    previousQuantity?: number;
    newQuantity?: number;
    cost?: number;
    referenceType?: "production" | "purchase_order" | "sales_order" | "transfer" | "manual";
    referenceId?: string;
    performedByUserId?: string;
    approvedByUserId?: string;
}>;
export declare const CreateInventoryAdjustmentSchema: z.ZodObject<{
    productId: z.ZodString;
    warehouseId: z.ZodString;
    type: z.ZodEnum<["purchase", "sale", "return", "damage", "loss", "count", "transfer_in", "transfer_out", "production", "adjustment"]>;
    quantity: z.ZodNumber;
    reason: z.ZodOptional<z.ZodString>;
    referenceType: z.ZodOptional<z.ZodOptional<z.ZodEnum<["purchase_order", "sales_order", "transfer", "manual", "production"]>>>;
    referenceId: z.ZodOptional<z.ZodString>;
    batchNumber: z.ZodOptional<z.ZodString>;
    idempotencyKey: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type?: "production" | "count" | "purchase" | "sale" | "return" | "damage" | "loss" | "transfer_in" | "transfer_out" | "adjustment";
    idempotencyKey?: string;
    reason?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    batchNumber?: string;
    referenceType?: "production" | "purchase_order" | "sales_order" | "transfer" | "manual";
    referenceId?: string;
}, {
    type?: "production" | "count" | "purchase" | "sale" | "return" | "damage" | "loss" | "transfer_in" | "transfer_out" | "adjustment";
    idempotencyKey?: string;
    reason?: string;
    productId?: string;
    warehouseId?: string;
    quantity?: number;
    batchNumber?: string;
    referenceType?: "production" | "purchase_order" | "sales_order" | "transfer" | "manual";
    referenceId?: string;
}>;
export declare const PurchaseOrderSchema: z.ZodObject<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    orderNumber: z.ZodString;
    supplierId: z.ZodString;
    warehouseId: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["draft", "sent", "confirmed", "partial", "received", "cancelled"]>>;
    orderDate: z.ZodString;
    expectedDeliveryDate: z.ZodOptional<z.ZodString>;
    actualDeliveryDate: z.ZodOptional<z.ZodString>;
    subtotal: z.ZodDefault<z.ZodNumber>;
    taxAmount: z.ZodDefault<z.ZodNumber>;
    shippingCost: z.ZodDefault<z.ZodNumber>;
    totalAmount: z.ZodDefault<z.ZodNumber>;
    currency: z.ZodDefault<z.ZodString>;
    paymentTerms: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    approvedByUserId: z.ZodOptional<z.ZodString>;
    approvedAt: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    status?: "received" | "cancelled" | "draft" | "sent" | "confirmed" | "partial";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    currency?: string;
    notes?: string;
    paymentTerms?: string;
    warehouseId?: string;
    approvedByUserId?: string;
    orderNumber?: string;
    supplierId?: string;
    orderDate?: string;
    expectedDeliveryDate?: string;
    actualDeliveryDate?: string;
    subtotal?: number;
    taxAmount?: number;
    shippingCost?: number;
    totalAmount?: number;
    approvedAt?: string;
}, {
    status?: "received" | "cancelled" | "draft" | "sent" | "confirmed" | "partial";
    orgId?: string;
    id?: string;
    metadata?: Record<string, unknown>;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    currency?: string;
    notes?: string;
    paymentTerms?: string;
    warehouseId?: string;
    approvedByUserId?: string;
    orderNumber?: string;
    supplierId?: string;
    orderDate?: string;
    expectedDeliveryDate?: string;
    actualDeliveryDate?: string;
    subtotal?: number;
    taxAmount?: number;
    shippingCost?: number;
    totalAmount?: number;
    approvedAt?: string;
}>;
export declare const PurchaseOrderItemSchema: z.ZodObject<{
    id: z.ZodString;
    purchaseOrderId: z.ZodString;
    productId: z.ZodString;
    quantity: z.ZodNumber;
    unitPrice: z.ZodNumber;
    discount: z.ZodDefault<z.ZodNumber>;
    taxRate: z.ZodDefault<z.ZodNumber>;
    subtotal: z.ZodNumber;
    taxAmount: z.ZodNumber;
    total: z.ZodNumber;
    receivedQuantity: z.ZodDefault<z.ZodNumber>;
    notes: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    total?: number;
    id?: string;
    notes?: string;
    taxRate?: number;
    productId?: string;
    quantity?: number;
    subtotal?: number;
    taxAmount?: number;
    purchaseOrderId?: string;
    unitPrice?: number;
    discount?: number;
    receivedQuantity?: number;
}, {
    total?: number;
    id?: string;
    notes?: string;
    taxRate?: number;
    productId?: string;
    quantity?: number;
    subtotal?: number;
    taxAmount?: number;
    purchaseOrderId?: string;
    unitPrice?: number;
    discount?: number;
    receivedQuantity?: number;
}>;
export declare const CreatePurchaseOrderSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    orgId: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    deletedAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    orderNumber: z.ZodString;
    supplierId: z.ZodString;
    warehouseId: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["draft", "sent", "confirmed", "partial", "received", "cancelled"]>>;
    orderDate: z.ZodString;
    expectedDeliveryDate: z.ZodOptional<z.ZodString>;
    actualDeliveryDate: z.ZodOptional<z.ZodString>;
    subtotal: z.ZodDefault<z.ZodNumber>;
    taxAmount: z.ZodDefault<z.ZodNumber>;
    shippingCost: z.ZodDefault<z.ZodNumber>;
    totalAmount: z.ZodDefault<z.ZodNumber>;
    currency: z.ZodDefault<z.ZodString>;
    paymentTerms: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    approvedByUserId: z.ZodOptional<z.ZodString>;
    approvedAt: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "id" | "createdAt" | "updatedAt" | "deletedAt" | "orderNumber"> & {
    items: z.ZodArray<z.ZodObject<Omit<{
        id: z.ZodString;
        purchaseOrderId: z.ZodString;
        productId: z.ZodString;
        quantity: z.ZodNumber;
        unitPrice: z.ZodNumber;
        discount: z.ZodDefault<z.ZodNumber>;
        taxRate: z.ZodDefault<z.ZodNumber>;
        subtotal: z.ZodNumber;
        taxAmount: z.ZodNumber;
        total: z.ZodNumber;
        receivedQuantity: z.ZodDefault<z.ZodNumber>;
        notes: z.ZodOptional<z.ZodString>;
    }, "id" | "purchaseOrderId">, "strip", z.ZodTypeAny, {
        total?: number;
        notes?: string;
        taxRate?: number;
        productId?: string;
        quantity?: number;
        subtotal?: number;
        taxAmount?: number;
        unitPrice?: number;
        discount?: number;
        receivedQuantity?: number;
    }, {
        total?: number;
        notes?: string;
        taxRate?: number;
        productId?: string;
        quantity?: number;
        subtotal?: number;
        taxAmount?: number;
        unitPrice?: number;
        discount?: number;
        receivedQuantity?: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status?: "received" | "cancelled" | "draft" | "sent" | "confirmed" | "partial";
    orgId?: string;
    metadata?: Record<string, unknown>;
    currency?: string;
    notes?: string;
    paymentTerms?: string;
    warehouseId?: string;
    approvedByUserId?: string;
    supplierId?: string;
    orderDate?: string;
    expectedDeliveryDate?: string;
    actualDeliveryDate?: string;
    subtotal?: number;
    taxAmount?: number;
    shippingCost?: number;
    totalAmount?: number;
    approvedAt?: string;
    items?: {
        total?: number;
        notes?: string;
        taxRate?: number;
        productId?: string;
        quantity?: number;
        subtotal?: number;
        taxAmount?: number;
        unitPrice?: number;
        discount?: number;
        receivedQuantity?: number;
    }[];
}, {
    status?: "received" | "cancelled" | "draft" | "sent" | "confirmed" | "partial";
    orgId?: string;
    metadata?: Record<string, unknown>;
    currency?: string;
    notes?: string;
    paymentTerms?: string;
    warehouseId?: string;
    approvedByUserId?: string;
    supplierId?: string;
    orderDate?: string;
    expectedDeliveryDate?: string;
    actualDeliveryDate?: string;
    subtotal?: number;
    taxAmount?: number;
    shippingCost?: number;
    totalAmount?: number;
    approvedAt?: string;
    items?: {
        total?: number;
        notes?: string;
        taxRate?: number;
        productId?: string;
        quantity?: number;
        subtotal?: number;
        taxAmount?: number;
        unitPrice?: number;
        discount?: number;
        receivedQuantity?: number;
    }[];
}>;
export type Product = z.infer<typeof ProductSchema>;
export type CreateProduct = z.infer<typeof CreateProductSchema>;
export type UpdateProduct = z.infer<typeof UpdateProductSchema>;
export type ProductFilter = z.infer<typeof ProductFilterSchema>;
export type Supplier = z.infer<typeof SupplierSchema>;
export type CreateSupplier = z.infer<typeof CreateSupplierSchema>;
export type UpdateSupplier = z.infer<typeof UpdateSupplierSchema>;
export type SupplierFilter = z.infer<typeof SupplierFilterSchema>;
export type Warehouse = z.infer<typeof WarehouseSchema>;
export type CreateWarehouse = z.infer<typeof CreateWarehouseSchema>;
export type UpdateWarehouse = z.infer<typeof UpdateWarehouseSchema>;
export type Inventory = z.infer<typeof InventorySchema>;
export type CreateInventory = z.infer<typeof CreateInventorySchema>;
export type UpdateInventory = z.infer<typeof UpdateInventorySchema>;
export type InventoryAdjustment = z.infer<typeof InventoryAdjustmentSchema>;
export type CreateInventoryAdjustment = z.infer<typeof CreateInventoryAdjustmentSchema>;
export type PurchaseOrder = z.infer<typeof PurchaseOrderSchema>;
export type PurchaseOrderItem = z.infer<typeof PurchaseOrderItemSchema>;
export type CreatePurchaseOrder = z.infer<typeof CreatePurchaseOrderSchema>;
//# sourceMappingURL=erp.d.ts.map