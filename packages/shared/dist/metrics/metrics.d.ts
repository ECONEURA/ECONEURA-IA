import { register, Counter, Histogram, Gauge } from 'prom-client';
export declare const aiRequestsTotal: Counter<"status" | "model" | "provider" | "org_id">;
export declare const aiLatency: Histogram<"model" | "provider" | "org_id">;
export declare const aiCostEUR: Gauge<"provider" | "org_id">;
export declare const aiTokensTotal: Counter<"type" | "provider" | "org_id">;
export declare const aiErrorsTotal: Counter<"provider" | "org_id" | "error_type">;
export declare const aiRoutingDecisions: Counter<"model" | "provider" | "org_id" | "routing_reason">;
export declare const aiRoutingErrors: Counter<"org_id" | "error_type">;
export declare const aiRequestDuration: Histogram<"status" | "provider">;
export declare const aiCostAlerts: Counter<"type" | "period" | "org_id">;
export declare const aiProviderHealth: Gauge<"provider_id" | "provider_name">;
export declare const aiProviderLatency: Gauge<"provider_id">;
export declare const aiActiveRequests: Gauge<"provider" | "org_id">;
export declare const aiCostBudgetUtilization: Gauge<"period" | "org_id">;
export declare const aiAlertsTotal: Counter<"type" | "period" | "org_id">;
export declare const httpRequestsTotal: Counter<"method" | "route" | "status_code" | "org">;
export declare const httpRequestDuration: Histogram<"method" | "route" | "org">;
export declare const flowExecutionsTotal: Counter<"status" | "flow_type" | "org">;
export declare const flowDuration: Histogram<"flow_type" | "org">;
export declare const idempotencyReplaysTotal: Counter<"route" | "org">;
export declare const idempotencyConflictsTotal: Counter<"route" | "org">;
export declare const webhookReceived: Counter<"source" | "event_type">;
export declare const webhookHmacFailures: Counter<"source">;
export declare const webhookProcessingDuration: Histogram<"source" | "event_type">;
export declare const rateLimitExceeded: Counter<"org" | "limit_type">;
export declare const dbConnectionsActive: Gauge<string>;
export declare const dbQueryDuration: Histogram<"operation" | "table">;
export declare const integrationRequestsTotal: Counter<"status" | "operation" | "provider">;
export declare const integrationLatency: Histogram<"operation" | "provider">;
export declare const jobsEnqueued: Counter<"org" | "job_type">;
export declare const jobsProcessed: Counter<"status" | "org" | "job_type">;
export declare const jobProcessingDuration: Histogram<"org" | "job_type">;
export declare const activeJobs: Gauge<"org" | "job_type">;
export declare const orgMonthlyCost: Gauge<"org">;
export declare const orgCostBudget: Gauge<"org">;
export declare const authFailures: Counter<"reason" | "org">;
export declare const tenantViolations: Counter<"resource" | "org">;
export declare function recordAIRequest(org: string, provider: string, flow: string, latencyMs: number, tokensIn: number, tokensOut: number, costCents: number, success: boolean, fallback?: boolean): void;
export declare function recordHTTPRequest(route: string, method: string, statusCode: number, durationMs: number, org?: string): void;
export declare function recordFlowExecution(org: string, flowType: string, status: string, durationMs?: number): void;
export declare function recordWebhook(source: string, eventType: string, processingMs: number, hmacValid?: boolean): void;
export declare const prometheus: {
    aiRequestsTotal: Counter<"status" | "model" | "provider" | "org_id">;
    aiLatency: Histogram<"model" | "provider" | "org_id">;
    aiCostEUR: Gauge<"provider" | "org_id">;
    aiTokensTotal: Counter<"type" | "provider" | "org_id">;
    aiErrorsTotal: Counter<"provider" | "org_id" | "error_type">;
    aiRoutingDecisions: Counter<"model" | "provider" | "org_id" | "routing_reason">;
    aiRoutingErrors: Counter<"org_id" | "error_type">;
    aiRequestDuration: Histogram<"status" | "provider">;
    aiCostAlerts: Counter<"type" | "period" | "org_id">;
    aiProviderHealth: Gauge<"provider_id" | "provider_name">;
    aiProviderLatency: Gauge<"provider_id">;
    aiActiveRequests: Gauge<"provider" | "org_id">;
    aiCostBudgetUtilization: Gauge<"period" | "org_id">;
    aiAlertsTotal: Counter<"type" | "period" | "org_id">;
    httpRequestsTotal: Counter<"method" | "route" | "status_code" | "org">;
    httpRequestDuration: Histogram<"method" | "route" | "org">;
    flowExecutionsTotal: Counter<"status" | "flow_type" | "org">;
    flowDuration: Histogram<"flow_type" | "org">;
    idempotencyReplaysTotal: Counter<"route" | "org">;
    idempotencyConflictsTotal: Counter<"route" | "org">;
    webhookReceived: Counter<"source" | "event_type">;
    webhookHmacFailures: Counter<"source">;
    webhookProcessingDuration: Histogram<"source" | "event_type">;
    rateLimitExceeded: Counter<"org" | "limit_type">;
    dbConnectionsActive: Gauge<string>;
    dbQueryDuration: Histogram<"operation" | "table">;
    integrationRequestsTotal: Counter<"status" | "operation" | "provider">;
    integrationLatency: Histogram<"operation" | "provider">;
    jobsEnqueued: Counter<"org" | "job_type">;
    jobsProcessed: Counter<"status" | "org" | "job_type">;
    jobProcessingDuration: Histogram<"org" | "job_type">;
    activeJobs: Gauge<"org" | "job_type">;
    orgMonthlyCost: Gauge<"org">;
    orgCostBudget: Gauge<"org">;
    authFailures: Counter<"reason" | "org">;
    tenantViolations: Counter<"resource" | "org">;
};
export { register as metricsRegister };
//# sourceMappingURL=metrics.d.ts.map