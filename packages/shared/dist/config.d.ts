import { z } from 'zod';
declare const configSchema: z.ZodObject<{
    PORT: z.ZodDefault<z.ZodString>;
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "test", "production"]>>;
    JWT_SECRET: z.ZodString;
    ENCRYPTION_KEY: z.ZodString;
    ALLOWED_ORIGINS: z.ZodString;
    DATABASE_URL: z.ZodString;
    REDIS_URL: z.ZodString;
    AZURE_OPENAI_API_KEY: z.ZodString;
    AZURE_OPENAI_API_ENDPOINT: z.ZodString;
    AZURE_OPENAI_API_VERSION: z.ZodString;
    AZURE_OPENAI_DEFAULT_MODEL: z.ZodDefault<z.ZodString>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["debug", "info", "warn", "error"]>>;
    OTEL_EXPORTER_OTLP_ENDPOINT: z.ZodOptional<z.ZodString>;
    RATE_LIMIT_WINDOW_MS: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    RATE_LIMIT_MAX_REQUESTS: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    AI_BUDGET_LIMIT_EUR: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    AI_BUDGET_ALERT_THRESHOLD: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
}, "strip", z.ZodTypeAny, {
    PORT?: string;
    NODE_ENV?: "development" | "test" | "production";
    JWT_SECRET?: string;
    ENCRYPTION_KEY?: string;
    ALLOWED_ORIGINS?: string;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    AZURE_OPENAI_API_KEY?: string;
    AZURE_OPENAI_API_ENDPOINT?: string;
    AZURE_OPENAI_API_VERSION?: string;
    AZURE_OPENAI_DEFAULT_MODEL?: string;
    LOG_LEVEL?: "debug" | "info" | "warn" | "error";
    OTEL_EXPORTER_OTLP_ENDPOINT?: string;
    RATE_LIMIT_WINDOW_MS?: number;
    RATE_LIMIT_MAX_REQUESTS?: number;
    AI_BUDGET_LIMIT_EUR?: number;
    AI_BUDGET_ALERT_THRESHOLD?: number;
}, {
    PORT?: string;
    NODE_ENV?: "development" | "test" | "production";
    JWT_SECRET?: string;
    ENCRYPTION_KEY?: string;
    ALLOWED_ORIGINS?: string;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    AZURE_OPENAI_API_KEY?: string;
    AZURE_OPENAI_API_ENDPOINT?: string;
    AZURE_OPENAI_API_VERSION?: string;
    AZURE_OPENAI_DEFAULT_MODEL?: string;
    LOG_LEVEL?: "debug" | "info" | "warn" | "error";
    OTEL_EXPORTER_OTLP_ENDPOINT?: string;
    RATE_LIMIT_WINDOW_MS?: string;
    RATE_LIMIT_MAX_REQUESTS?: string;
    AI_BUDGET_LIMIT_EUR?: string;
    AI_BUDGET_ALERT_THRESHOLD?: string;
}>;
export declare function loadConfig(): {
    PORT?: string;
    NODE_ENV?: "development" | "test" | "production";
    JWT_SECRET?: string;
    ENCRYPTION_KEY?: string;
    ALLOWED_ORIGINS?: string;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    AZURE_OPENAI_API_KEY?: string;
    AZURE_OPENAI_API_ENDPOINT?: string;
    AZURE_OPENAI_API_VERSION?: string;
    AZURE_OPENAI_DEFAULT_MODEL?: string;
    LOG_LEVEL?: "debug" | "info" | "warn" | "error";
    OTEL_EXPORTER_OTLP_ENDPOINT?: string;
    RATE_LIMIT_WINDOW_MS?: number;
    RATE_LIMIT_MAX_REQUESTS?: number;
    AI_BUDGET_LIMIT_EUR?: number;
    AI_BUDGET_ALERT_THRESHOLD?: number;
};
export declare const config: {
    PORT?: string;
    NODE_ENV?: "development" | "test" | "production";
    JWT_SECRET?: string;
    ENCRYPTION_KEY?: string;
    ALLOWED_ORIGINS?: string;
    DATABASE_URL?: string;
    REDIS_URL?: string;
    AZURE_OPENAI_API_KEY?: string;
    AZURE_OPENAI_API_ENDPOINT?: string;
    AZURE_OPENAI_API_VERSION?: string;
    AZURE_OPENAI_DEFAULT_MODEL?: string;
    LOG_LEVEL?: "debug" | "info" | "warn" | "error";
    OTEL_EXPORTER_OTLP_ENDPOINT?: string;
    RATE_LIMIT_WINDOW_MS?: number;
    RATE_LIMIT_MAX_REQUESTS?: number;
    AI_BUDGET_LIMIT_EUR?: number;
    AI_BUDGET_ALERT_THRESHOLD?: number;
};
export type Config = z.infer<typeof configSchema>;
export declare const ENV: {
    readonly isDev: boolean;
    readonly isProd: boolean;
    readonly isTest: boolean;
};
export declare function getRequiredConfig<T>(key: keyof Config): T;
export declare function getOptionalConfig<T>(key: keyof Config, defaultValue: T): T;
export {};
//# sourceMappingURL=config.d.ts.map