export declare const Env: {
    NODE_ENV: string;
    AAD_REQUIRED: string;
    REDIS_URL: string;
    POSTGRES_URL: string;
    MAKE_SIGNING_SECRET: string;
    USE_LOCAL_MISTRAL: string;
};
import { z } from 'zod';
declare const envSchema: z.ZodObject<{
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "production", "test"]>>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["debug", "info", "warn", "error"]>>;
    PGHOST: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    PGUSER: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    PGPASSWORD: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    PGDATABASE: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    PGPORT: z.ZodDefault<z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>>;
    MISTRAL_BASE_URL: z.ZodDefault<z.ZodString>;
    AZURE_OPENAI_ENDPOINT: z.ZodOptional<z.ZodString>;
    AZURE_OPENAI_API_VERSION: z.ZodDefault<z.ZodString>;
    AZURE_OPENAI_DEPLOYMENT: z.ZodDefault<z.ZodString>;
    AZURE_OPENAI_API_KEY: z.ZodOptional<z.ZodString>;
    AI_MONTHLY_CAP_EUR: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    USE_LOCAL_MISTRAL: z.ZodOptional<z.ZodString>;
    AZURE_TENANT_ID: z.ZodOptional<z.ZodString>;
    AZURE_CLIENT_ID: z.ZodOptional<z.ZodString>;
    AZURE_CLIENT_SECRET: z.ZodOptional<z.ZodString>;
    GRAPH_DEFAULT_TEAM_ID: z.ZodOptional<z.ZodString>;
    GRAPH_DEFAULT_CHANNEL_ID: z.ZodOptional<z.ZodString>;
    MAKE_WEBHOOK_HMAC_SECRET: z.ZodOptional<z.ZodString>;
    MAKE_ALLOWED_IPS: z.ZodOptional<z.ZodString>;
    REDIS_URL: z.ZodOptional<z.ZodString>;
    BFF_TARGET_API: z.ZodDefault<z.ZodString>;
    PORT: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    FRONTEND_URL: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    PORT?: number;
    NODE_ENV?: "development" | "test" | "production";
    REDIS_URL?: string;
    AZURE_OPENAI_API_KEY?: string;
    AZURE_OPENAI_API_VERSION?: string;
    LOG_LEVEL?: "debug" | "info" | "warn" | "error";
    USE_LOCAL_MISTRAL?: string;
    PGHOST?: string;
    PGUSER?: string;
    PGPASSWORD?: string;
    PGDATABASE?: string;
    PGPORT?: number;
    MISTRAL_BASE_URL?: string;
    AZURE_OPENAI_ENDPOINT?: string;
    AZURE_OPENAI_DEPLOYMENT?: string;
    AI_MONTHLY_CAP_EUR?: number;
    AZURE_TENANT_ID?: string;
    AZURE_CLIENT_ID?: string;
    AZURE_CLIENT_SECRET?: string;
    GRAPH_DEFAULT_TEAM_ID?: string;
    GRAPH_DEFAULT_CHANNEL_ID?: string;
    MAKE_WEBHOOK_HMAC_SECRET?: string;
    MAKE_ALLOWED_IPS?: string;
    BFF_TARGET_API?: string;
    FRONTEND_URL?: string;
}, {
    PORT?: string;
    NODE_ENV?: "development" | "test" | "production";
    REDIS_URL?: string;
    AZURE_OPENAI_API_KEY?: string;
    AZURE_OPENAI_API_VERSION?: string;
    LOG_LEVEL?: "debug" | "info" | "warn" | "error";
    USE_LOCAL_MISTRAL?: string;
    PGHOST?: string;
    PGUSER?: string;
    PGPASSWORD?: string;
    PGDATABASE?: string;
    PGPORT?: string;
    MISTRAL_BASE_URL?: string;
    AZURE_OPENAI_ENDPOINT?: string;
    AZURE_OPENAI_DEPLOYMENT?: string;
    AI_MONTHLY_CAP_EUR?: string;
    AZURE_TENANT_ID?: string;
    AZURE_CLIENT_ID?: string;
    AZURE_CLIENT_SECRET?: string;
    GRAPH_DEFAULT_TEAM_ID?: string;
    GRAPH_DEFAULT_CHANNEL_ID?: string;
    MAKE_WEBHOOK_HMAC_SECRET?: string;
    MAKE_ALLOWED_IPS?: string;
    BFF_TARGET_API?: string;
    FRONTEND_URL?: string;
}>;
type Env = z.infer<typeof envSchema>;
export declare function env(): Env;
export declare const getEnv: typeof env;
export {};
//# sourceMappingURL=env.d.ts.map