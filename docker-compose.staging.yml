version: '3.8'

services:
  # PostgreSQL Database
  postgres-staging:
    image: postgres:15-alpine
    container_name: econeura-postgres-staging
    environment:
      POSTGRES_DB: econeura_staging
      POSTGRES_USER: econeura
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_secure_password}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./apps/api/prisma/migrations:/docker-entrypoint-initdb.d/
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U econeura -d econeura_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - econeura-staging

  # Redis Cache
  redis-staging:
    image: redis:7-alpine
    container_name: econeura-redis-staging
    command: redis-server --requirepass ${REDIS_PASSWORD:-staging_redis_password}
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-staging_redis_password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - econeura-staging

  # ECONEURA API
  api-staging:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.production
    container_name: econeura-api-staging
    environment:
      NODE_ENV: staging
      PORT: 3001
      DATABASE_URL: postgresql://econeura:${POSTGRES_PASSWORD:-staging_secure_password}@postgres-staging:5432/econeura_staging
      REDIS_URL: redis://:${REDIS_PASSWORD:-staging_redis_password}@redis-staging:6379
      JWT_SECRET: ${JWT_SECRET:-staging_jwt_secret_change_me}
      API_SECRET: ${API_SECRET:-staging_api_secret}
      
      # External integrations
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_staging}
      GRAPH_ACCESS_TOKEN: ${GRAPH_ACCESS_TOKEN:-staging_graph_token}
      
      # Feature flags
      ENABLE_ADVANCED_ANALYTICS: "true"
      ENABLE_SECURITY_FEATURES: "true"
      ENABLE_FINOPS: "true"
      ENABLE_GDPR: "true"
      ENABLE_SEPA: "true"
      
      # Monitoring
      PROMETHEUS_ENABLED: "true"
      OTEL_ENABLED: "true"
      LOG_LEVEL: "info"
      
    ports:
      - "3002:3001"
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - econeura-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`staging-api.econeura.local`)"
      - "traefik.http.services.api-staging.loadbalancer.server.port=3001"

  # ECONEURA Web
  web-staging:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: econeura-web-staging
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_API_URL: http://api-staging:3001
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-staging_nextauth_secret}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3001}
    ports:
      - "3001:3000"
    depends_on:
      api-staging:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - econeura-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-staging.rule=Host(`staging.econeura.local`)"

  # Prometheus Monitoring
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: econeura-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./infra/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - econeura-staging

  # Grafana Dashboards
  grafana-staging:
    image: grafana/grafana:latest
    container_name: econeura-grafana-staging
    ports:
      - "3004:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-staging_admin}
      GF_SERVER_ROOT_URL: http://localhost:3004
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - econeura-staging

  # Load Testing with k6
  k6-staging:
    image: grafana/k6:latest
    container_name: econeura-k6-staging
    volumes:
      - ./tests/k6:/scripts
    command: run /scripts/load-test.js
    depends_on:
      - api-staging
    networks:
      - econeura-staging

volumes:
  postgres_staging_data:
  redis_staging_data:
  prometheus_staging_data:
  grafana_staging_data:

networks:
  econeura-staging:
    driver: bridge
