{
  "statistics": {
    "detectionDate": "2025-09-13T09:48:23.549Z",
    "formats": {
      "typescript": {
        "sources": {
          "apps/api/src/__tests__/unit/domain/entities/base.entity.test.ts": {
            "lines": 182,
            "tokens": 1652,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/application/use-cases/base.use-case.test.ts": {
            "lines": 334,
            "tokens": 3202,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/user/update-user.use-case.ts": {
            "lines": 149,
            "tokens": 1145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/user/delete-user.use-case.ts": {
            "lines": 85,
            "tokens": 573,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/user/create-user.use-case.ts": {
            "lines": 141,
            "tokens": 1075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/search/intelligent-search.use-case.ts": {
            "lines": 78,
            "tokens": 710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/search/index-entity.use-case.ts": {
            "lines": 50,
            "tokens": 389,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/search/get-suggestions.use-case.ts": {
            "lines": 57,
            "tokens": 446,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/product/update-product.use-case.ts": {
            "lines": 300,
            "tokens": 2354,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 153,
            "percentage": 5,
            "percentageTokens": 6.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/product/create-product.use-case.ts": {
            "lines": 231,
            "tokens": 1830,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 153,
            "percentage": 6.49,
            "percentageTokens": 8.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/predictive-analytics/update-predictive-analytics.use-case.ts": {
            "lines": 146,
            "tokens": 1296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/predictive-analytics/train-model.use-case.ts": {
            "lines": 204,
            "tokens": 1493,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/predictive-analytics/generate-prediction.use-case.ts": {
            "lines": 115,
            "tokens": 809,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/predictive-analytics/create-predictive-analytics.use-case.ts": {
            "lines": 150,
            "tokens": 1228,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/invoice/update-invoice.use-case.ts": {
            "lines": 234,
            "tokens": 2007,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 373,
            "percentage": 15.81,
            "percentageTokens": 18.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/invoice/create-invoice.use-case.ts": {
            "lines": 185,
            "tokens": 1645,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 373,
            "percentage": 20,
            "percentageTokens": 22.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/inventory-kardex/update-inventory-kardex.use-case.ts": {
            "lines": 146,
            "tokens": 1275,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/inventory-kardex/record-movement.use-case.ts": {
            "lines": 206,
            "tokens": 1498,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 233,
            "percentage": 13.11,
            "percentageTokens": 15.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/inventory-kardex/create-inventory-kardex.use-case.ts": {
            "lines": 166,
            "tokens": 1234,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/interaction/update-interaction.use-case.ts": {
            "lines": 388,
            "tokens": 2816,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/interaction/create-interaction.use-case.ts": {
            "lines": 235,
            "tokens": 1583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/deal/update-deal.use-case.ts": {
            "lines": 528,
            "tokens": 4035,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/deal/create-deal.use-case.ts": {
            "lines": 342,
            "tokens": 2451,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/database-schema/create-database-schema.use-case.ts": {
            "lines": 369,
            "tokens": 3182,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 78,
            "duplicatedTokens": 604,
            "percentage": 21.14,
            "percentageTokens": 18.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/database-schema/analyze-database-schema.use-case.ts": {
            "lines": 138,
            "tokens": 945,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/contact/update-contact.use-case.ts": {
            "lines": 420,
            "tokens": 3946,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 132,
            "duplicatedTokens": 1266,
            "percentage": 31.43,
            "percentageTokens": 32.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/contact/create-contact.use-case.ts": {
            "lines": 377,
            "tokens": 3536,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 132,
            "duplicatedTokens": 1266,
            "percentage": 35.01,
            "percentageTokens": 35.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/company/update-company.use-case.ts": {
            "lines": 367,
            "tokens": 3137,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 81,
            "duplicatedTokens": 671,
            "percentage": 22.07,
            "percentageTokens": 21.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/company/create-company.use-case.ts": {
            "lines": 310,
            "tokens": 2673,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 81,
            "duplicatedTokens": 671,
            "percentage": 26.13,
            "percentageTokens": 25.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/architecture/create-architecture.use-case.ts": {
            "lines": 216,
            "tokens": 1887,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 52,
            "duplicatedTokens": 534,
            "percentage": 24.07,
            "percentageTokens": 28.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/architecture/analyze-architecture.use-case.ts": {
            "lines": 120,
            "tokens": 797,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/social-media-management.service.test.ts": {
            "lines": 679,
            "tokens": 5748,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/next-ai-platform.service.test.ts": {
            "lines": 514,
            "tokens": 4707,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts": {
            "lines": 802,
            "tokens": 6298,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 300,
            "duplicatedTokens": 2260,
            "percentage": 37.41,
            "percentageTokens": 35.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/document-management.service.test.ts": {
            "lines": 724,
            "tokens": 5536,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 510,
            "duplicatedTokens": 3902,
            "percentage": 70.44,
            "percentageTokens": 70.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/customer-support.service.test.ts": {
            "lines": 807,
            "tokens": 6934,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 332,
            "percentage": 5.45,
            "percentageTokens": 4.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/content-management.service.test.ts": {
            "lines": 959,
            "tokens": 7463,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 656,
            "duplicatedTokens": 4998,
            "percentage": 68.4,
            "percentageTokens": 66.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/azure-integration.service.test.ts": {
            "lines": 348,
            "tokens": 2946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/ai-training.service.test.ts": {
            "lines": 563,
            "tokens": 5248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/ai-security-compliance.service.test.ts": {
            "lines": 490,
            "tokens": 4056,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/ai-performance-optimization.service.test.ts": {
            "lines": 523,
            "tokens": 4418,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts": {
            "lines": 679,
            "tokens": 7220,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 132,
            "duplicatedTokens": 2532,
            "percentage": 19.44,
            "percentageTokens": 35.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/ai-analytics.service.test.ts": {
            "lines": 515,
            "tokens": 4189,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/advanced-observability.service.test.ts": {
            "lines": 389,
            "tokens": 3768,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 126,
            "percentage": 3.34,
            "percentageTokens": 3.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/services/advanced-cicd.service.test.ts": {
            "lines": 503,
            "tokens": 4930,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/workflows.service.test.ts": {
            "lines": 447,
            "tokens": 4616,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/supplier-scorecard.service.test.ts": {
            "lines": 499,
            "tokens": 4039,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/sepa.service.test.ts": {
            "lines": 584,
            "tokens": 5483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/sepa-robust.service.test.ts": {
            "lines": 431,
            "tokens": 3848,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/project-completion-deployment.service.test.ts": {
            "lines": 464,
            "tokens": 4318,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 271,
            "percentage": 4.53,
            "percentageTokens": 6.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/project-completion-deployment.service.simple.test.ts": {
            "lines": 147,
            "tokens": 1529,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 271,
            "percentage": 14.29,
            "percentageTokens": 17.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/inventory-kardex.service.test.ts": {
            "lines": 477,
            "tokens": 4779,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/interactions.service.test.ts": {
            "lines": 491,
            "tokens": 4539,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/intelligent-reporting.service.test.ts": {
            "lines": 488,
            "tokens": 4210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/hitl-ownership-sla.service.test.ts": {
            "lines": 514,
            "tokens": 4881,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/graph-chaos-light.service.test.ts": {
            "lines": 272,
            "tokens": 2622,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/gdpr-consolidated.service.test.ts": {
            "lines": 427,
            "tokens": 3536,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/gateway.test.ts": {
            "lines": 433,
            "tokens": 3748,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/fiscalidad-regional.service.test.ts": {
            "lines": 466,
            "tokens": 4141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/dunning-solid.service.test.ts": {
            "lines": 497,
            "tokens": 4825,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/dlg-grooming.service.test.ts": {
            "lines": 427,
            "tokens": 4537,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/deals.service.test.ts": {
            "lines": 567,
            "tokens": 5222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/deals-nba.service.test.ts": {
            "lines": 135,
            "tokens": 1296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/data-analytics-dashboard.service.test.ts": {
            "lines": 434,
            "tokens": 4400,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/csp-sri-banking.service.test.ts": {
            "lines": 530,
            "tokens": 4551,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/contacts-dedupe.service.test.ts": {
            "lines": 292,
            "tokens": 2710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/configuration.service.test.ts": {
            "lines": 328,
            "tokens": 3050,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/companies-taxonomy.service.test.ts": {
            "lines": 231,
            "tokens": 2298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/centralized-logging.service.test.ts": {
            "lines": 565,
            "tokens": 5109,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 380,
            "percentage": 7.08,
            "percentageTokens": 7.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/centralized-logging.service.simple.test.ts": {
            "lines": 173,
            "tokens": 1569,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 186,
            "percentage": 10.98,
            "percentageTokens": 11.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/basic-ai.service.test.ts": {
            "lines": 318,
            "tokens": 2590,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/backup-recovery.service.test.ts": {
            "lines": 600,
            "tokens": 5281,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 50,
            "duplicatedTokens": 352,
            "percentage": 8.33,
            "percentageTokens": 6.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/automated-testing.service.test.ts": {
            "lines": 452,
            "tokens": 4372,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/automated-testing.service.simple.test.ts": {
            "lines": 29,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/automated-documentation.service.test.ts": {
            "lines": 456,
            "tokens": 4328,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/automated-documentation.service.simple.test.ts": {
            "lines": 35,
            "tokens": 297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/audit-trail-crm-undo.service.test.ts": {
            "lines": 552,
            "tokens": 4085,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/antivirus-global.service.test.ts": {
            "lines": 268,
            "tokens": 2524,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 264,
            "percentage": 9.7,
            "percentageTokens": 10.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/ai-chat-advanced.service.test.ts": {
            "lines": 479,
            "tokens": 4689,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/ai-budget-ux.service.test.ts": {
            "lines": 440,
            "tokens": 4214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-security-framework.service.test.ts": {
            "lines": 494,
            "tokens": 4273,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 194,
            "percentage": 5.06,
            "percentageTokens": 4.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-performance-monitoring.service.test.ts": {
            "lines": 395,
            "tokens": 3740,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-performance-monitoring.service.simple.test.ts": {
            "lines": 7,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-metrics-alerts.service.test.ts": {
            "lines": 464,
            "tokens": 4479,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 194,
            "percentage": 4.53,
            "percentageTokens": 4.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-metrics-alerts.service.simple.test.ts": {
            "lines": 125,
            "tokens": 1173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-error-management.service.test.ts": {
            "lines": 581,
            "tokens": 5998,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-deployment-automation.service.test.ts": {
            "lines": 738,
            "tokens": 6243,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 74,
            "duplicatedTokens": 518,
            "percentage": 10.03,
            "percentageTokens": 8.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-configuration-management.service.test.ts": {
            "lines": 517,
            "tokens": 4757,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/lib/advanced-audit-compliance.service.test.ts": {
            "lines": 385,
            "tokens": 3875,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 52,
            "duplicatedTokens": 609,
            "percentage": 13.51,
            "percentageTokens": 15.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/unit/config/env.test.ts": {
            "lines": 55,
            "tokens": 480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/workflows.integration.test.ts": {
            "lines": 633,
            "tokens": 5808,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 72,
            "duplicatedTokens": 591,
            "percentage": 11.37,
            "percentageTokens": 10.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/sepa.integration.test.ts": {
            "lines": 623,
            "tokens": 6117,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 38,
            "duplicatedTokens": 398,
            "percentage": 6.1,
            "percentageTokens": 6.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/inventory-kardex.integration.test.ts": {
            "lines": 721,
            "tokens": 7661,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 52,
            "duplicatedTokens": 590,
            "percentage": 7.21,
            "percentageTokens": 7.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/interactions.integration.test.ts": {
            "lines": 534,
            "tokens": 4948,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 52,
            "duplicatedTokens": 538,
            "percentage": 9.74,
            "percentageTokens": 10.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/gdpr-compliance.integration.test.ts": {
            "lines": 443,
            "tokens": 4106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/deals.integration.test.ts": {
            "lines": 606,
            "tokens": 5591,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 40,
            "duplicatedTokens": 414,
            "percentage": 6.6,
            "percentageTokens": 7.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/data-analytics-dashboard.integration.test.ts": {
            "lines": 489,
            "tokens": 4496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/contacts-dedupe.integration.test.ts": {
            "lines": 405,
            "tokens": 3454,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/configuration.integration.test.ts": {
            "lines": 467,
            "tokens": 4289,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 141,
            "percentage": 3,
            "percentageTokens": 3.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/companies-taxonomy.integration.test.ts": {
            "lines": 305,
            "tokens": 3249,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 151,
            "percentage": 4.59,
            "percentageTokens": 4.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/basic-ai.integration.test.ts": {
            "lines": 386,
            "tokens": 3073,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/azure-integration.integration.test.ts": {
            "lines": 382,
            "tokens": 3618,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/auth.integration.test.ts": {
            "lines": 348,
            "tokens": 2855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts": {
            "lines": 701,
            "tokens": 6738,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 126,
            "duplicatedTokens": 1200,
            "percentage": 17.97,
            "percentageTokens": 17.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/ai-security-compliance.integration.test.ts": {
            "lines": 553,
            "tokens": 4407,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 280,
            "percentage": 5.97,
            "percentageTokens": 6.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/ai-performance-optimization.integration.test.ts": {
            "lines": 671,
            "tokens": 5410,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 280,
            "percentage": 4.92,
            "percentageTokens": 5.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/ai-chat-advanced.integration.test.ts": {
            "lines": 635,
            "tokens": 6570,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/ai-analytics.integration.test.ts": {
            "lines": 534,
            "tokens": 4506,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/advanced-security-framework.integration.test.ts": {
            "lines": 629,
            "tokens": 5739,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 194,
            "percentage": 3.97,
            "percentageTokens": 3.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/advanced-observability.integration.test.ts": {
            "lines": 553,
            "tokens": 5130,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 126,
            "percentage": 2.35,
            "percentageTokens": 2.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/api/advanced-audit-compliance.integration.test.ts": {
            "lines": 542,
            "tokens": 5603,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 66,
            "duplicatedTokens": 760,
            "percentage": 12.18,
            "percentageTokens": 13.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/helpers/setup.ts": {
            "lines": 3,
            "tokens": 60,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/shared/utils/validation.utils.ts": {
            "lines": 437,
            "tokens": 4338,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 148,
            "percentage": 1.83,
            "percentageTokens": 3.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/shared/utils/error.utils.ts": {
            "lines": 527,
            "tokens": 4060,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/sepa/types.ts": {
            "lines": 21,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/sepa/reconciler.ts": {
            "lines": 37,
            "tokens": 625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/sepa/parser.ts": {
            "lines": 61,
            "tokens": 804,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/sepa/index.ts": {
            "lines": 53,
            "tokens": 864,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai/azure-openai.service.ts": {
            "lines": 25,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/user.routes.ts": {
            "lines": 213,
            "tokens": 1646,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/search.routes.ts": {
            "lines": 184,
            "tokens": 952,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/product.routes.ts": {
            "lines": 707,
            "tokens": 7687,
            "sources": 1,
            "clones": 29,
            "duplicatedLines": 536,
            "duplicatedTokens": 5867,
            "percentage": 75.81,
            "percentageTokens": 76.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/predictive-analytics.routes.ts": {
            "lines": 327,
            "tokens": 3814,
            "sources": 1,
            "clones": 21,
            "duplicatedLines": 252,
            "duplicatedTokens": 4075,
            "percentage": 77.06,
            "percentageTokens": 106.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/invoice.routes.ts": {
            "lines": 445,
            "tokens": 5260,
            "sources": 1,
            "clones": 18,
            "duplicatedLines": 224,
            "duplicatedTokens": 3538,
            "percentage": 50.34,
            "percentageTokens": 67.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/inventory-kardex.routes.ts": {
            "lines": 390,
            "tokens": 4464,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 172,
            "duplicatedTokens": 2757,
            "percentage": 44.1,
            "percentageTokens": 61.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/interaction.routes.ts": {
            "lines": 433,
            "tokens": 2568,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/deal.routes.ts": {
            "lines": 532,
            "tokens": 3219,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/contact.routes.ts": {
            "lines": 600,
            "tokens": 6971,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 289,
            "duplicatedTokens": 5134,
            "percentage": 48.17,
            "percentageTokens": 73.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/company.routes.ts": {
            "lines": 436,
            "tokens": 5255,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 224,
            "duplicatedTokens": 3795,
            "percentage": 51.38,
            "percentageTokens": 72.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/basic-ai.routes.ts": {
            "lines": 149,
            "tokens": 770,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/architecture.routes.ts": {
            "lines": 333,
            "tokens": 3901,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 203,
            "duplicatedTokens": 3457,
            "percentage": 60.96,
            "percentageTokens": 88.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/routes/agents.routes.ts": {
            "lines": 387,
            "tokens": 1607,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/middleware/validation.middleware.ts": {
            "lines": 47,
            "tokens": 425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/middleware/response.middleware.ts": {
            "lines": 71,
            "tokens": 673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/middleware/error.middleware.ts": {
            "lines": 81,
            "tokens": 688,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/middleware/base.middleware.ts": {
            "lines": 268,
            "tokens": 1884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/user.dto.ts": {
            "lines": 209,
            "tokens": 2327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/search.dto.ts": {
            "lines": 164,
            "tokens": 1940,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 162,
            "percentage": 4.88,
            "percentageTokens": 8.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/product.dto.ts": {
            "lines": 361,
            "tokens": 4933,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 54,
            "duplicatedTokens": 829,
            "percentage": 14.96,
            "percentageTokens": 16.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/predictive-analytics.dto.ts": {
            "lines": 299,
            "tokens": 3865,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 36,
            "duplicatedTokens": 901,
            "percentage": 12.04,
            "percentageTokens": 23.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/organization.dto.ts": {
            "lines": 257,
            "tokens": 3165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/invoice.dto.ts": {
            "lines": 303,
            "tokens": 3821,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 362,
            "percentage": 6.6,
            "percentageTokens": 9.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/inventory-kardex.dto.ts": {
            "lines": 330,
            "tokens": 4030,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 23,
            "duplicatedTokens": 529,
            "percentage": 6.97,
            "percentageTokens": 13.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/interaction.dto.ts": {
            "lines": 373,
            "tokens": 3719,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 34,
            "duplicatedTokens": 440,
            "percentage": 9.12,
            "percentageTokens": 11.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/deal.dto.ts": {
            "lines": 540,
            "tokens": 6070,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 78,
            "duplicatedTokens": 1390,
            "percentage": 14.44,
            "percentageTokens": 22.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/database-schema.dto.ts": {
            "lines": 638,
            "tokens": 9058,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 76,
            "duplicatedTokens": 1510,
            "percentage": 11.91,
            "percentageTokens": 16.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/contact.dto.ts": {
            "lines": 608,
            "tokens": 8155,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 97,
            "duplicatedTokens": 1673,
            "percentage": 15.95,
            "percentageTokens": 20.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/company.dto.ts": {
            "lines": 428,
            "tokens": 5633,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 36,
            "duplicatedTokens": 630,
            "percentage": 8.41,
            "percentageTokens": 11.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/base.dto.ts": {
            "lines": 190,
            "tokens": 1605,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/dto/architecture.dto.ts": {
            "lines": 319,
            "tokens": 3950,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 62,
            "duplicatedTokens": 1301,
            "percentage": 19.44,
            "percentageTokens": 32.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/user.controller.ts": {
            "lines": 492,
            "tokens": 4132,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 86,
            "duplicatedTokens": 680,
            "percentage": 17.48,
            "percentageTokens": 16.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/search.controller.ts": {
            "lines": 207,
            "tokens": 1702,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/product.controller.ts": {
            "lines": 661,
            "tokens": 6482,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 428,
            "duplicatedTokens": 4452,
            "percentage": 64.75,
            "percentageTokens": 68.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/predictive-analytics.controller.ts": {
            "lines": 382,
            "tokens": 3791,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/invoice.controller.ts": {
            "lines": 450,
            "tokens": 4500,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/inventory-kardex.controller.ts": {
            "lines": 463,
            "tokens": 4506,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 233,
            "percentage": 5.83,
            "percentageTokens": 5.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/interaction.controller.ts": {
            "lines": 803,
            "tokens": 7642,
            "sources": 1,
            "clones": 30,
            "duplicatedLines": 826,
            "duplicatedTokens": 8308,
            "percentage": 102.86,
            "percentageTokens": 108.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/company.controller.ts": {
            "lines": 745,
            "tokens": 6677,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/basic-ai.controller.ts": {
            "lines": 398,
            "tokens": 2869,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/base.controller.ts": {
            "lines": 204,
            "tokens": 1612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/architecture.controller.ts": {
            "lines": 430,
            "tokens": 4226,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 50,
            "duplicatedTokens": 490,
            "percentage": 11.63,
            "percentageTokens": 11.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/controllers/agents.controller.ts": {
            "lines": 606,
            "tokens": 4470,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/system-cockpit/system-health.service.ts": {
            "lines": 483,
            "tokens": 3714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/handlers/user-handlers.ts": {
            "lines": 178,
            "tokens": 1736,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/basic-ai/basic-ai.service.ts": {
            "lines": 509,
            "tokens": 3892,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/aggregates/user.ts": {
            "lines": 196,
            "tokens": 1323,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/tracing.service.ts": {
            "lines": 396,
            "tokens": 3106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 29,
            "duplicatedTokens": 223,
            "percentage": 7.32,
            "percentageTokens": 7.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/metrics.service.ts": {
            "lines": 397,
            "tokens": 3280,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/logger.service.ts": {
            "lines": 298,
            "tokens": 2533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/index.ts": {
            "lines": 18,
            "tokens": 241,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/health.service.ts": {
            "lines": 486,
            "tokens": 3807,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/dashboard.service.ts": {
            "lines": 788,
            "tokens": 6115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/infrastructure/observability/alerting.service.ts": {
            "lines": 592,
            "tokens": 4863,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/value-objects/money.vo.ts": {
            "lines": 276,
            "tokens": 2672,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/value-objects/email.vo.ts": {
            "lines": 109,
            "tokens": 744,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/value-objects/address.vo.ts": {
            "lines": 343,
            "tokens": 2549,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/services/user.domain.service.ts": {
            "lines": 407,
            "tokens": 3327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/user.repository.ts": {
            "lines": 104,
            "tokens": 811,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/search.repository.ts": {
            "lines": 65,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/product.repository.ts": {
            "lines": 192,
            "tokens": 1804,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/predictive-analytics.repository.ts": {
            "lines": 272,
            "tokens": 2424,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/organization.repository.ts": {
            "lines": 102,
            "tokens": 739,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/invoice.repository.ts": {
            "lines": 230,
            "tokens": 2219,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/inventory-kardex.repository.ts": {
            "lines": 322,
            "tokens": 2934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/interaction.repository.ts": {
            "lines": 207,
            "tokens": 2049,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/deal.repository.ts": {
            "lines": 274,
            "tokens": 3075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/database-schema.repository.ts": {
            "lines": 350,
            "tokens": 3305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/contact.repository.ts": {
            "lines": 396,
            "tokens": 4218,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 98,
            "duplicatedTokens": 800,
            "percentage": 24.75,
            "percentageTokens": 18.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/company.repository.ts": {
            "lines": 254,
            "tokens": 2528,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 58,
            "duplicatedTokens": 480,
            "percentage": 22.83,
            "percentageTokens": 18.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/base.repository.ts": {
            "lines": 89,
            "tokens": 641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/repositories/architecture.repository.ts": {
            "lines": 270,
            "tokens": 2416,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/user.entity.ts": {
            "lines": 323,
            "tokens": 2471,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/search-result.entity.ts": {
            "lines": 280,
            "tokens": 2314,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 162,
            "percentage": 2.86,
            "percentageTokens": 7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/product.entity.ts": {
            "lines": 365,
            "tokens": 3372,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/predictive-analytics.entity.ts": {
            "lines": 442,
            "tokens": 3911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/organization.entity.ts": {
            "lines": 435,
            "tokens": 3304,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 366,
            "percentage": 8.74,
            "percentageTokens": 11.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/invoice.entity.ts": {
            "lines": 436,
            "tokens": 4020,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/inventory-kardex.entity.ts": {
            "lines": 607,
            "tokens": 5038,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/interaction.entity.ts": {
            "lines": 330,
            "tokens": 2781,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 53,
            "duplicatedTokens": 530,
            "percentage": 16.06,
            "percentageTokens": 19.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/deal.entity.ts": {
            "lines": 528,
            "tokens": 4850,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 53,
            "duplicatedTokens": 530,
            "percentage": 10.04,
            "percentageTokens": 10.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/database-schema.entity.ts": {
            "lines": 651,
            "tokens": 5729,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 46,
            "duplicatedTokens": 294,
            "percentage": 7.07,
            "percentageTokens": 5.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/company.entity.ts": {
            "lines": 625,
            "tokens": 5568,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 60,
            "duplicatedTokens": 718,
            "percentage": 9.6,
            "percentageTokens": 12.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/base.entity.ts": {
            "lines": 76,
            "tokens": 533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/entities/architecture.entity.ts": {
            "lines": 412,
            "tokens": 3760,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/db/partitions/partition-manager.service.ts": {
            "lines": 529,
            "tokens": 4744,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/db/optimization/database-optimizer.service.ts": {
            "lines": 818,
            "tokens": 6013,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/db/indexes/index-manager.service.ts": {
            "lines": 418,
            "tokens": 3310,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/use-cases/base.use-case.ts": {
            "lines": 116,
            "tokens": 907,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/services/user.application.service.ts": {
            "lines": 368,
            "tokens": 2874,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/setup/test-setup.ts": {
            "lines": 166,
            "tokens": 1281,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/lib/testing-framework.test.ts": {
            "lines": 437,
            "tokens": 4122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/lib/performance-optimizer.test.ts": {
            "lines": 392,
            "tokens": 3895,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/lib/distributed-cache.test.ts": {
            "lines": 393,
            "tokens": 3671,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/lib/alerting-system.test.ts": {
            "lines": 538,
            "tokens": 4068,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/security-config.integration.test.ts": {
            "lines": 540,
            "tokens": 4313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts": {
            "lines": 820,
            "tokens": 5941,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 206,
            "duplicatedTokens": 1376,
            "percentage": 25.12,
            "percentageTokens": 23.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/observability-otel.integration.test.ts": {
            "lines": 461,
            "tokens": 4526,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/gdpr-hitl.integration.test.ts": {
            "lines": 621,
            "tokens": 4469,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/finops-enforcement.integration.test.ts": {
            "lines": 367,
            "tokens": 2969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/finops-admin.integration.test.ts": {
            "lines": 364,
            "tokens": 2877,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/integration/cockpit-bff-live.integration.test.ts": {
            "lines": 464,
            "tokens": 4118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/types/shims.d.ts": {
            "lines": 16,
            "tokens": 121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/types/problem-details.types.ts": {
            "lines": 49,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/types/module-stubs.d.ts": {
            "lines": 18,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/types/global.d.ts": {
            "lines": 5,
            "tokens": 12,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/types/express.d.ts": {
            "lines": 7,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/types/ambient.d.ts": {
            "lines": 13,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/notifications.test.ts": {
            "lines": 951,
            "tokens": 8634,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/metrics.test.ts": {
            "lines": 497,
            "tokens": 3841,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/memory.integration.test.ts": {
            "lines": 325,
            "tokens": 2682,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/hil.transition.test.ts": {
            "lines": 97,
            "tokens": 1269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/hil.auth.test.ts": {
            "lines": 13,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/finops.killswitch.test.ts": {
            "lines": 42,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/finops.headers.test.ts": {
            "lines": 17,
            "tokens": 231,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/error-handler.test.ts": {
            "lines": 524,
            "tokens": 3884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/tests/correlation.test.ts": {
            "lines": 593,
            "tokens": 4615,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/shared/index.ts": {
            "lines": 36,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/web-search.service.ts": {
            "lines": 377,
            "tokens": 3691,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/stabilization.service.ts": {
            "lines": 16,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/sentiment-analysis.service.ts": {
            "lines": 762,
            "tokens": 7708,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/security-config.service.ts": {
            "lines": 517,
            "tokens": 3598,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/products.service.ts": {
            "lines": 29,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/predictive-ai.service.ts": {
            "lines": 260,
            "tokens": 2360,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/observability-otel.service.ts": {
            "lines": 823,
            "tokens": 6587,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 29,
            "duplicatedTokens": 223,
            "percentage": 3.52,
            "percentageTokens": 3.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/next-ai-platform.service.ts": {
            "lines": 963,
            "tokens": 7350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/mistral.local.ts": {
            "lines": 12,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/memory.service.ts": {
            "lines": 78,
            "tokens": 678,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/invoices.service.ts": {
            "lines": 26,
            "tokens": 231,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/health-checks.service.ts": {
            "lines": 27,
            "tokens": 199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/finops.ts": {
            "lines": 29,
            "tokens": 365,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/external-integrations.service.ts": {
            "lines": 732,
            "tokens": 7205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/document-management.service.ts": {
            "lines": 877,
            "tokens": 7303,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 497,
            "percentage": 4.22,
            "percentageTokens": 6.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/customer-support.service.ts": {
            "lines": 974,
            "tokens": 7868,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 299,
            "percentage": 2.26,
            "percentageTokens": 3.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/content-management.service.ts": {
            "lines": 995,
            "tokens": 8542,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 67,
            "duplicatedTokens": 985,
            "percentage": 6.73,
            "percentageTokens": 11.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/cockpit-integration.service.ts": {
            "lines": 713,
            "tokens": 6052,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 57,
            "duplicatedTokens": 699,
            "percentage": 7.99,
            "percentageTokens": 11.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/cockpit-bff-live.service.ts": {
            "lines": 583,
            "tokens": 4636,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/breaker.ts": {
            "lines": 26,
            "tokens": 261,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/azure-openai.service.ts": {
            "lines": 410,
            "tokens": 3408,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/azure-integration.service.ts": {
            "lines": 525,
            "tokens": 4101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/automl.service.ts": {
            "lines": 356,
            "tokens": 3133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/analytics.service.ts": {
            "lines": 31,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai.ts": {
            "lines": 145,
            "tokens": 1434,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai-training.service.ts": {
            "lines": 834,
            "tokens": 6069,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai-security-compliance.service.ts": {
            "lines": 928,
            "tokens": 7897,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 57,
            "duplicatedTokens": 634,
            "percentage": 6.14,
            "percentageTokens": 8.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai-performance-optimization.service.ts": {
            "lines": 917,
            "tokens": 7793,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 225,
            "percentage": 2.62,
            "percentageTokens": 2.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai-model-management.service.ts": {
            "lines": 997,
            "tokens": 6877,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai-dashboard-consolidation.service.ts": {
            "lines": 553,
            "tokens": 4813,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 64,
            "duplicatedTokens": 859,
            "percentage": 11.57,
            "percentageTokens": 17.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/ai-cost-prediction.service.ts": {
            "lines": 981,
            "tokens": 8916,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 63,
            "duplicatedTokens": 669,
            "percentage": 6.42,
            "percentageTokens": 7.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/advanced-observability.service.ts": {
            "lines": 634,
            "tokens": 5172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/services/advanced-cicd.service.ts": {
            "lines": 788,
            "tokens": 6289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/security/security-manager.service.ts": {
            "lines": 853,
            "tokens": 6526,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/security/rbac.service.ts": {
            "lines": 819,
            "tokens": 7534,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/security/mfa.service.ts": {
            "lines": 833,
            "tokens": 6076,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/workflows.ts": {
            "lines": 468,
            "tokens": 3562,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/workers-integration.ts": {
            "lines": 330,
            "tokens": 2673,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 96,
            "duplicatedTokens": 740,
            "percentage": 29.09,
            "percentageTokens": 27.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/warmup.ts": {
            "lines": 356,
            "tokens": 2806,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/supplier.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/supplier-scorecard.ts": {
            "lines": 471,
            "tokens": 5091,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/stripe-receipts.ts": {
            "lines": 352,
            "tokens": 3335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/status.ts": {
            "lines": 457,
            "tokens": 3756,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/stabilization.ts": {
            "lines": 14,
            "tokens": 153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/social-media-management.ts": {
            "lines": 673,
            "tokens": 5864,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/sepa.ts": {
            "lines": 457,
            "tokens": 3784,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/sepa-robust.ts": {
            "lines": 334,
            "tokens": 3434,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/semantic-search-crm.ts": {
            "lines": 388,
            "tokens": 4213,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 258,
            "percentage": 4.64,
            "percentageTokens": 6.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/security.ts": {
            "lines": 875,
            "tokens": 7349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/security-config.ts": {
            "lines": 526,
            "tokens": 3927,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/rls-tenant-policies.ts": {
            "lines": 541,
            "tokens": 4104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/rls-generativa.ts": {
            "lines": 391,
            "tokens": 4091,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/reportes-mensuales.ts": {
            "lines": 477,
            "tokens": 4551,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/rbac-granular.ts": {
            "lines": 357,
            "tokens": 2939,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/rate-limiting.ts": {
            "lines": 542,
            "tokens": 4400,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/prompt-library.ts": {
            "lines": 182,
            "tokens": 1534,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/project-completion-deployment.ts": {
            "lines": 588,
            "tokens": 5145,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 189,
            "percentage": 4.59,
            "percentageTokens": 3.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/progress.ts": {
            "lines": 28,
            "tokens": 230,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/product.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ping.ts": {
            "lines": 13,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/performance.ts": {
            "lines": 281,
            "tokens": 2537,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/performance-v2.ts": {
            "lines": 514,
            "tokens": 4537,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 340,
            "percentage": 7.39,
            "percentageTokens": 7.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/organization.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/openapi.ts": {
            "lines": 298,
            "tokens": 1463,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/observability-otel.ts": {
            "lines": 608,
            "tokens": 4638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/notifications.ts": {
            "lines": 931,
            "tokens": 7715,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 410,
            "percentage": 2.15,
            "percentageTokens": 5.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/next-ai-platform.ts": {
            "lines": 810,
            "tokens": 2585,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/metrics.ts": {
            "lines": 311,
            "tokens": 2589,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/memory.routes.ts": {
            "lines": 17,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/memory-management.ts": {
            "lines": 603,
            "tokens": 5372,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 340,
            "percentage": 6.3,
            "percentageTokens": 6.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/make-quotas.ts": {
            "lines": 275,
            "tokens": 2273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/invoices.ts": {
            "lines": 492,
            "tokens": 4198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/invoice.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/inventory-kardex.ts": {
            "lines": 493,
            "tokens": 4924,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/interactions.ts": {
            "lines": 343,
            "tokens": 2885,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/interactions-sas-av.ts": {
            "lines": 408,
            "tokens": 4612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/interaction.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/integrations.make.health.ts": {
            "lines": 11,
            "tokens": 148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/index.ts": {
            "lines": 63,
            "tokens": 557,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/hitl-v2.ts": {
            "lines": 518,
            "tokens": 4777,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 324,
            "percentage": 8.49,
            "percentageTokens": 6.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/hitl-ownership-sla.ts": {
            "lines": 631,
            "tokens": 6979,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/hil.ts": {
            "lines": 66,
            "tokens": 1191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/hil.approvals.v2.ts": {
            "lines": 49,
            "tokens": 954,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 376,
            "percentage": 36.73,
            "percentageTokens": 39.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/hil.approvals.ts": {
            "lines": 34,
            "tokens": 468,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/hil.alias.ts": {
            "lines": 18,
            "tokens": 161,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/health.ts": {
            "lines": 347,
            "tokens": 2830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/health-checks.ts": {
            "lines": 14,
            "tokens": 153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/graph-wrappers.ts": {
            "lines": 560,
            "tokens": 4746,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/graph-chaos-light.ts": {
            "lines": 214,
            "tokens": 1852,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/gdpr.ts": {
            "lines": 97,
            "tokens": 1329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/gdpr-hitl.ts": {
            "lines": 616,
            "tokens": 4802,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/gdpr-compliance.ts": {
            "lines": 974,
            "tokens": 7722,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/fiscalidad-regional.ts": {
            "lines": 447,
            "tokens": 4636,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/fiscalidad-regional-ue.ts": {
            "lines": 531,
            "tokens": 4324,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/finops-admin.ts": {
            "lines": 275,
            "tokens": 2086,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/external-integrations.ts": {
            "lines": 642,
            "tokens": 5116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/events.ts": {
            "lines": 136,
            "tokens": 1105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/email-marketing.ts": {
            "lines": 730,
            "tokens": 6490,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 52,
            "duplicatedTokens": 610,
            "percentage": 7.12,
            "percentageTokens": 9.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/dunning-solid.ts": {
            "lines": 581,
            "tokens": 5288,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 80,
            "duplicatedTokens": 600,
            "percentage": 13.77,
            "percentageTokens": 11.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/dunning-3-toques.ts": {
            "lines": 482,
            "tokens": 3923,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 80,
            "duplicatedTokens": 600,
            "percentage": 16.6,
            "percentageTokens": 15.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/document-management.ts": {
            "lines": 563,
            "tokens": 4734,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 497,
            "percentage": 6.57,
            "percentageTokens": 10.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/dlg-grooming.ts": {
            "lines": 395,
            "tokens": 4200,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 262,
            "percentage": 5.82,
            "percentageTokens": 6.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/deals.ts": {
            "lines": 662,
            "tokens": 5785,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/deals-nba.ts": {
            "lines": 417,
            "tokens": 3426,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 267,
            "percentage": 6.24,
            "percentageTokens": 7.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/deal.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/database-optimization.ts": {
            "lines": 577,
            "tokens": 4808,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/data-analytics-dashboard.ts": {
            "lines": 621,
            "tokens": 5540,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 75,
            "duplicatedTokens": 1076,
            "percentage": 12.08,
            "percentageTokens": 19.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/customer-support.ts": {
            "lines": 554,
            "tokens": 4450,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 299,
            "percentage": 3.97,
            "percentageTokens": 6.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/csp-sri-banking.ts": {
            "lines": 473,
            "tokens": 4080,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 335,
            "percentage": 6.13,
            "percentageTokens": 8.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/content-management.ts": {
            "lines": 748,
            "tokens": 7107,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 167,
            "duplicatedTokens": 2193,
            "percentage": 22.33,
            "percentageTokens": 30.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/contacts.ts": {
            "lines": 338,
            "tokens": 2802,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 199,
            "percentage": 7.99,
            "percentageTokens": 7.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/contacts-simple.ts": {
            "lines": 117,
            "tokens": 985,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 199,
            "percentage": 23.08,
            "percentageTokens": 20.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/contacts-dedupe.ts": {
            "lines": 339,
            "tokens": 3884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/contact.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/connection-pool.ts": {
            "lines": 739,
            "tokens": 6454,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 34,
            "duplicatedTokens": 358,
            "percentage": 4.6,
            "percentageTokens": 5.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/configuration.ts": {
            "lines": 575,
            "tokens": 4271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/company.ts": {
            "lines": 3,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/companies.ts": {
            "lines": 318,
            "tokens": 2556,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 51,
            "duplicatedTokens": 420,
            "percentage": 16.04,
            "percentageTokens": 16.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/companies-taxonomy.ts": {
            "lines": 368,
            "tokens": 2801,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/companies-simple.ts": {
            "lines": 160,
            "tokens": 1339,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 51,
            "duplicatedTokens": 420,
            "percentage": 31.88,
            "percentageTokens": 31.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/cockpit.ts": {
            "lines": 546,
            "tokens": 5169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/cockpit-integration.ts": {
            "lines": 352,
            "tokens": 3139,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 145,
            "percentage": 3.69,
            "percentageTokens": 4.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/cockpit-bff-live.ts": {
            "lines": 449,
            "tokens": 3444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/centralized-logging.ts": {
            "lines": 784,
            "tokens": 7344,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 161,
            "duplicatedTokens": 1468,
            "percentage": 20.54,
            "percentageTokens": 19.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/cache-warmup.ts": {
            "lines": 181,
            "tokens": 1439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/blue-green-deployment.ts": {
            "lines": 362,
            "tokens": 3608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/basic-ai.ts": {
            "lines": 15,
            "tokens": 170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/backup-recovery.ts": {
            "lines": 643,
            "tokens": 5758,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 65,
            "duplicatedTokens": 964,
            "percentage": 10.11,
            "percentageTokens": 16.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/azure-integration.ts": {
            "lines": 405,
            "tokens": 3080,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 126,
            "percentage": 1.23,
            "percentageTokens": 4.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/automated-testing.ts": {
            "lines": 623,
            "tokens": 5517,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 64,
            "duplicatedTokens": 496,
            "percentage": 10.27,
            "percentageTokens": 8.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/automated-documentation.ts": {
            "lines": 599,
            "tokens": 5232,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 248,
            "percentage": 5.34,
            "percentageTokens": 4.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/auth.ts": {
            "lines": 602,
            "tokens": 4934,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 328,
            "percentage": 4.98,
            "percentageTokens": 6.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/audit-trail-crm-undo.ts": {
            "lines": 449,
            "tokens": 3985,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/antivirus-global.ts": {
            "lines": 511,
            "tokens": 4361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/analytics.ts": {
            "lines": 14,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-training.ts": {
            "lines": 618,
            "tokens": 4422,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-security-compliance.ts": {
            "lines": 509,
            "tokens": 4059,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 88,
            "duplicatedTokens": 783,
            "percentage": 17.29,
            "percentageTokens": 19.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-performance-optimization.ts": {
            "lines": 623,
            "tokens": 4870,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 197,
            "percentage": 4.17,
            "percentageTokens": 4.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-model-management.ts": {
            "lines": 707,
            "tokens": 5527,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-dashboard-consolidation.ts": {
            "lines": 323,
            "tokens": 2794,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 305,
            "percentage": 6.19,
            "percentageTokens": 10.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-cost-prediction.ts": {
            "lines": 767,
            "tokens": 5725,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 323,
            "percentage": 4.17,
            "percentageTokens": 5.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-cost-optimization.ts": {
            "lines": 672,
            "tokens": 5391,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 197,
            "percentage": 3.87,
            "percentageTokens": 3.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-chat-advanced.ts": {
            "lines": 541,
            "tokens": 5073,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-budget-ux.ts": {
            "lines": 485,
            "tokens": 3922,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/ai-analytics.ts": {
            "lines": 750,
            "tokens": 2679,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/agents.ts": {
            "lines": 537,
            "tokens": 4454,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 166,
            "percentage": 3.54,
            "percentageTokens": 3.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/agents-simple.ts": {
            "lines": 474,
            "tokens": 5492,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 166,
            "percentage": 4.01,
            "percentageTokens": 3.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-security.ts": {
            "lines": 439,
            "tokens": 3553,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-security-framework.ts": {
            "lines": 530,
            "tokens": 3958,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-reporting.ts": {
            "lines": 470,
            "tokens": 3482,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-performance-monitoring.ts": {
            "lines": 449,
            "tokens": 3987,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-observability.ts": {
            "lines": 621,
            "tokens": 5144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-metrics-alerts.ts": {
            "lines": 712,
            "tokens": 6345,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 129,
            "duplicatedTokens": 955,
            "percentage": 18.12,
            "percentageTokens": 15.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-features.ts": {
            "lines": 358,
            "tokens": 4058,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 126,
            "percentage": 1.4,
            "percentageTokens": 3.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-error-management.ts": {
            "lines": 557,
            "tokens": 6100,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 262,
            "percentage": 4.13,
            "percentageTokens": 4.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-deployment-automation.ts": {
            "lines": 680,
            "tokens": 5914,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-configuration-management.ts": {
            "lines": 813,
            "tokens": 7240,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 747,
            "percentage": 5.17,
            "percentageTokens": 10.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-cicd.ts": {
            "lines": 631,
            "tokens": 4880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-audit-compliance.ts": {
            "lines": 669,
            "tokens": 5371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/advanced-analytics.ts": {
            "lines": 255,
            "tokens": 2297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/routes/admin.finops.ts": {
            "lines": 72,
            "tokens": 780,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/presentation/index.ts": {
            "lines": 55,
            "tokens": 450,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/openapi/spec.ts": {
            "lines": 579,
            "tokens": 4302,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/validation.ts": {
            "lines": 300,
            "tokens": 2570,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/validation.middleware.ts": {
            "lines": 147,
            "tokens": 1464,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/trace-propagation.middleware.ts": {
            "lines": 439,
            "tokens": 3039,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/security.ts": {
            "lines": 431,
            "tokens": 3534,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 173,
            "percentage": 4.41,
            "percentageTokens": 4.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/security.middleware.ts": {
            "lines": 378,
            "tokens": 3024,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 173,
            "percentage": 5.03,
            "percentageTokens": 5.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/security-enhanced.middleware.ts": {
            "lines": 527,
            "tokens": 3895,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/rls.ts": {
            "lines": 244,
            "tokens": 2011,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/rls-tenant.middleware.ts": {
            "lines": 506,
            "tokens": 3876,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/response-optimizer.ts": {
            "lines": 367,
            "tokens": 2842,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/raw-body.ts": {
            "lines": 10,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/rate-limiting.ts": {
            "lines": 157,
            "tokens": 1236,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/rate-limiter.ts": {
            "lines": 360,
            "tokens": 3003,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/rate-limit-org.ts": {
            "lines": 409,
            "tokens": 3375,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/performance.middleware.ts": {
            "lines": 325,
            "tokens": 2858,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/org.ts": {
            "lines": 39,
            "tokens": 439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/observability.ts": {
            "lines": 205,
            "tokens": 2488,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/metrics.ts": {
            "lines": 324,
            "tokens": 2358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/latency.ts": {
            "lines": 19,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/gateway.ts": {
            "lines": 272,
            "tokens": 2347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/finops.ts": {
            "lines": 19,
            "tokens": 269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/finops.guard.ts": {
            "lines": 91,
            "tokens": 1313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/finops.guard.spec.ts": {
            "lines": 69,
            "tokens": 959,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/finops-enforce.ts": {
            "lines": 284,
            "tokens": 2158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/finops-enforce-v2.ts": {
            "lines": 534,
            "tokens": 4632,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/feature-flags.ts": {
            "lines": 232,
            "tokens": 1998,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/error-handler.ts": {
            "lines": 343,
            "tokens": 2547,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/correlation.ts": {
            "lines": 323,
            "tokens": 2235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/chaos.ts": {
            "lines": 115,
            "tokens": 1288,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/auth.ts": {
            "lines": 497,
            "tokens": 4124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/aadRole.ts": {
            "lines": 10,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/middleware/aad.ts": {
            "lines": 27,
            "tokens": 464,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/workflows.ts": {
            "lines": 901,
            "tokens": 8611,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/workflows.service.ts": {
            "lines": 691,
            "tokens": 7161,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/workflows-simple.ts": {
            "lines": 43,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/workers-integration.service.ts": {
            "lines": 495,
            "tokens": 3497,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/warmup.service.ts": {
            "lines": 556,
            "tokens": 4518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/warmup-types.ts": {
            "lines": 580,
            "tokens": 3874,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/warmup-system.service.ts": {
            "lines": 539,
            "tokens": 4469,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/validation-manager.service.ts": {
            "lines": 484,
            "tokens": 4949,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/tracing.ts": {
            "lines": 262,
            "tokens": 2643,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/trace.ts": {
            "lines": 41,
            "tokens": 851,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/threat-detection.service.ts": {
            "lines": 741,
            "tokens": 6545,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/testing-framework.ts": {
            "lines": 430,
            "tokens": 3247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/swagger-config.ts": {
            "lines": 738,
            "tokens": 4113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/supplier-scorecard.service.ts": {
            "lines": 987,
            "tokens": 9548,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 30,
            "duplicatedTokens": 640,
            "percentage": 3.04,
            "percentageTokens": 6.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/structured-logger.ts": {
            "lines": 186,
            "tokens": 2117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/stripe-receipts.service.ts": {
            "lines": 598,
            "tokens": 5880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/sse-manager.ts": {
            "lines": 270,
            "tokens": 2119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/smart-cache.service.ts": {
            "lines": 550,
            "tokens": 4660,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/service-mesh.ts": {
            "lines": 333,
            "tokens": 2845,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/service-discovery.ts": {
            "lines": 396,
            "tokens": 3538,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/sepa.service.ts": {
            "lines": 886,
            "tokens": 8709,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/sepa-types.ts": {
            "lines": 67,
            "tokens": 473,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/sepa-robust.service.ts": {
            "lines": 790,
            "tokens": 7493,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/sepa-parser.service.ts": {
            "lines": 225,
            "tokens": 2081,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/semantic-search-crm.service.ts": {
            "lines": 884,
            "tokens": 8013,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/security.ts": {
            "lines": 653,
            "tokens": 5407,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/security.service.ts": {
            "lines": 471,
            "tokens": 3978,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/security-types.ts": {
            "lines": 678,
            "tokens": 5177,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/security-manager.service.ts": {
            "lines": 623,
            "tokens": 5715,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/security-enhanced.service.ts": {
            "lines": 53,
            "tokens": 504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/security-compliance-enhanced.service.ts": {
            "lines": 892,
            "tokens": 7328,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rule-engine.service.ts": {
            "lines": 396,
            "tokens": 3483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rls.ts": {
            "lines": 424,
            "tokens": 3018,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rls-types.ts": {
            "lines": 331,
            "tokens": 2617,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rls-policy-validator.service.ts": {
            "lines": 687,
            "tokens": 5496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rls-policy-generator.service.ts": {
            "lines": 716,
            "tokens": 5051,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 158,
            "duplicatedTokens": 912,
            "percentage": 22.07,
            "percentageTokens": 18.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rls-policy-deployer.service.ts": {
            "lines": 507,
            "tokens": 4456,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rls-cicd.service.ts": {
            "lines": 652,
            "tokens": 3858,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/resource-management.service.ts": {
            "lines": 72,
            "tokens": 710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/request-tracing.service.ts": {
            "lines": 65,
            "tokens": 555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/reporting-engine.service.ts": {
            "lines": 654,
            "tokens": 6431,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/reportes-mensuales.service.ts": {
            "lines": 866,
            "tokens": 7192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/reconciliation.service.ts": {
            "lines": 204,
            "tokens": 1772,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/real-time-collaboration.ts": {
            "lines": 853,
            "tokens": 7496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rbac.service.ts": {
            "lines": 693,
            "tokens": 6157,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rbac-simple.ts": {
            "lines": 189,
            "tokens": 1803,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 108,
            "duplicatedTokens": 1041,
            "percentage": 57.14,
            "percentageTokens": 57.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rbac-granular.ts": {
            "lines": 382,
            "tokens": 3378,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 422,
            "percentage": 12.3,
            "percentageTokens": 12.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rbac-basic.ts": {
            "lines": 174,
            "tokens": 1545,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 61,
            "duplicatedTokens": 619,
            "percentage": 35.06,
            "percentageTokens": 40.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rate-limiting.ts": {
            "lines": 328,
            "tokens": 3106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/rate-limiting.service.ts": {
            "lines": 65,
            "tokens": 552,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/quiet-hours.service.ts": {
            "lines": 373,
            "tokens": 3282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/quiet-hours-types.ts": {
            "lines": 484,
            "tokens": 3367,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/prompt-library.service.ts": {
            "lines": 164,
            "tokens": 1609,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/process-manager.ts": {
            "lines": 453,
            "tokens": 3803,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/performance-optimizer.ts": {
            "lines": 439,
            "tokens": 3540,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/performance-optimizer.service.ts": {
            "lines": 576,
            "tokens": 4123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/performance-optimizer-v3.service.ts": {
            "lines": 500,
            "tokens": 3703,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/performance-optimizer-v2.service.ts": {
            "lines": 685,
            "tokens": 4845,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/performance-optimization.service.ts": {
            "lines": 553,
            "tokens": 4948,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/oncall.service.ts": {
            "lines": 408,
            "tokens": 3464,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 436,
            "percentage": 5.39,
            "percentageTokens": 12.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/observability.ts": {
            "lines": 32,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/notification-intelligence.service.ts": {
            "lines": 585,
            "tokens": 4886,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/monitoring.service.ts": {
            "lines": 707,
            "tokens": 6418,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/monitoring-alerts.service.ts": {
            "lines": 641,
            "tokens": 5092,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/metrics.ts": {
            "lines": 126,
            "tokens": 1026,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 349,
            "percentage": 34.13,
            "percentageTokens": 34.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/metrics.old.ts": {
            "lines": 312,
            "tokens": 3041,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/metrics.new.ts": {
            "lines": 59,
            "tokens": 474,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 349,
            "percentage": 72.88,
            "percentageTokens": 73.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/memory-manager.service.ts": {
            "lines": 676,
            "tokens": 5412,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 536,
            "percentage": 4.44,
            "percentageTokens": 9.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/matching-engine.service.ts": {
            "lines": 241,
            "tokens": 2158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/make-quotas.service.ts": {
            "lines": 249,
            "tokens": 2271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/logger.ts": {
            "lines": 488,
            "tokens": 4012,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/inventory.ts": {
            "lines": 964,
            "tokens": 9266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/inventory-kardex.service.ts": {
            "lines": 942,
            "tokens": 9050,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/interactions.service.ts": {
            "lines": 646,
            "tokens": 6612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/intelligent-search.service.ts": {
            "lines": 511,
            "tokens": 4379,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/intelligent-reporting.service.ts": {
            "lines": 662,
            "tokens": 6117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/integrations.ts": {
            "lines": 216,
            "tokens": 1878,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/hitl-v2.service.ts": {
            "lines": 614,
            "tokens": 5653,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/health-monitor.ts": {
            "lines": 523,
            "tokens": 4729,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/health-modes.ts": {
            "lines": 209,
            "tokens": 1837,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/health-check.service.ts": {
            "lines": 327,
            "tokens": 2692,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/graph-wrappers.service.ts": {
            "lines": 621,
            "tokens": 4722,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/graph-chaos-light.service.ts": {
            "lines": 369,
            "tokens": 3036,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/graceful-shutdown.service.ts": {
            "lines": 60,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/gdpr-types.ts": {
            "lines": 185,
            "tokens": 1436,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/gdpr-export.service.ts": {
            "lines": 417,
            "tokens": 3585,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/gdpr-erase.service.ts": {
            "lines": 423,
            "tokens": 3841,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/gdpr-audit.service.ts": {
            "lines": 435,
            "tokens": 3580,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/gateway.ts": {
            "lines": 487,
            "tokens": 4361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/fiscalidad-regional.service.ts": {
            "lines": 821,
            "tokens": 7125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/fiscalidad-regional-ue.service.ts": {
            "lines": 614,
            "tokens": 5209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/finops.ts": {
            "lines": 560,
            "tokens": 5584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/finops-types.ts": {
            "lines": 439,
            "tokens": 3596,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/executive-dashboard.service.ts": {
            "lines": 708,
            "tokens": 6584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/events.ts": {
            "lines": 531,
            "tokens": 4572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/escalation.service.ts": {
            "lines": 462,
            "tokens": 3700,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/errors.ts": {
            "lines": 125,
            "tokens": 1414,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/error-recovery.service.ts": {
            "lines": 56,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/error-manager.service.ts": {
            "lines": 537,
            "tokens": 4743,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/error-handler.ts": {
            "lines": 248,
            "tokens": 2027,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/error-handler.service.ts": {
            "lines": 444,
            "tokens": 3427,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/dunning-solid.service.ts": {
            "lines": 707,
            "tokens": 6245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/dunning-3-toques.service.ts": {
            "lines": 565,
            "tokens": 4859,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/distributed-cache.ts": {
            "lines": 531,
            "tokens": 4016,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/deals.service.ts": {
            "lines": 698,
            "tokens": 6997,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/deals-nba.service.ts": {
            "lines": 554,
            "tokens": 5183,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 267,
            "percentage": 4.69,
            "percentageTokens": 5.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/database.ts": {
            "lines": 88,
            "tokens": 769,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/database-pool.ts": {
            "lines": 574,
            "tokens": 5007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/data-validator.ts": {
            "lines": 597,
            "tokens": 4672,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/data-encryption.service.ts": {
            "lines": 66,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/data-analytics-dashboard.service.ts": {
            "lines": 959,
            "tokens": 9080,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 75,
            "duplicatedTokens": 1076,
            "percentage": 7.82,
            "percentageTokens": 11.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/csp-sri-banking.service.ts": {
            "lines": 705,
            "tokens": 6751,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 335,
            "percentage": 4.11,
            "percentageTokens": 4.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/cost-tracker.service.ts": {
            "lines": 546,
            "tokens": 5418,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/cost-optimizer.service.ts": {
            "lines": 617,
            "tokens": 5611,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/contacts-dedupe.service.ts": {
            "lines": 652,
            "tokens": 5997,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/connection-pool.service.ts": {
            "lines": 837,
            "tokens": 6772,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/configuration.ts": {
            "lines": 513,
            "tokens": 4543,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/configuration.service.ts": {
            "lines": 479,
            "tokens": 4613,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/config-validation.service.ts": {
            "lines": 55,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/comprehensive-audit.service.ts": {
            "lines": 854,
            "tokens": 8126,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/compliance-management.service.ts": {
            "lines": 649,
            "tokens": 5832,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/companies-taxonomy.service.ts": {
            "lines": 195,
            "tokens": 1811,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/clients.ts": {
            "lines": 20,
            "tokens": 288,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/circuit-breaker.service.ts": {
            "lines": 284,
            "tokens": 2196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/centralized-logging.service.ts": {
            "lines": 973,
            "tokens": 9813,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 97,
            "duplicatedTokens": 1220,
            "percentage": 9.97,
            "percentageTokens": 12.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/cache.ts": {
            "lines": 372,
            "tokens": 3244,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/cache.service.ts": {
            "lines": 408,
            "tokens": 3411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/cache-warmup.service.ts": {
            "lines": 334,
            "tokens": 2583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/cache-manager.service.ts": {
            "lines": 488,
            "tokens": 3996,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/business-intelligence.service.ts": {
            "lines": 739,
            "tokens": 6738,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/budget-manager.service.ts": {
            "lines": 575,
            "tokens": 5577,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/blue-green-deployment.service.ts": {
            "lines": 858,
            "tokens": 7565,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/backup-recovery.service.ts": {
            "lines": 979,
            "tokens": 9246,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 708,
            "percentage": 4.8,
            "percentageTokens": 7.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/backup-recovery-automated.service.ts": {
            "lines": 850,
            "tokens": 7229,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/automated-testing.service.ts": {
            "lines": 743,
            "tokens": 7517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/auth.ts": {
            "lines": 126,
            "tokens": 1021,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/auth.service.ts": {
            "lines": 593,
            "tokens": 4734,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/audit-trail-crm-undo.service.ts": {
            "lines": 604,
            "tokens": 4946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/api-versioning.service.ts": {
            "lines": 540,
            "tokens": 4302,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/api-gateway.service.ts": {
            "lines": 543,
            "tokens": 4016,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/api-gateway-enhanced.service.ts": {
            "lines": 732,
            "tokens": 6209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/antivirus-global.service.ts": {
            "lines": 554,
            "tokens": 4647,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/analytics.ts": {
            "lines": 887,
            "tokens": 7637,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/analytics-types.ts": {
            "lines": 547,
            "tokens": 3736,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/analytics-schemas.ts": {
            "lines": 89,
            "tokens": 796,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/alerts.ts": {
            "lines": 496,
            "tokens": 4458,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/alerting-system.ts": {
            "lines": 590,
            "tokens": 4361,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/ai-router.ts": {
            "lines": 42,
            "tokens": 303,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/ai-ml-types.ts": {
            "lines": 401,
            "tokens": 2947,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/ai-chat-advanced.service.ts": {
            "lines": 812,
            "tokens": 7720,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/ai-budget-ux.service.ts": {
            "lines": 679,
            "tokens": 6466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/agent-runtime.service.ts": {
            "lines": 827,
            "tokens": 6980,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 420,
            "percentage": 4.35,
            "percentageTokens": 6.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-search.ts": {
            "lines": 683,
            "tokens": 6402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-rate-limiter.ts": {
            "lines": 427,
            "tokens": 3316,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-performance-monitoring.service.ts": {
            "lines": 850,
            "tokens": 8230,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-monitoring-alerts.service.ts": {
            "lines": 792,
            "tokens": 6694,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-metrics-alerts.service.ts": {
            "lines": 894,
            "tokens": 9179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-configuration-management.service.ts": {
            "lines": 873,
            "tokens": 8550,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 747,
            "percentage": 4.81,
            "percentageTokens": 8.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-cache.ts": {
            "lines": 519,
            "tokens": 4403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-audit-compliance.service.ts": {
            "lines": 654,
            "tokens": 6347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 181,
            "percentage": 1.83,
            "percentageTokens": 2.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-analytics.ts": {
            "lines": 380,
            "tokens": 4049,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 181,
            "percentage": 3.16,
            "percentageTokens": 4.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/lib/advanced-analytics.service.ts": {
            "lines": 707,
            "tokens": 7025,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/jobs/hil-autocancel.ts": {
            "lines": 26,
            "tokens": 414,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/hil/service.ts": {
            "lines": 14,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/finops/estimator.ts": {
            "lines": 8,
            "tokens": 165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/domain/index.ts": {
            "lines": 68,
            "tokens": 981,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/db/migrations.ts": {
            "lines": 199,
            "tokens": 1906,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/db/memory.repo.ts": {
            "lines": 160,
            "tokens": 1817,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/cron/hil-expirer.ts": {
            "lines": 17,
            "tokens": 182,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/controllers/memory.controller.ts": {
            "lines": 118,
            "tokens": 955,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/controllers/advanced-features.controller.ts": {
            "lines": 665,
            "tokens": 6061,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/config/env.ts": {
            "lines": 133,
            "tokens": 1217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/config/agents.master.ts": {
            "lines": 41,
            "tokens": 463,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/application/index.ts": {
            "lines": 63,
            "tokens": 809,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/workers-integration.test.ts": {
            "lines": 622,
            "tokens": 4614,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 178,
            "percentage": 3.86,
            "percentageTokens": 3.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/memory.integration.test.ts": {
            "lines": 217,
            "tokens": 1757,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/finops-enforce.test.ts": {
            "lines": 590,
            "tokens": 4947,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/end-to-end.test.ts": {
            "lines": 833,
            "tokens": 6209,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 178,
            "percentage": 2.88,
            "percentageTokens": 2.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/agents.test.ts": {
            "lines": 528,
            "tokens": 4119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/__tests__/agents.integration.test.ts": {
            "lines": 233,
            "tokens": 1995,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/test-e2e-advanced.ts": {
            "lines": 305,
            "tokens": 2196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/test-all-endpoints.ts": {
            "lines": 235,
            "tokens": 2043,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/index.final.ts": {
            "lines": 860,
            "tokens": 7197,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 103,
            "duplicatedTokens": 966,
            "percentage": 11.98,
            "percentageTokens": 13.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/index.expanded.ts": {
            "lines": 272,
            "tokens": 2058,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 73,
            "duplicatedTokens": 666,
            "percentage": 26.84,
            "percentageTokens": 32.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "apps/api/src/bootstrap.example.ts": {
            "lines": 152,
            "tokens": 966,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 255645,
          "tokens": 2236087,
          "sources": 616,
          "clones": 262,
          "duplicatedLines": 5623,
          "duplicatedTokens": 62333,
          "percentage": 2.2,
          "percentageTokens": 2.79,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "apps/api/src/hil/service.js": {
            "lines": 10,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 10,
          "tokens": 91,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "json": {
        "sources": {
          "apps/api/src/config/finops.departments.json": {
            "lines": 15,
            "tokens": 284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 15,
          "tokens": 284,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 255670,
      "tokens": 2236462,
      "sources": 618,
      "clones": 262,
      "duplicatedLines": 5623,
      "duplicatedTokens": 62333,
      "percentage": 2.2,
      "percentageTokens": 2.79,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "crypto.randomUUID(),\n        name: variant.name,\n        sku: variant.sku,\n        price: Money.create(variant.price.amount, variant.price.currency),\n        compareAtPrice: variant.compareAtPrice ? Money.create(\n          variant.compareAtPrice.amount,\n          variant.compareAtPrice.currency\n        ) : undefined,\n        costPrice: variant.costPrice ? Money.create(\n          variant.costPrice.amount,\n          variant.costPrice.currency\n        ) : undefined,\n        inventory: variant.inventory,\n        attributes: variant.attributes,\n        isActive: variant.isActive,\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/product/create-product.use-case.ts",
        "start": 188,
        "end": 203,
        "startLoc": {
          "line": 188,
          "column": 2,
          "position": 1545
        },
        "endLoc": {
          "line": 203,
          "column": 2,
          "position": 1698
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/product/update-product.use-case.ts",
        "start": 256,
        "end": 271,
        "startLoc": {
          "line": 256,
          "column": 2,
          "position": 2066
        },
        "endLoc": {
          "line": 271,
          "column": 2,
          "position": 2219
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "productId?: string;\n    description: string;\n    quantity: number;\n    unitPrice: {\n      amount: number;\n      currency: string;\n    };\n    totalPrice: {\n      amount: number;\n      currency: string;\n    };\n    taxRate?: number;\n    taxAmount?: {\n      amount: number;\n      currency: string;\n    };\n    discountRate?: number;\n    discountAmount?: {\n      amount: number;\n      currency: string;\n    };\n    notes?: string;\n  }>;\n  paymentMethod?: 'cash' | 'credit_card' | 'bank_transfer' | 'check' | 'paypal' | 'stripe' | 'other';\n  reference?: string;\n  notes?: string;\n  settings:",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/invoice/create-invoice.use-case.ts",
        "start": 21,
        "end": 47,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 212
        },
        "endLoc": {
          "line": 47,
          "column": 2,
          "position": 410
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/invoice/update-invoice.use-case.ts",
        "start": 23,
        "end": 49,
        "startLoc": {
          "line": 23,
          "column": 5,
          "position": 235
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 433
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "this.generateId(),\n        productId: item.productId,\n        description: item.description,\n        quantity: item.quantity,\n        unitPrice: Money.create(item.unitPrice.amount, item.unitPrice.currency),\n        totalPrice: Money.create(item.totalPrice.amount, item.totalPrice.currency),\n        taxRate: item.taxRate,\n        taxAmount: item.taxAmount ? Money.create(item.taxAmount.amount, item.taxAmount.currency) : undefined,\n        discountRate: item.discountRate,\n        discountAmount: item.discountAmount ? Money.create(item.discountAmount.amount, item.discountAmount.currency) : undefined,\n        notes: item.notes,\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/invoice/create-invoice.use-case.ts",
        "start": 130,
        "end": 141,
        "startLoc": {
          "line": 130,
          "column": 2,
          "position": 1141
        },
        "endLoc": {
          "line": 141,
          "column": 2,
          "position": 1316
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/invoice/update-invoice.use-case.ts",
        "start": 168,
        "end": 179,
        "startLoc": {
          "line": 168,
          "column": 2,
          "position": 1342
        },
        "endLoc": {
          "line": 179,
          "column": 2,
          "position": 1517
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ".constraints.map(constraint => ({\n          id: constraint.id,\n          name: constraint.name,\n          type: { value: constraint.type },\n          columns: constraint.columns,\n          referencedTable: constraint.referencedTable,\n          referencedColumns: constraint.referencedColumns,\n          condition: constraint.condition,\n          description: constraint.description,\n          isDeferrable: constraint.isDeferrable,\n          initiallyDeferred: constraint.initiallyDeferred,\n          onDelete: constraint.onDelete,\n          onUpdate: constraint.onUpdate,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        })),\n        indexes",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/database-schema/create-database-schema.use-case.ts",
        "start": 278,
        "end": 294,
        "startLoc": {
          "line": 278,
          "column": 6,
          "position": 2427
        },
        "endLoc": {
          "line": 294,
          "column": 8,
          "position": 2582
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/database-schema/create-database-schema.use-case.ts",
        "start": 253,
        "end": 269,
        "startLoc": {
          "line": 253,
          "column": 7,
          "position": 2187
        },
        "endLoc": {
          "line": 269,
          "column": 12,
          "position": 2342
        }
      }
    },
    {
      "format": "typescript",
      "lines": 68,
      "fragment": ": 'low' | 'medium' | 'high' | 'urgent';\n  email?: string;\n  phone?: string;\n  mobile?: string;\n  fax?: string;\n  website?: string;\n  address?: {\n    street: string;\n    city: string;\n    state?: string;\n    postalCode: string;\n    country: string;\n    countryCode: string;\n  };\n  birthday?: Date;\n  anniversary?: Date;\n  gender?: 'male' | 'female' | 'other' | 'prefer_not_to_say';\n  maritalStatus?: 'single' | 'married' | 'divorced' | 'widowed' | 'separated';\n  children?: number;\n  education?: string;\n  profession?: string;\n  industry?: string;\n  experience?: number;\n  salary?: {\n    amount: number;\n    currency: string;\n  };\n  socialMedia?: {\n    linkedin?: string;\n    twitter?: string;\n    facebook?: string;\n    instagram?: string;\n    youtube?: string;\n    tiktok?: string;\n    other?: Record<string, string>;\n  };\n  communication?: {\n    preferredMethod?: 'email' | 'phone' | 'sms' | 'whatsapp' | 'linkedin' | 'other';\n    bestTimeToCall?: string;\n    timeZone?: string;\n    doNotCall?: boolean;\n    doNotEmail?: boolean;\n    doNotSms?: boolean;\n  };\n  settings?: {\n    notifications?: {\n      email?: boolean;\n      sms?: boolean;\n      push?: boolean;\n      phone?: boolean;\n    };\n    preferences?: {\n      language?: string;\n      timezone?: string;\n      currency?: string;\n      dateFormat?: string;\n      timeFormat?: string;\n    };\n    customFields?: Record<string, any>;\n    tags?: string[];\n    notes?: string;\n    internalNotes?: string;\n  };\n  assignedUserId?: string;\n  nextFollowUpDate?: Date;\n  leadScore?: number;\n  engagementScore?: number;\n  createdBy",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/contact/create-contact.use-case.ts",
        "start": 21,
        "end": 88,
        "startLoc": {
          "line": 21,
          "column": 9,
          "position": 232
        },
        "endLoc": {
          "line": 88,
          "column": 10,
          "position": 798
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/contact/update-contact.use-case.ts",
        "start": 21,
        "end": 88,
        "startLoc": {
          "line": 21,
          "column": 2,
          "position": 238
        },
        "endLoc": {
          "line": 88,
          "column": 10,
          "position": 804
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "request.companyId && request.companyId.trim().length === 0) {\n      errors.push('Company ID cannot be empty');\n    }\n\n    // Validate children if provided\n    if (request.children !== undefined && (request.children < 0 || request.children > 20)) {\n      errors.push('Children count must be between 0 and 20');\n    }\n\n    // Validate experience if provided\n    if (request.experience !== undefined && (request.experience < 0 || request.experience > 50)) {\n      errors.push('Experience must be between 0 and 50 years');\n    }\n\n    // Validate lead score if provided\n    if (request.leadScore !== undefined && (request.leadScore < 0 || request.leadScore > 100)) {\n      errors.push('Lead score must be between 0 and 100');\n    }\n\n    // Validate engagement score if provided\n    if (request.engagementScore !== undefined && (request.engagementScore < 0 || request.engagementScore > 100)) {\n      errors.push('Engagement score must be between 0 and 100');\n    }\n\n    // Validate salary if provided\n    if (request.salary)",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/contact/create-contact.use-case.ts",
        "start": 299,
        "end": 324,
        "startLoc": {
          "line": 299,
          "column": 2,
          "position": 2732
        },
        "endLoc": {
          "line": 324,
          "column": 2,
          "position": 2990
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/contact/update-contact.use-case.ts",
        "start": 331,
        "end": 356,
        "startLoc": {
          "line": 331,
          "column": 2,
          "position": 3040
        },
        "endLoc": {
          "line": 356,
          "column": 4,
          "position": 3299
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": ") {\n      if (request.salary.amount < 0) {\n        errors.push('Salary cannot be negative');\n      }\n      if (!request.salary.currency || request.salary.currency.length !== 3) {\n        errors.push('Salary currency must be a 3-letter code');\n      }\n    }\n\n    // Validate social media URLs if provided\n    if (request.socialMedia) {\n      if (request.socialMedia.linkedin && !Contact.validateSocialMediaUrl(request.socialMedia.linkedin, 'linkedin')) {\n        errors.push('Invalid LinkedIn URL');\n      }\n      if (request.socialMedia.twitter && !Contact.validateSocialMediaUrl(request.socialMedia.twitter, 'twitter')) {\n        errors.push('Invalid Twitter URL');\n      }\n      if (request.socialMedia.facebook && !Contact.validateSocialMediaUrl(request.socialMedia.facebook, 'facebook')) {\n        errors.push('Invalid Facebook URL');\n      }\n      if (request.socialMedia.instagram && !Contact.validateSocialMediaUrl(request.socialMedia.instagram, 'instagram')) {\n        errors.push('Invalid Instagram URL');\n      }\n      if (request.socialMedia.youtube && !Contact.validateSocialMediaUrl(request.socialMedia.youtube, 'youtube')) {\n        errors.push('Invalid YouTube URL');\n      }\n      if (request.socialMedia.tiktok && !Contact.validateSocialMediaUrl(request.socialMedia.tiktok, 'tiktok')) {\n        errors.push('Invalid TikTok URL');\n      }\n    }\n\n    // Validate communication preferences if provided\n    if (request.communication) {\n      const validMethods = ['email', 'phone', 'sms', 'whatsapp', 'linkedin', 'other'];\n      if (request.communication.preferredMethod && !validMethods.includes(request.communication.preferredMethod)) {\n        errors.push('Invalid preferred communication method');\n      }\n    }\n\n    // Validate assigned user ID if provided\n    if (request.assignedUserId &&",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/contact/create-contact.use-case.ts",
        "start": 324,
        "end": 364,
        "startLoc": {
          "line": 324,
          "column": 7,
          "position": 2990
        },
        "endLoc": {
          "line": 364,
          "column": 3,
          "position": 3432
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/contact/update-contact.use-case.ts",
        "start": 356,
        "end": 396,
        "startLoc": {
          "line": 356,
          "column": 10,
          "position": 3302
        },
        "endLoc": {
          "line": 396,
          "column": 4,
          "position": 3744
        }
      }
    },
    {
      "format": "typescript",
      "lines": 59,
      "fragment": ": 'website' | 'referral' | 'cold_call' | 'email' | 'social_media' | 'event' | 'other';\n  website?: string;\n  email?: string;\n  phone?: string;\n  address?: {\n    street: string;\n    city: string;\n    state?: string;\n    postalCode: string;\n    country: string;\n    countryCode: string;\n  };\n  billingAddress?: {\n    street: string;\n    city: string;\n    state?: string;\n    postalCode: string;\n    country: string;\n    countryCode: string;\n  };\n  shippingAddress?: {\n    street: string;\n    city: string;\n    state?: string;\n    postalCode: string;\n    country: string;\n    countryCode: string;\n  };\n  taxId?: string;\n  vatNumber?: string;\n  registrationNumber?: string;\n  description?: string;\n  annualRevenue?: {\n    amount: number;\n    currency: string;\n  };\n  employeeCount?: number;\n  foundedYear?: number;\n  parentCompanyId?: string;\n  assignedUserId?: string;\n  nextFollowUpDate?: Date;\n  leadScore?: number;\n  settings?: {\n    notifications?: {\n      email?: boolean;\n      sms?: boolean;\n      push?: boolean;\n    };\n    preferences?: {\n      language?: string;\n      timezone?: string;\n      currency?: string;\n      dateFormat?: string;\n    };\n    customFields?: Record<string, any>;\n    tags?: string[];\n    notes?: string;\n  };\n  createdBy",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/company/create-company.use-case.ts",
        "start": 18,
        "end": 76,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 168
        },
        "endLoc": {
          "line": 76,
          "column": 10,
          "position": 610
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/company/update-company.use-case.ts",
        "start": 18,
        "end": 76,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 174
        },
        "endLoc": {
          "line": 76,
          "column": 10,
          "position": 616
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "request.vatNumber && !Company.validateVatNumber(request.vatNumber)) {\n      errors.push('Invalid VAT number format');\n    }\n\n    // Validate employee count if provided\n    if (request.employeeCount !== undefined && (request.employeeCount < 0 || request.employeeCount > 1000000)) {\n      errors.push('Employee count must be between 0 and 1,000,000');\n    }\n\n    // Validate founded year if provided\n    if (request.foundedYear !== undefined) {\n      const currentYear = new Date().getFullYear();\n      if (request.foundedYear < 1800 || request.foundedYear > currentYear) {\n        errors.push(`Founded year must be between 1800 and ${currentYear}`);\n      }\n    }\n\n    // Validate lead score if provided\n    if (request.leadScore !== undefined && (request.leadScore < 0 || request.leadScore > 100)) {\n      errors.push('Lead score must be between 0 and 100');\n    }\n\n    // Validate annual revenue if provided\n    if (request.annualRevenue)",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/company/create-company.use-case.ts",
        "start": 269,
        "end": 292,
        "startLoc": {
          "line": 269,
          "column": 2,
          "position": 2295
        },
        "endLoc": {
          "line": 292,
          "column": 2,
          "position": 2524
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/company/update-company.use-case.ts",
        "start": 315,
        "end": 338,
        "startLoc": {
          "line": 315,
          "column": 2,
          "position": 2667
        },
        "endLoc": {
          "line": 338,
          "column": 4,
          "position": 2897
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ",\n      layers: request.settings.layers.map(layer => ({\n        id: layer.id,\n        name: layer.name,\n        type: { value: layer.type },\n        description: layer.description,\n        components: layer.components.map(component => ({\n          id: component.id,\n          name: component.name,\n          type: { value: component.type },\n          layer: { value: layer.type },\n          description: component.description,\n          dependencies: component.dependencies,\n          interfaces: component.interfaces,\n          implementation: component.implementation,\n          tests: component.tests,\n          documentation: component.documentation,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        })),\n        dependencies: layer.dependencies,\n        responsibilities: layer.responsibilities,\n        patterns: layer.patterns,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      })),\n      isActive",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/application/use-cases/architecture/create-architecture.use-case.ts",
        "start": 166,
        "end": 192,
        "startLoc": {
          "line": 166,
          "column": 2,
          "position": 1502
        },
        "endLoc": {
          "line": 192,
          "column": 9,
          "position": 1769
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/architecture/create-architecture.use-case.ts",
        "start": 115,
        "end": 141,
        "startLoc": {
          "line": 115,
          "column": 2,
          "position": 970
        },
        "endLoc": {
          "line": 141,
          "column": 9,
          "position": 1237
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ";\n      const mockCampaign = {\n        id: campaignId,\n        organizationId: mockOrganizationId,\n        name: 'Test Campaign',\n        type: 'newsletter',\n        status: 'draft',\n        subject: 'Test Subject',\n        previewText: 'Test preview text',\n        htmlContent: '<h1>Test Content</h1>',\n        textContent: 'Test Content',\n        templateId: 'template-123',\n        segments: ['segment-1'],\n        recipients: ['test@example.com'],\n        scheduledAt: undefined,\n        sentAt: undefined,\n        completedAt: undefined,\n        fromName: 'Test Sender',\n        fromEmail: 'sender@example.com',\n        replyTo: 'reply@example.com',\n        trackingEnabled: true,\n        analytics: undefined,\n        abTest: undefined,\n        automation: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 169,
        "end": 199,
        "startLoc": {
          "line": 169,
          "column": 16,
          "position": 1300
        },
        "endLoc": {
          "line": 199,
          "column": 2,
          "position": 1511
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 119,
        "end": 149,
        "startLoc": {
          "line": 119,
          "column": 19,
          "position": 900
        },
        "endLoc": {
          "line": 149,
          "column": 44,
          "position": 1111
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": ", async () => {\n      const campaignId = 'test-campaign-id';\n      const mockCampaign = {\n        id: campaignId,\n        organizationId: mockOrganizationId,\n        name: 'Test Campaign',\n        type: 'newsletter',\n        status: 'draft',\n        subject: 'Test Subject',\n        previewText: 'Test preview text',\n        htmlContent: '<h1>Test Content</h1>',\n        textContent: 'Test Content',\n        templateId: 'template-123',\n        segments: ['segment-1'],\n        recipients: ['test@example.com'],\n        scheduledAt: undefined,\n        sentAt: undefined,\n        completedAt: undefined,\n        fromName: 'Test Sender',\n        fromEmail: 'sender@example.com',\n        replyTo: 'reply@example.com',\n        trackingEnabled: true,\n        analytics: undefined,\n        abTest: undefined,\n        automation: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).campaigns.set(campaignId, mockCampaign);\n      mockDb",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 208,
        "end": 240,
        "startLoc": {
          "line": 208,
          "column": 38,
          "position": 1591
        },
        "endLoc": {
          "line": 240,
          "column": 7,
          "position": 1841
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 118,
        "end": 201,
        "startLoc": {
          "line": 118,
          "column": 34,
          "position": 881
        },
        "endLoc": {
          "line": 201,
          "column": 6,
          "position": 1532
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": ", async () => {\n      const campaignId = 'test-campaign-id';\n      const mockCampaign = {\n        id: campaignId,\n        organizationId: mockOrganizationId,\n        name: 'Test Campaign',\n        type: 'newsletter',\n        status: 'draft',\n        subject: 'Test Subject',\n        previewText: 'Test preview text',\n        htmlContent: '<h1>Test Content</h1>',\n        textContent: 'Test Content',\n        templateId: 'template-123',\n        segments: ['segment-1'],\n        recipients: ['test@example.com'],\n        scheduledAt: undefined,\n        sentAt: undefined,\n        completedAt: undefined,\n        fromName: 'Test Sender',\n        fromEmail: 'sender@example.com',\n        replyTo: 'reply@example.com',\n        trackingEnabled: true,\n        analytics: undefined,\n        abTest: undefined,\n        automation: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).campaigns.set(campaignId, mockCampaign);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const result",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 277,
        "end": 311,
        "startLoc": {
          "line": 277,
          "column": 38,
          "position": 2117
        },
        "endLoc": {
          "line": 311,
          "column": 7,
          "position": 2389
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 118,
        "end": 242,
        "startLoc": {
          "line": 118,
          "column": 34,
          "position": 881
        },
        "endLoc": {
          "line": 242,
          "column": 8,
          "position": 1863
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ",\n        organizationId: mockOrganizationId,\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        status: 'active',\n        tags: ['tag1'],\n        customFields: {},\n        segments: ['segment-1'],\n        subscribedAt: new Date(),\n        unsubscribedAt: undefined,\n        lastActivityAt: undefined,\n        source: 'website',\n        ipAddress: '192.168.1.1',\n        userAgent: 'Mozilla/5.0',\n        location: undefined,\n        preferences: {\n          frequency: 'weekly',\n          categories: ['news'],\n          format: 'html'\n        },\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      (service as any).subscribers.set('test-subscriber-id'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 453,
        "end": 478,
        "startLoc": {
          "line": 453,
          "column": 21,
          "position": 3550
        },
        "endLoc": {
          "line": 478,
          "column": 21,
          "position": 3737
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 406,
        "end": 431,
        "startLoc": {
          "line": 406,
          "column": 13,
          "position": 3165
        },
        "endLoc": {
          "line": 431,
          "column": 13,
          "position": 3352
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": ",\n          abTest: undefined,\n          automation: undefined,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          createdBy: mockUserId,\n          updatedBy: mockUserId,\n        },\n        {\n          id: 'campaign2',\n          organizationId: mockOrganizationId,\n          name: 'Campaign 2',\n          type: 'promotional',\n          status: 'sent',\n          subject: 'Subject 2',\n          previewText: 'Preview 2',\n          htmlContent: '<h1>Content 2</h1>',\n          textContent: 'Content 2',\n          templateId: 'template-2',\n          segments: ['segment-2'],\n          recipients: ['test2@example.com'],\n          scheduledAt: undefined,\n          sentAt: new Date(),\n          completedAt: undefined,\n          fromName: 'Sender 2',\n          fromEmail: 'sender2@example.com',\n          replyTo: 'reply2@example.com',\n          trackingEnabled: true,\n          analytics: {\n            sent: 200",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 678,
        "end": 707,
        "startLoc": {
          "line": 678,
          "column": 2,
          "position": 5262
        },
        "endLoc": {
          "line": 707,
          "column": 4,
          "position": 5472
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/email-marketing.service.test.ts",
        "start": 518,
        "end": 547,
        "startLoc": {
          "line": 518,
          "column": 10,
          "position": 4050
        },
        "endLoc": {
          "line": 547,
          "column": 4,
          "position": 4260
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": ";\n      const mockDocument = {\n        id: documentId,\n        organizationId: mockOrganizationId,\n        name: 'Test Document',\n        originalName: 'test-document.pdf',\n        type: 'pdf',\n        status: 'draft',\n        metadata: {\n          title: 'Test Document',\n          description: 'A test document',\n          tags: ['test'],\n          category: 'test',\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        storagePath: '/storage/test-document.pdf',\n        storageProvider: 'local',\n        size: 1024,\n        mimeType: 'application/pdf',\n        checksum: 'abc123',\n        isPublic: false,\n        isEncrypted: false,\n        permissions: [],\n        versions: [],\n        currentVersion: '1.0.0',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 180,
        "end": 214,
        "startLoc": {
          "line": 180,
          "column": 16,
          "position": 1371
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1609
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 126,
        "end": 160,
        "startLoc": {
          "line": 126,
          "column": 14,
          "position": 944
        },
        "endLoc": {
          "line": 160,
          "column": 46,
          "position": 1182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 37,
      "fragment": ", async () => {\n      const documentId = 'test-doc-id';\n      const mockDocument = {\n        id: documentId,\n        organizationId: mockOrganizationId,\n        name: 'Test Document',\n        originalName: 'test-document.pdf',\n        type: 'pdf',\n        status: 'draft',\n        metadata: {\n          title: 'Test Document',\n          description: 'A test document',\n          tags: ['test'],\n          category: 'test',\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        storagePath: '/storage/test-document.pdf',\n        storageProvider: 'local',\n        size: 1024,\n        mimeType: 'application/pdf',\n        checksum: 'abc123',\n        isPublic: false,\n        isEncrypted: false,\n        permissions: [],\n        versions: [],\n        currentVersion: '1.0.0',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).documents.set(documentId, mockDocument);\n      mockDb",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 223,
        "end": 259,
        "startLoc": {
          "line": 223,
          "column": 40,
          "position": 1689
        },
        "endLoc": {
          "line": 259,
          "column": 7,
          "position": 1966
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 125,
        "end": 216,
        "startLoc": {
          "line": 125,
          "column": 36,
          "position": 925
        },
        "endLoc": {
          "line": 216,
          "column": 6,
          "position": 1630
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ", async () => {\n      const documentId = 'test-doc-id';\n      const mockDocument = {\n        id: documentId,\n        organizationId: mockOrganizationId,\n        name: 'Test Document',\n        originalName: 'test-document.pdf',\n        type: 'pdf',\n        status: 'draft',\n        metadata: {\n          title: 'Test Document',\n          description: 'A test document',\n          tags: ['test'],\n          category: 'test',\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        storagePath: '/storage/test-document.pdf',\n        storageProvider: 'local',\n        size: 1024,\n        mimeType: 'application/pdf',\n        checksum: 'abc123',\n        isPublic: false,\n        isEncrypted: false,\n        permissions: [],\n        versions: [],\n        currentVersion: '1.0.0',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).documents.set(documentId, mockDocument);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const result",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 296,
        "end": 334,
        "startLoc": {
          "line": 296,
          "column": 40,
          "position": 2242
        },
        "endLoc": {
          "line": 334,
          "column": 7,
          "position": 2541
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 125,
        "end": 261,
        "startLoc": {
          "line": 125,
          "column": 36,
          "position": 925
        },
        "endLoc": {
          "line": 261,
          "column": 8,
          "position": 1988
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ", async () => {\n      const documentId = 'test-doc-id';\n      const mockDocument = {\n        id: documentId,\n        organizationId: mockOrganizationId,\n        name: 'Test Document',\n        originalName: 'test-document.pdf',\n        type: 'pdf',\n        status: 'draft',\n        metadata: {\n          title: 'Test Document',\n          description: 'A test document',\n          tags: ['test'],\n          category: 'test',\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        storagePath: '/storage/test-document.pdf',\n        storageProvider: 'local',\n        size: 1024,\n        mimeType: 'application/pdf',\n        checksum: 'abc123',\n        isPublic: false,\n        isEncrypted: false,\n        permissions: [],\n        versions: [],\n        currentVersion: '1.0.0',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).documents.set(documentId, mockDocument);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const versionData",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 497,
        "end": 535,
        "startLoc": {
          "line": 497,
          "column": 48,
          "position": 3804
        },
        "endLoc": {
          "line": 535,
          "column": 12,
          "position": 4103
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 125,
        "end": 261,
        "startLoc": {
          "line": 125,
          "column": 36,
          "position": 925
        },
        "endLoc": {
          "line": 261,
          "column": 8,
          "position": 1988
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ", async () => {\n      const documentId = 'test-doc-id';\n      const mockDocument = {\n        id: documentId,\n        organizationId: mockOrganizationId,\n        name: 'Test Document',\n        originalName: 'test-document.pdf',\n        type: 'pdf',\n        status: 'draft',\n        metadata: {\n          title: 'Test Document',\n          description: 'A test document',\n          tags: ['test'],\n          category: 'test',\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        storagePath: '/storage/test-document.pdf',\n        storageProvider: 'local',\n        size: 1024,\n        mimeType: 'application/pdf',\n        checksum: 'abc123',\n        isPublic: false,\n        isEncrypted: false,\n        permissions: [],\n        versions: [],\n        currentVersion: '1.0.0',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).documents.set(documentId, mockDocument);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const result = await service.grantDocumentPermission",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 576,
        "end": 614,
        "startLoc": {
          "line": 576,
          "column": 48,
          "position": 4392
        },
        "endLoc": {
          "line": 614,
          "column": 24,
          "position": 4699
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 125,
        "end": 334,
        "startLoc": {
          "line": 125,
          "column": 36,
          "position": 925
        },
        "endLoc": {
          "line": 334,
          "column": 15,
          "position": 2549
        }
      }
    },
    {
      "format": "typescript",
      "lines": 45,
      "fragment": ", async () => {\n      const mockDocuments = [\n        {\n          id: 'doc1',\n          organizationId: mockOrganizationId,\n          name: 'Document 1',\n          originalName: 'doc1.pdf',\n          type: 'pdf',\n          status: 'draft',\n          metadata: {\n            title: 'Document 1',\n            description: 'First document',\n            tags: ['test'],\n            category: 'test',\n            author: 'Author 1',\n            language: 'es',\n            keywords: ['test'],\n            customFields: {},\n          },\n          storagePath: '/storage/doc1.pdf',\n          storageProvider: 'local',\n          size: 1024,\n          mimeType: 'application/pdf',\n          checksum: 'abc123',\n          isPublic: false,\n          isEncrypted: false,\n          permissions: [],\n          versions: [],\n          currentVersion: '1.0.0',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          createdBy: mockUserId,\n          updatedBy: mockUserId,\n        },\n        {\n          id: 'doc2',\n          organizationId: mockOrganizationId,\n          name: 'Document 2',\n          originalName: 'doc2.docx',\n          type: 'docx',\n          status: 'approved',\n          metadata: {\n            title: 'Document 2',\n            description: 'Second document',\n            tags: ['test']",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 642,
        "end": 686,
        "startLoc": {
          "line": 642,
          "column": 36,
          "position": 4861
        },
        "endLoc": {
          "line": 686,
          "column": 2,
          "position": 5180
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 350,
        "end": 394,
        "startLoc": {
          "line": 350,
          "column": 39,
          "position": 2677
        },
        "endLoc": {
          "line": 394,
          "column": 2,
          "position": 2996
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "],\n            category: 'test',\n            author: 'Author 2',\n            language: 'es',\n            keywords: ['test'],\n            customFields: {},\n          },\n          storagePath: '/storage/doc2.docx',\n          storageProvider: 'local',\n          size: 2048,\n          mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          checksum: 'def456',\n          isPublic: false,\n          isEncrypted: false,\n          permissions: [],\n          versions: [],\n          currentVersion: '1.0.0',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          createdBy: mockUserId,\n          updatedBy: mockUserId,\n        },\n      ];\n\n      (service as any).documents.set('doc1', mockDocuments[0]);\n      (service as any).documents.set('doc2', mockDocuments[1]);\n\n      const result",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 686,
        "end": 713,
        "startLoc": {
          "line": 686,
          "column": 7,
          "position": 5180
        },
        "endLoc": {
          "line": 713,
          "column": 7,
          "position": 5392
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/document-management.service.test.ts",
        "start": 394,
        "end": 421,
        "startLoc": {
          "line": 394,
          "column": 11,
          "position": 2999
        },
        "endLoc": {
          "line": 421,
          "column": 13,
          "position": 3211
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ",\n        customerId: 'customer-123',\n        customerEmail: 'customer@example.com',\n        customerName: 'John Doe',\n        subject: 'Technical Issue',\n        description: 'I am experiencing a technical problem.',\n        category: 'technical',\n        priority: 'medium',\n        status: 'open',\n        source: 'portal',\n        tags: [],\n        attachments: [],\n        metadata: {},\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Mock the tickets Map\n      (service as any).tickets.set(ticketId, mockTicket);\n\n      const result = await service.getTicket(ticketId, organizationId);\n\n      expect(result).toBeNull",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/customer-support.service.test.ts",
        "start": 182,
        "end": 204,
        "startLoc": {
          "line": 182,
          "column": 15,
          "position": 1485
        },
        "endLoc": {
          "line": 204,
          "column": 9,
          "position": 1651
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/customer-support.service.test.ts",
        "start": 141,
        "end": 163,
        "startLoc": {
          "line": 141,
          "column": 15,
          "position": 1165
        },
        "endLoc": {
          "line": 163,
          "column": 8,
          "position": 1331
        }
      }
    },
    {
      "format": "typescript",
      "lines": 43,
      "fragment": ";\n      const mockContent = {\n        id: contentId,\n        organizationId: mockOrganizationId,\n        title: 'Test Content',\n        slug: 'test-content',\n        type: 'article',\n        status: 'draft',\n        template: 'default',\n        metadata: {\n          title: 'Test Content',\n          description: 'A test content',\n          tags: ['test'],\n          categories: ['test'],\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        content: 'This is test content',\n        htmlContent: '<p>This is test content</p>',\n        markdownContent: 'This is test content',\n        featuredImage: '/images/test.jpg',\n        images: ['/images/test1.jpg'],\n        attachments: ['/files/test.pdf'],\n        versions: [],\n        currentVersion: '1.0.0',\n        publishedAt: undefined,\n        scheduledAt: undefined,\n        expiresAt: undefined,\n        isPublic: false,\n        isFeatured: false,\n        isSticky: false,\n        allowComments: true,\n        allowSharing: true,\n        workflow: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 201,
        "end": 243,
        "startLoc": {
          "line": 201,
          "column": 16,
          "position": 1542
        },
        "endLoc": {
          "line": 243,
          "column": 2,
          "position": 1841
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 139,
        "end": 181,
        "startLoc": {
          "line": 139,
          "column": 18,
          "position": 1054
        },
        "endLoc": {
          "line": 181,
          "column": 46,
          "position": 1353
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": ",\n        organizationId: mockOrganizationId,\n        title: 'Test Content',\n        slug: 'test-content',\n        type: 'article',\n        status: 'draft',\n        template: 'default',\n        metadata: {\n          title: 'Test Content',\n          description: 'A test content',\n          tags: ['test'],\n          categories: ['test'],\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        content: 'This is test content',\n        htmlContent: '<p>This is test content</p>',\n        markdownContent: 'This is test content',\n        featuredImage: '/images/test.jpg',\n        images: ['/images/test1.jpg'],\n        attachments: ['/files/test.pdf'],\n        versions: [],\n        currentVersion: '1.0.0',\n        publishedAt: undefined,\n        scheduledAt: undefined,\n        expiresAt: undefined,\n        isPublic: false,\n        isFeatured: false,\n        isSticky: false,\n        allowComments: true,\n        allowSharing: true,\n        workflow: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).contents.set('test-content-id'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 255,
        "end": 295,
        "startLoc": {
          "line": 255,
          "column": 18,
          "position": 1956
        },
        "endLoc": {
          "line": 295,
          "column": 18,
          "position": 2251
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 141,
        "end": 243,
        "startLoc": {
          "line": 141,
          "column": 10,
          "position": 1070
        },
        "endLoc": {
          "line": 243,
          "column": 10,
          "position": 1853
        }
      }
    },
    {
      "format": "typescript",
      "lines": 45,
      "fragment": ", async () => {\n      const contentId = 'test-content-id';\n      const mockContent = {\n        id: contentId,\n        organizationId: mockOrganizationId,\n        title: 'Test Content',\n        slug: 'test-content',\n        type: 'article',\n        status: 'draft',\n        template: 'default',\n        metadata: {\n          title: 'Test Content',\n          description: 'A test content',\n          tags: ['test'],\n          categories: ['test'],\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        content: 'This is test content',\n        htmlContent: '<p>This is test content</p>',\n        markdownContent: 'This is test content',\n        featuredImage: '/images/test.jpg',\n        images: ['/images/test1.jpg'],\n        attachments: ['/files/test.pdf'],\n        versions: [],\n        currentVersion: '1.0.0',\n        publishedAt: undefined,\n        scheduledAt: undefined,\n        expiresAt: undefined,\n        isPublic: false,\n        isFeatured: false,\n        isSticky: false,\n        allowComments: true,\n        allowSharing: true,\n        workflow: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).contents.set(contentId, mockContent);\n      mockDb",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 314,
        "end": 358,
        "startLoc": {
          "line": 314,
          "column": 37,
          "position": 2414
        },
        "endLoc": {
          "line": 358,
          "column": 7,
          "position": 2752
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 138,
        "end": 245,
        "startLoc": {
          "line": 138,
          "column": 33,
          "position": 1035
        },
        "endLoc": {
          "line": 245,
          "column": 6,
          "position": 1862
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": ", async () => {\n      const contentId = 'test-content-id';\n      const mockContent = {\n        id: contentId,\n        organizationId: mockOrganizationId,\n        title: 'Test Content',\n        slug: 'test-content',\n        type: 'article',\n        status: 'draft',\n        template: 'default',\n        metadata: {\n          title: 'Test Content',\n          description: 'A test content',\n          tags: ['test'],\n          categories: ['test'],\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        content: 'This is test content',\n        htmlContent: '<p>This is test content</p>',\n        markdownContent: 'This is test content',\n        featuredImage: '/images/test.jpg',\n        images: ['/images/test1.jpg'],\n        attachments: ['/files/test.pdf'],\n        versions: [],\n        currentVersion: '1.0.0',\n        publishedAt: undefined,\n        scheduledAt: undefined,\n        expiresAt: undefined,\n        isPublic: false,\n        isFeatured: false,\n        isSticky: false,\n        allowComments: true,\n        allowSharing: true,\n        workflow: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).contents.set(contentId, mockContent);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const result",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 395,
        "end": 441,
        "startLoc": {
          "line": 395,
          "column": 37,
          "position": 3028
        },
        "endLoc": {
          "line": 441,
          "column": 7,
          "position": 3388
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 138,
        "end": 360,
        "startLoc": {
          "line": 138,
          "column": 33,
          "position": 1035
        },
        "endLoc": {
          "line": 360,
          "column": 8,
          "position": 2774
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": ", async () => {\n      const contentId = 'test-content-id';\n      const mockContent = {\n        id: contentId,\n        organizationId: mockOrganizationId,\n        title: 'Test Content',\n        slug: 'test-content',\n        type: 'article',\n        status: 'draft',\n        template: 'default',\n        metadata: {\n          title: 'Test Content',\n          description: 'A test content',\n          tags: ['test'],\n          categories: ['test'],\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        content: 'This is test content',\n        htmlContent: '<p>This is test content</p>',\n        markdownContent: 'This is test content',\n        featuredImage: '/images/test.jpg',\n        images: ['/images/test1.jpg'],\n        attachments: ['/files/test.pdf'],\n        versions: [],\n        currentVersion: '1.0.0',\n        publishedAt: undefined,\n        scheduledAt: undefined,\n        expiresAt: undefined,\n        isPublic: false,\n        isFeatured: false,\n        isSticky: false,\n        allowComments: true,\n        allowSharing: true,\n        workflow: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).contents.set(contentId, mockContent);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const versionData",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 627,
        "end": 673,
        "startLoc": {
          "line": 627,
          "column": 45,
          "position": 4831
        },
        "endLoc": {
          "line": 673,
          "column": 12,
          "position": 5191
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 138,
        "end": 360,
        "startLoc": {
          "line": 138,
          "column": 33,
          "position": 1035
        },
        "endLoc": {
          "line": 360,
          "column": 8,
          "position": 2774
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": ", async () => {\n      const contentId = 'test-content-id';\n      const mockContent = {\n        id: contentId,\n        organizationId: mockOrganizationId,\n        title: 'Test Content',\n        slug: 'test-content',\n        type: 'article',\n        status: 'draft',\n        template: 'default',\n        metadata: {\n          title: 'Test Content',\n          description: 'A test content',\n          tags: ['test'],\n          categories: ['test'],\n          author: 'Test Author',\n          language: 'es',\n          keywords: ['test'],\n          customFields: {},\n        },\n        content: 'This is test content',\n        htmlContent: '<p>This is test content</p>',\n        markdownContent: 'This is test content',\n        featuredImage: '/images/test.jpg',\n        images: ['/images/test1.jpg'],\n        attachments: ['/files/test.pdf'],\n        versions: [],\n        currentVersion: '1.0.0',\n        publishedAt: undefined,\n        scheduledAt: undefined,\n        expiresAt: undefined,\n        isPublic: false,\n        isFeatured: false,\n        isSticky: false,\n        allowComments: true,\n        allowSharing: true,\n        workflow: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: mockUserId,\n        updatedBy: mockUserId,\n      };\n\n      (service as any).contents.set(contentId, mockContent);\n      mockDb.query.mockResolvedValue({ rows: [] });\n\n      const result = await service.publishContent",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 714,
        "end": 760,
        "startLoc": {
          "line": 714,
          "column": 38,
          "position": 5480
        },
        "endLoc": {
          "line": 760,
          "column": 15,
          "position": 5848
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 138,
        "end": 441,
        "startLoc": {
          "line": 138,
          "column": 33,
          "position": 1035
        },
        "endLoc": {
          "line": 441,
          "column": 14,
          "position": 3396
        }
      }
    },
    {
      "format": "typescript",
      "lines": 36,
      "fragment": "},\n          },\n          content: 'This is content 1',\n          htmlContent: '<p>This is content 1</p>',\n          markdownContent: 'This is content 1',\n          featuredImage: '/images/content1.jpg',\n          images: ['/images/content1-1.jpg'],\n          attachments: ['/files/content1.pdf'],\n          versions: [],\n          currentVersion: '1.0.0',\n          publishedAt: undefined,\n          scheduledAt: undefined,\n          expiresAt: undefined,\n          isPublic: false,\n          isFeatured: false,\n          isSticky: false,\n          allowComments: true,\n          allowSharing: true,\n          workflow: undefined,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          createdBy: mockUserId,\n          updatedBy: mockUserId,\n        },\n        {\n          id: 'content2',\n          organizationId: mockOrganizationId,\n          title: 'Content 2',\n          slug: 'content-2',\n          type: 'blog',\n          status: 'published',\n          template: 'blog',\n          metadata: {\n            title: 'Content 2',\n            description: 'Second content',\n            tags: ['test']",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 866,
        "end": 901,
        "startLoc": {
          "line": 866,
          "column": 13,
          "position": 6692
        },
        "endLoc": {
          "line": 901,
          "column": 2,
          "position": 6941
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 475,
        "end": 510,
        "startLoc": {
          "line": 475,
          "column": 2,
          "position": 3662
        },
        "endLoc": {
          "line": 510,
          "column": 2,
          "position": 3911
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "},\n          },\n          content: 'This is content 2',\n          htmlContent: '<p>This is content 2</p>',\n          markdownContent: 'This is content 2',\n          featuredImage: '/images/content2.jpg',\n          images: ['/images/content2-1.jpg'],\n          attachments: ['/files/content2.pdf'],\n          versions: [],\n          currentVersion: '1.0.0',\n          publishedAt: new Date(),\n          scheduledAt: undefined,\n          expiresAt: undefined,\n          isPublic: true,\n          isFeatured: false,\n          isSticky: false,\n          allowComments: true,\n          allowSharing: true,\n          workflow: undefined,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          createdBy: mockUserId,\n          updatedBy: mockUserId,\n        },\n      ];\n\n      (service as any).contents.set('content1', mockContents[0]);\n      (service as any).contents.set('content2', mockContents[1]);\n\n      const result",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 916,
        "end": 945,
        "startLoc": {
          "line": 916,
          "column": 13,
          "position": 7047
        },
        "endLoc": {
          "line": 945,
          "column": 7,
          "position": 7277
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/content-management.service.test.ts",
        "start": 515,
        "end": 544,
        "startLoc": {
          "line": 515,
          "column": 2,
          "position": 3954
        },
        "endLoc": {
          "line": 544,
          "column": 13,
          "position": 4184
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ", features: ['feature1'], dataQuality: 0.95, lastUpdated: new Date() }, hyperparameters: {}, deployment: { environment: 'production', replicas: 3, resources: { cpu: '100m', memory: '256Mi' }, scaling: { minReplicas: 1, maxReplicas: 10, targetUtilization: 70 } }, monitoring: { enabled: true, alerts: [], metrics: [], thresholds: {} } },\n          created_at: new Date(),\n          updated_at: new Date(),\n          deployed_at: new Date(),\n          archived_at: null\n        }\n      ]",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 212,
        "end": 218,
        "startLoc": {
          "line": 212,
          "column": 5,
          "position": 1770
        },
        "endLoc": {
          "line": 218,
          "column": 2,
          "position": 1947
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 152,
        "end": 175,
        "startLoc": {
          "line": 152,
          "column": 6,
          "position": 1148
        },
        "endLoc": {
          "line": 175,
          "column": 2,
          "position": 1341
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": ",\n        type: 'classification',\n        algorithm: 'neural_network',\n        version: '1.0.0',\n        status: 'production',\n        performance: {\n          accuracy: 0.95,\n          precision: 0.92,\n          recall: 0.89,\n          f1Score: 0.90,\n          latency: 45,\n          throughput: 1200,\n          memoryUsage: 256,\n          cpuUsage: 15,\n          lastEvaluated: new Date(),\n          evaluationCount: 1\n        },\n        metadata: {\n          trainingData: { size: 1000, features: ['feature1'], dataQuality: 0.95, lastUpdated: new Date() },\n          hyperparameters: {},\n          deployment: { environment: 'production', replicas: 3, resources: { cpu: '100m', memory: '256Mi' }, scaling: { minReplicas: 1, maxReplicas: 10, targetUtilization: 70 } },\n          monitoring: { enabled: true, alerts: [], metrics: [], thresholds: {} }\n        },\n        created_at: new Date(),\n        updated_at: new Date(),\n        deployed_at: new Date(),\n        archived_at: null\n      };\n\n      vi",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 249,
        "end": 278,
        "startLoc": {
          "line": 249,
          "column": 15,
          "position": 2229
        },
        "endLoc": {
          "line": 278,
          "column": 3,
          "position": 2541
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 206,
        "end": 177,
        "startLoc": {
          "line": 206,
          "column": 14,
          "position": 1653
        },
        "endLoc": {
          "line": 177,
          "column": 7,
          "position": 1345
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ", async () => {\n      const mockModel = {\n        id: 'model_123',\n        name: 'Test Model',\n        description: 'A test model',\n        type: 'classification',\n        algorithm: 'neural_network',\n        version: '1.0.0',\n        status: 'production',\n        performance: { accuracy: 0.95, precision: 0.92, recall: 0.89, f1Score: 0.90, latency: 45, throughput: 1200, memoryUsage: 256, cpuUsage: 15, lastEvaluated: new Date(), evaluationCount: 1 },\n        metadata: { trainingData: { size: 1000, features: ['feature1'], dataQuality: 0.95, lastUpdated: new Date() }, hyperparameters: {}, deployment: { environment: 'production', replicas: 3, resources: { cpu: '100m', memory: '256Mi' }, scaling: { minReplicas: 1, maxReplicas: 10, targetUtilization: 70 } }, monitoring: { enabled: true, alerts: [], metrics: [], thresholds: {} } },\n        createdAt",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 296,
        "end": 307,
        "startLoc": {
          "line": 296,
          "column": 42,
          "position": 2688
        },
        "endLoc": {
          "line": 307,
          "column": 10,
          "position": 2979
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 245,
        "end": 213,
        "startLoc": {
          "line": 245,
          "column": 34,
          "position": 2190
        },
        "endLoc": {
          "line": 213,
          "column": 11,
          "position": 1905
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "= {\n        id: 'model_123',\n        name: 'Test Model',\n        description: 'A test model',\n        type: 'classification',\n        algorithm: 'neural_network',\n        version: '1.0.0',\n        status: 'production',\n        performance: { accuracy: 0.95, precision: 0.92, recall: 0.89, f1Score: 0.90, latency: 45, throughput: 1200, memoryUsage: 256, cpuUsage: 15, lastEvaluated: new Date(), evaluationCount: 1 },\n        metadata: { trainingData: { size: 1000, features: ['feature1'], dataQuality: 0.95, lastUpdated: new Date() }, hyperparameters: {}, deployment: { environment: 'production', replicas: 3, resources: { cpu: '100m', memory: '256Mi' }, scaling: { minReplicas: 1, maxReplicas: 10, targetUtilization: 70 } }, monitoring: { enabled: true, alerts: [], metrics: [], thresholds: {} } },\n        created_at: new Date('2024-01-01'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 612,
        "end": 622,
        "startLoc": {
          "line": 612,
          "column": 2,
          "position": 6142
        },
        "endLoc": {
          "line": 622,
          "column": 13,
          "position": 6424
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 246,
        "end": 213,
        "startLoc": {
          "line": 246,
          "column": 2,
          "position": 2206
        },
        "endLoc": {
          "line": 213,
          "column": 2,
          "position": 1912
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "= {\n        id: 'deployment_123',\n        model_id: 'model_123',\n        environment: 'production',\n        status: 'active',\n        replicas: 3,\n        target_replicas: 3,\n        resources: { cpu: '200m', memory: '512Mi' },\n        endpoints: [{ id: 'endpoint_1', name: 'prediction', url: 'https://api.example.com/predict', method: 'POST', authentication: 'api_key', rateLimit: { requests: 1000, window: 3600 }, version: '1.0.0', status: 'active', lastHealthCheck: new Date() }],\n        health: { status: 'healthy', uptime: 99.9, responseTime: 45, errorRate: 0.01, lastCheck: new Date(), checks: [] },\n        created_at: new Date('2024-01-01'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 647,
        "end": 657,
        "startLoc": {
          "line": 647,
          "column": 2,
          "position": 6729
        },
        "endLoc": {
          "line": 657,
          "column": 13,
          "position": 6933
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/ai-model-management.service.test.ts",
        "start": 362,
        "end": 372,
        "startLoc": {
          "line": 362,
          "column": 2,
          "position": 3467
        },
        "endLoc": {
          "line": 372,
          "column": 2,
          "position": 3671
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "const status = await service.getDeploymentStatus();\n    \n    expect(status).toBeDefined();\n    expect(typeof status.activeDeployments).toBe('number');\n    expect(typeof status.successfulDeployments).toBe('number');\n    expect(typeof status.failedDeployments).toBe('number');\n    expect(typeof status.rollbackCount).toBe('number');\n    expect(['HEALTHY', 'DEGRADED', 'UNHEALTHY']).toContain(status.healthStatus);\n    expect(typeof status.averageDeploymentTime).toBe('number');\n  });\n\n  it('should generate deployment report'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/project-completion-deployment.service.simple.test.ts",
        "start": 110,
        "end": 121,
        "startLoc": {
          "line": 110,
          "column": 5,
          "position": 1097
        },
        "endLoc": {
          "line": 121,
          "column": 36,
          "position": 1236
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/project-completion-deployment.service.test.ts",
        "start": 342,
        "end": 353,
        "startLoc": {
          "line": 342,
          "column": 7,
          "position": 3041
        },
        "endLoc": {
          "line": 353,
          "column": 42,
          "position": 3179
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "const report = await service.generateDeploymentReport('daily');\n    \n    expect(report).toBeDefined();\n    expect(report.period).toBe('daily');\n    expect(report.generatedAt).toBeInstanceOf(Date);\n    expect(report.summary).toBeDefined();\n    expect(Array.isArray(report.deployments)).toBe(true);\n    expect(Array.isArray(report.healthChecks)).toBe(true);\n    expect(Array.isArray(report.recommendations)).toBe(true);\n  });\n}",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/project-completion-deployment.service.simple.test.ts",
        "start": 138,
        "end": 148,
        "startLoc": {
          "line": 138,
          "column": 5,
          "position": 1395
        },
        "endLoc": {
          "line": 148,
          "column": 2,
          "position": 1527
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/project-completion-deployment.service.test.ts",
        "start": 354,
        "end": 365,
        "startLoc": {
          "line": 354,
          "column": 7,
          "position": 3192
        },
        "endLoc": {
          "line": 365,
          "column": 3,
          "position": 3325
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "const logData = {\n      level: 'INFO' as const,\n      message: 'Test log message',\n      service: 'test-service',\n      environment: 'test',\n      context: { test: 'value' },\n      userId: 'user-123',\n      organizationId: 'org-456'\n    };\n\n    const logEntry = await service.writeLog(logData);\n    \n    expect(logEntry).toBeDefined();\n    expect(logEntry.id).toBeDefined();\n    expect(logEntry.timestamp).toBeInstanceOf(Date);\n    expect(logEntry.level).toBe('INFO');\n    expect(logEntry.message).toBe('Test log message');\n    expect(logEntry.service).toBe('test-service');\n    expect(logEntry.environment).toBe('test');\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/centralized-logging.service.simple.test.ts",
        "start": 68,
        "end": 87,
        "startLoc": {
          "line": 68,
          "column": 5,
          "position": 617
        },
        "endLoc": {
          "line": 87,
          "column": 2,
          "position": 803
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/centralized-logging.service.test.ts",
        "start": 47,
        "end": 66,
        "startLoc": {
          "line": 47,
          "column": 7,
          "position": 340
        },
        "endLoc": {
          "line": 66,
          "column": 7,
          "position": 525
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ",\n        type: 'database' as const,\n        source: {\n          type: 'database' as const,\n          includeData: true,\n          includeSchema: true\n        },\n        destination: {\n          type: 'local' as const,\n          path: './backups',\n          compression: true,\n          encryption: true\n        },\n        schedule: {\n          enabled: false,\n          timezone: 'UTC',\n          retention: {\n            days: 30,\n            maxBackups: 100\n          }\n        }\n      };\n\n      const validation = await service.validateBackupConfig(config);\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors.some",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/backup-recovery.service.test.ts",
        "start": 204,
        "end": 229,
        "startLoc": {
          "line": 204,
          "column": 20,
          "position": 1687
        },
        "endLoc": {
          "line": 229,
          "column": 5,
          "position": 1863
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/backup-recovery.service.test.ts",
        "start": 173,
        "end": 198,
        "startLoc": {
          "line": 173,
          "column": 3,
          "position": 1439
        },
        "endLoc": {
          "line": 198,
          "column": 7,
          "position": 1615
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "();\n      \n      expect(stats).toHaveProperty('totalScans');\n      expect(stats).toHaveProperty('cleanScans');\n      expect(stats).toHaveProperty('infectedScans');\n      expect(stats).toHaveProperty('quarantinedItems');\n      expect(stats).toHaveProperty('threatsDetected');\n      expect(stats).toHaveProperty('lastScan');\n      expect(stats).toHaveProperty('scanSuccessRate');\n      expect(stats).toHaveProperty('averageScanTime');\n      expect(stats).toHaveProperty('topThreats');\n      expect(stats).toHaveProperty('moduleStats');\n    });\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/antivirus-global.service.test.ts",
        "start": 185,
        "end": 198,
        "startLoc": {
          "line": 185,
          "column": 9,
          "position": 1790
        },
        "endLoc": {
          "line": 198,
          "column": 2,
          "position": 1922
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/antivirus-global.service.test.ts",
        "start": 72,
        "end": 85,
        "startLoc": {
          "line": 72,
          "column": 12,
          "position": 684
        },
        "endLoc": {
          "line": 85,
          "column": 3,
          "position": 815
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": ",\n        actions: []\n      };\n\n      const createdRule = await service.createAlertRule(ruleData);\n      const retrievedRule = await service.getAlertRule(createdRule.id);\n\n      expect(retrievedRule).toBeDefined();\n      expect(retrievedRule?.id).toBe(createdRule.id);\n      expect(retrievedRule?.name).toBe('Test Alert Rule 2');\n    });\n\n    it('should return null for non-existent alert rule', async () => {\n      const rule = await service.getAlertRule('non-existent-id');\n      expect(rule).toBeNull();\n    });\n\n    it('should list all alert rules', async () => {\n      const rule1 = await service.createAlertRule({\n        name: 'Rule 1',\n        description: 'Description 1',\n        metric",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-metrics-alerts.service.test.ts",
        "start": 130,
        "end": 151,
        "startLoc": {
          "line": 130,
          "column": 4,
          "position": 1166
        },
        "endLoc": {
          "line": 151,
          "column": 7,
          "position": 1360
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/centralized-logging.service.test.ts",
        "start": 193,
        "end": 214,
        "startLoc": {
          "line": 193,
          "column": 5,
          "position": 1592
        },
        "endLoc": {
          "line": 214,
          "column": 8,
          "position": 1786
        }
      }
    },
    {
      "format": "typescript",
      "lines": 38,
      "fragment": ", async () => {\n      const jobData = {\n        pipelineId: 'test-pipeline',\n        stageId: 'test-stage',\n        environmentId: 'test-env',\n        strategyId: 'test-strategy',\n        status: 'pending' as const,\n        trigger: {\n          type: 'manual' as const,\n          triggeredBy: 'test-user',\n          triggeredAt: new Date()\n        },\n        progress: {\n          currentStep: 0,\n          totalSteps: 3,\n          currentStepName: 'Initializing',\n          percentage: 0\n        },\n        artifacts: {},\n        metrics: {\n          startTime: new Date(),\n          resourceUsage: {\n            cpu: 0,\n            memory: 0,\n            disk: 0\n          },\n          deploymentMetrics: {\n            instancesDeployed: 0,\n            instancesHealthy: 0,\n            instancesUnhealthy: 0,\n            rollbackTriggered: false\n          }\n        },\n        logs: []\n      };\n\n      const job = await service.createJob(jobData);\n      const",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-deployment-automation.service.test.ts",
        "start": 293,
        "end": 330,
        "startLoc": {
          "line": 293,
          "column": 27,
          "position": 2363
        },
        "endLoc": {
          "line": 330,
          "column": 6,
          "position": 2622
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-deployment-automation.service.test.ts",
        "start": 243,
        "end": 281,
        "startLoc": {
          "line": 243,
          "column": 33,
          "position": 1966
        },
        "endLoc": {
          "line": 281,
          "column": 7,
          "position": 2226
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": ",\n        type: 'bpmn',\n        status: 'active',\n        version: 1,\n        definition: {\n          elements: [\n            { id: 'start', type: 'startEvent', name: 'Start' },\n            { id: 'end', type: 'endEvent', name: 'End' }\n          ],\n          flows: [\n            { id: 'f1', source: 'start', target: 'end' }\n          ],\n          startElement: 'start',\n          endElements: ['end']\n        },\n        actions: [],\n        metadata: {\n          author: 'Test',\n          description: 'Test workflow'\n        }\n      };\n\n      const createResponse = await request(app)\n        .post(baseUrl)\n        .send(newWorkflow)\n        .expect(201);\n\n      const workflowId = createResponse.body.data.id;\n\n      // Eliminar el workflow",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/workflows.integration.test.ts",
        "start": 207,
        "end": 236,
        "startLoc": {
          "line": 207,
          "column": 23,
          "position": 1963
        },
        "endLoc": {
          "line": 236,
          "column": 24,
          "position": 2188
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/workflows.integration.test.ts",
        "start": 164,
        "end": 193,
        "startLoc": {
          "line": 164,
          "column": 23,
          "position": 1588
        },
        "endLoc": {
          "line": 193,
          "column": 26,
          "position": 1813
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ",\n        startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n        endDate: new Date().toISOString(),\n        generatedBy: 'test-user'\n      };\n\n      const response = await request(app)\n        .post('/v1/inventory-kardex/reports')\n        .send(reportData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeDefined();\n      expect(response.body.data.reportType",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/inventory-kardex.integration.test.ts",
        "start": 531,
        "end": 544,
        "startLoc": {
          "line": 531,
          "column": 12,
          "position": 5740
        },
        "endLoc": {
          "line": 544,
          "column": 11,
          "position": 5885
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/inventory-kardex.integration.test.ts",
        "start": 504,
        "end": 517,
        "startLoc": {
          "line": 504,
          "column": 15,
          "position": 5402
        },
        "endLoc": {
          "line": 517,
          "column": 3,
          "position": 5547
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ",\n        startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n        endDate: new Date().toISOString(),\n        generatedBy: 'test-user'\n      };\n\n      const response = await request(app)\n        .post('/v1/inventory-kardex/reports')\n        .send(reportData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeDefined();\n      expect(response.body.data.reportType).toBe('abc_analysis'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/inventory-kardex.integration.test.ts",
        "start": 552,
        "end": 565,
        "startLoc": {
          "line": 552,
          "column": 15,
          "position": 5980
        },
        "endLoc": {
          "line": 565,
          "column": 15,
          "position": 6130
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/inventory-kardex.integration.test.ts",
        "start": 504,
        "end": 544,
        "startLoc": {
          "line": 504,
          "column": 15,
          "position": 5402
        },
        "endLoc": {
          "line": 544,
          "column": 12,
          "position": 5890
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ")\n        .set(baseHeaders)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeDefined();\n      expect(Array.isArray(response.body.data)).toBe(true);\n      expect(response.body.count).toBeDefined();\n      expect(response.body.total).toBeDefined();\n      expect(response.body.filters).toBeDefined();\n    });\n\n    it('should filter interactions by type'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/interactions.integration.test.ts",
        "start": 143,
        "end": 155,
        "startLoc": {
          "line": 143,
          "column": 19,
          "position": 1238
        },
        "endLoc": {
          "line": 155,
          "column": 37,
          "position": 1362
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/sepa.integration.test.ts",
        "start": 164,
        "end": 176,
        "startLoc": {
          "line": 164,
          "column": 24,
          "position": 1485
        },
        "endLoc": {
          "line": 176,
          "column": 43,
          "position": 1609
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ")\n        .set(baseHeaders)\n        .expect(200);\n\n      expect(response.headers['x-est-cost-eur']).toBeDefined();\n      expect(response.headers['x-budget-pct']).toBeDefined();\n      expect(response.headers['x-latency-ms']).toBeDefined();\n      expect(response.headers['x-route']).toBeDefined();\n      expect(response.headers['x-correlation-id']).toBeDefined();\n    });\n\n    it('should work without organization headers (using defaults)', async () => {\n      const response = await request(app)\n        .get('/v1/interactions'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/interactions.integration.test.ts",
        "start": 502,
        "end": 515,
        "startLoc": {
          "line": 502,
          "column": 19,
          "position": 4658
        },
        "endLoc": {
          "line": 515,
          "column": 19,
          "position": 4795
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/sepa.integration.test.ts",
        "start": 591,
        "end": 604,
        "startLoc": {
          "line": 591,
          "column": 24,
          "position": 5827
        },
        "endLoc": {
          "line": 604,
          "column": 24,
          "position": 5964
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ")\n        .set(baseHeaders)\n        .send({ updates })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.updated).toBe(2);\n      expect(response.body.data.failed).toBe(0);\n      expect(response.body.data.errors).toEqual([]);\n    });\n\n    it('should handle partial failures', async () => {\n      const updates = [\n        {\n          id: dealIds",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/deals.integration.test.ts",
        "start": 514,
        "end": 528,
        "startLoc": {
          "line": 514,
          "column": 24,
          "position": 4745
        },
        "endLoc": {
          "line": 528,
          "column": 8,
          "position": 4882
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/interactions.integration.test.ts",
        "start": 441,
        "end": 455,
        "startLoc": {
          "line": 441,
          "column": 31,
          "position": 4086
        },
        "endLoc": {
          "line": 455,
          "column": 15,
          "position": 4223
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ")\n        .set(baseHeaders)\n        .send({ updates })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.updated).toBe(1);\n      expect(response.body.data.failed).toBe(1);\n      expect(response.body.data.errors.length).toBe(1);\n    });\n\n    it('should return error for empty updates array', async () => {\n      const response = await request(app)\n        .post('/v1/deals/bulk-update'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/deals.integration.test.ts",
        "start": 538,
        "end": 551,
        "startLoc": {
          "line": 538,
          "column": 24,
          "position": 4955
        },
        "endLoc": {
          "line": 551,
          "column": 24,
          "position": 5095
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/interactions.integration.test.ts",
        "start": 465,
        "end": 478,
        "startLoc": {
          "line": 465,
          "column": 31,
          "position": 4296
        },
        "endLoc": {
          "line": 478,
          "column": 31,
          "position": 4436
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ")\n        .set(baseHeaders)\n        .expect(200);\n\n      expect(response.headers['x-est-cost-eur']).toBeDefined();\n      expect(response.headers['x-budget-pct']).toBeDefined();\n      expect(response.headers['x-latency-ms']).toBeDefined();\n      expect(response.headers['x-route']).toBeDefined();\n      expect(response.headers['x-correlation-id']).toBeDefined();\n    });\n\n    it('should work without organization headers (using defaults)', async () => {\n      const response = await request(app)\n        .get('/v1/deals'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/deals.integration.test.ts",
        "start": 575,
        "end": 588,
        "startLoc": {
          "line": 575,
          "column": 12,
          "position": 5317
        },
        "endLoc": {
          "line": 588,
          "column": 12,
          "position": 5454
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/sepa.integration.test.ts",
        "start": 591,
        "end": 604,
        "startLoc": {
          "line": 591,
          "column": 24,
          "position": 5827
        },
        "endLoc": {
          "line": 604,
          "column": 24,
          "position": 5964
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ");\n    });\n  });\n\n  describe('Health Check', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get(`${baseUrl}/health`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('status');\n      expect(response.body.data).toHaveProperty('timestamp');\n      expect(response.body.data).toHaveProperty('stats');\n      expect",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/configuration.integration.test.ts",
        "start": 410,
        "end": 424,
        "startLoc": {
          "line": 410,
          "column": 7,
          "position": 3758
        },
        "endLoc": {
          "line": 424,
          "column": 7,
          "position": 3899
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/workflows.integration.test.ts",
        "start": 577,
        "end": 591,
        "startLoc": {
          "line": 577,
          "column": 2,
          "position": 5309
        },
        "endLoc": {
          "line": 591,
          "column": 2,
          "position": 5450
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ")\n        .query({ limit: 10, offset: 0 })\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(Array.isArray(response.body.data)).toBe(true);\n      expect(response.body).toHaveProperty('metadata');\n      expect(response.body.metadata).toHaveProperty('count');\n      expect(response.body.metadata).toHaveProperty('limit', 10);\n      expect(response.body.metadata).toHaveProperty('offset', 0);\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts",
        "start": 319,
        "end": 331,
        "startLoc": {
          "line": 319,
          "column": 7,
          "position": 3042
        },
        "endLoc": {
          "line": 331,
          "column": 2,
          "position": 3208
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts",
        "start": 120,
        "end": 132,
        "startLoc": {
          "line": 120,
          "column": 11,
          "position": 1057
        },
        "endLoc": {
          "line": 132,
          "column": 7,
          "position": 1223
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ", async () => {\n      // First create a dataset and job\n      const datasetResponse = await request(app)\n        .post(`${baseUrl}/datasets`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          name: 'Test Dataset',\n          type: 'classification',\n          size: 1000,\n          features: ['feature1'],\n          metadata: { source: 'test', format: 'csv' }\n        })\n        .expect(201);\n\n      const jobResponse = await request(app)\n        .post(`${baseUrl}/jobs`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          name: 'Test Job',\n          datasetId: datasetResponse.body.data.id,\n          modelType: 'neural_network'\n        })\n        .expect(201);\n\n      const jobId = jobResponse.body.data.id;\n\n      // Start the job",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts",
        "start": 391,
        "end": 417,
        "startLoc": {
          "line": 391,
          "column": 43,
          "position": 3758
        },
        "endLoc": {
          "line": 417,
          "column": 17,
          "position": 3981
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts",
        "start": 341,
        "end": 367,
        "startLoc": {
          "line": 341,
          "column": 37,
          "position": 3283
        },
        "endLoc": {
          "line": 367,
          "column": 15,
          "position": 3506
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "const datasetResponse = await request(app)\n        .post(`${baseUrl}/datasets`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          name: 'Test Dataset',\n          type: 'classification',\n          size: 1000,\n          features: ['feature1'],\n          metadata: { source: 'test', format: 'csv' }\n        })\n        .expect(201);\n\n      const jobResponse = await request(app)\n        .post(`${baseUrl}/jobs`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          name: 'Test Job',\n          datasetId: datasetResponse.body.data.id,\n          modelType: 'neural_network'\n        })\n        .expect(201);\n\n      const jobId = jobResponse.body.data.id;\n\n      // Start the job\n      await",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts",
        "start": 442,
        "end": 467,
        "startLoc": {
          "line": 442,
          "column": 7,
          "position": 4234
        },
        "endLoc": {
          "line": 467,
          "column": 6,
          "position": 4445
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-training.integration.test.ts",
        "start": 343,
        "end": 418,
        "startLoc": {
          "line": 343,
          "column": 7,
          "position": 3298
        },
        "endLoc": {
          "line": 418,
          "column": 6,
          "position": 3984
        }
      }
    },
    {
      "format": "typescript",
      "lines": 34,
      "fragment": "import { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport request from 'supertest';\nimport { app } from '../../../index.js';\n\n// Mock de autenticación\nconst mockAuth = {\n  id: 'user-123',\n  email: 'test@example.com',\n  organizationId: 'org-123'\n};\n\n// Mock del middleware de autenticación\nvi.mock('../../../middleware/auth.middleware.js', () => ({\n  authenticateToken: (req: any, res: any, next: any) => {\n    req.user = mockAuth;\n    next();\n  }\n}));\n\n// Mock del middleware de rate limiting\nvi.mock('../../../middleware/rate-limiter.middleware.js', () => ({\n  rateLimiter: (req: any, res: any, next: any) => {\n    next();\n  }\n}));\n\n// Mock del middleware de validación\nvi.mock('../../../middleware/validation.middleware.js', () => ({\n  validateRequest: (schema: any) => (req: any, res: any, next: any) => {\n    next();\n  }\n}));\n\ndescribe('AI Performance Optimization API Integration Tests'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-performance-optimization.integration.test.ts",
        "start": 1,
        "end": 34,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 34,
          "column": 52,
          "position": 280
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/ai-security-compliance.integration.test.ts",
        "start": 1,
        "end": 34,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 34,
          "column": 49,
          "position": 280
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ";\n\n// Mock dependencies\njest.mock('@econeura/shared/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn()\n  }\n}));\n\njest.mock('@econeura/shared/metrics', () => ({\n  prometheusMetrics: {\n    counter: jest.fn(() => ({\n      inc: jest.fn()\n    })),\n    histogram: jest.fn(() => ({\n      observe: jest.fn()\n    })),\n    gauge: jest.fn(() => ({\n      set: jest.fn()\n    }))\n  }\n}));\n\ndescribe('Advanced Security Framework API Integration Tests'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/advanced-security-framework.integration.test.ts",
        "start": 3,
        "end": 28,
        "startLoc": {
          "line": 3,
          "column": 20,
          "position": 48
        },
        "endLoc": {
          "line": 28,
          "column": 52,
          "position": 242
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-security-framework.service.test.ts",
        "start": 2,
        "end": 27,
        "startLoc": {
          "line": 2,
          "column": 54,
          "position": 36
        },
        "endLoc": {
          "line": 27,
          "column": 35,
          "position": 230
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "[0];\n        expect(rule.id).toBeDefined();\n        expect(rule.name).toBeDefined();\n        expect(rule.description).toBeDefined();\n        expect(rule.enabled).toBeDefined();\n        expect(rule.conditions).toBeDefined();\n        expect(rule.actions).toBeDefined();\n        expect(rule.severity).toBeDefined();\n        expect(rule.cooldownMinutes).toBeDefined();\n      }\n    });\n  });\n\n  describe('POST /v1/advanced-observability/alert-rules'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/advanced-observability.integration.test.ts",
        "start": 363,
        "end": 376,
        "startLoc": {
          "line": 363,
          "column": 5,
          "position": 3383
        },
        "endLoc": {
          "line": 376,
          "column": 46,
          "position": 3509
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/services/advanced-observability.service.test.ts",
        "start": 260,
        "end": 273,
        "startLoc": {
          "line": 260,
          "column": 6,
          "position": 2540
        },
        "endLoc": {
          "line": 273,
          "column": 18,
          "position": 2666
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ");\n      expect(event.userId).toBe(eventData.userId);\n      expect(event.organizationId).toBe(eventData.organizationId);\n      expect(event.action).toBe(eventData.action);\n      expect(event.resource).toBe(eventData.resource);\n      expect(event.severity).toBe(eventData.severity);\n      expect(event.riskScore).toBe(eventData.riskScore);\n    });\n\n    it('should handle minimal event data', async () => {\n      const eventData = {\n        userId: 'user-002',\n        organizationId: 'org-001',\n        action: 'create',\n        resource: 'document',\n        severity: 'low',",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/advanced-audit-compliance.integration.test.ts",
        "start": 45,
        "end": 60,
        "startLoc": {
          "line": 45,
          "column": 12,
          "position": 429
        },
        "endLoc": {
          "line": 60,
          "column": 2,
          "position": 591
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-audit-compliance.service.test.ts",
        "start": 38,
        "end": 53,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 314
        },
        "endLoc": {
          "line": 53,
          "column": 3,
          "position": 477
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ");\n      expect(report.name).toBe(reportData.name);\n      expect(report.description).toBe(reportData.description);\n      expect(report.organizationId).toBe(reportData.organizationId);\n      expect(report.period).toEqual(reportData.period);\n      expect(report.filters).toEqual(reportData.filters);\n      expect(report.generatedBy).toBe(reportData.generatedBy);\n      expect(report.generatedAt).toBeDefined();\n      \n      // Check metrics structure\n      expect(report.metrics).toHaveProperty('totalEvents');\n      expect(report.metrics).toHaveProperty('violations');\n      expect(report.metrics).toHaveProperty('riskScore');\n      expect(report.metrics).toHaveProperty('complianceScore');\n      expect(report.metrics).toHaveProperty('topActions');\n      expect(report.metrics).toHaveProperty('topResources');\n      expect(report.metrics).toHaveProperty('severityDistribution');\n      expect(report.metrics).toHaveProperty('frameworkCompliance');\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/advanced-audit-compliance.integration.test.ts",
        "start": 397,
        "end": 415,
        "startLoc": {
          "line": 397,
          "column": 5,
          "position": 4001
        },
        "endLoc": {
          "line": 415,
          "column": 2,
          "position": 4231
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-audit-compliance.service.test.ts",
        "start": 260,
        "end": 279,
        "startLoc": {
          "line": 260,
          "column": 2,
          "position": 2471
        },
        "endLoc": {
          "line": 279,
          "column": 7,
          "position": 2703
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ";\n      expect(metrics).toHaveProperty('totalEvents');\n      expect(metrics).toHaveProperty('totalViolations');\n      expect(metrics).toHaveProperty('openViolations');\n      expect(metrics).toHaveProperty('complianceScore');\n      expect(metrics).toHaveProperty('riskScore');\n      expect(metrics).toHaveProperty('frameworkCompliance');\n      expect(metrics).toHaveProperty('recentViolations');\n      \n      expect(typeof metrics.totalEvents).toBe('number');\n      expect(typeof metrics.totalViolations).toBe('number');\n      expect(typeof metrics.openViolations).toBe('number');\n      expect(typeof metrics.complianceScore).toBe('number');\n      expect(typeof metrics.riskScore).toBe('number');\n      expect(typeof metrics.frameworkCompliance).toBe('object');\n      expect(Array.isArray(metrics.recentViolations)).toBe(true);\n    });\n  });\n\n  describe('GET /health'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/advanced-audit-compliance.integration.test.ts",
        "start": 470,
        "end": 489,
        "startLoc": {
          "line": 470,
          "column": 8,
          "position": 4806
        },
        "endLoc": {
          "line": 489,
          "column": 14,
          "position": 5023
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/unit/lib/advanced-audit-compliance.service.test.ts",
        "start": 312,
        "end": 331,
        "startLoc": {
          "line": 312,
          "column": 2,
          "position": 3114
        },
        "endLoc": {
          "line": 331,
          "column": 31,
          "position": 3331
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ");\n    });\n  });\n\n  describe('GET /health', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get(`${basePath}/health`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.data).toHaveProperty('status');\n      expect(response.body.data).toHaveProperty('checks');\n      expect(response.body.data).toHaveProperty('rulesCount'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/api/advanced-audit-compliance.integration.test.ts",
        "start": 485,
        "end": 499,
        "startLoc": {
          "line": 485,
          "column": 5,
          "position": 5006
        },
        "endLoc": {
          "line": 499,
          "column": 13,
          "position": 5157
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/api/companies-taxonomy.integration.test.ts",
        "start": 247,
        "end": 261,
        "startLoc": {
          "line": 247,
          "column": 10,
          "position": 2640
        },
        "endLoc": {
          "line": 261,
          "column": 18,
          "position": 2791
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "name: z.string().min(1).max(100),\n          sku: z.string().min(1).max(100),\n          price: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }),\n          compareAtPrice: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }).optional(),\n          costPrice: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }).optional(),\n          inventory: z.object({\n            quantity: z.number().int().min(0),\n            reserved: z.number().int().min(0),\n            available: z.number().int().min(0)\n          }),\n          attributes: z.record(z.any()).default({}),\n          isActive: z.boolean().default(true)\n        })).optional()\n      })\n    }),\n    productController.updateProduct",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 167,
        "end": 191,
        "startLoc": {
          "line": 167,
          "column": 11,
          "position": 2300
        },
        "endLoc": {
          "line": 191,
          "column": 14,
          "position": 2619
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 77,
        "end": 101,
        "startLoc": {
          "line": 77,
          "column": 11,
          "position": 1002
        },
        "endLoc": {
          "line": 101,
          "column": 14,
          "position": 1321
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ",\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.enum(['name', 'sku', 'category', 'brand', 'createdAt', 'updatedAt']).default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        type: z.enum(['physical', 'digital', 'service', 'subscription', 'bundle']).optional(),\n        status: z.enum(['active', 'inactive', 'discontinued', 'draft', 'archived']).optional(),\n        category: z.string().optional(),\n        brand: z.string().optional(),\n        supplier: z.string().optional(),\n        minPrice: z.coerce.number().min(0).optional(),\n        maxPrice: z.coerce.number().min(0).optional(),\n        inStock: z.coerce.boolean().optional(),\n        lowStock: z.coerce.boolean().optional()\n      })\n    }),\n    productController.searchProducts",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 245,
        "end": 267,
        "startLoc": {
          "line": 245,
          "column": 40,
          "position": 3174
        },
        "endLoc": {
          "line": 267,
          "column": 15,
          "position": 3549
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 219,
        "end": 241,
        "startLoc": {
          "line": 219,
          "column": 33,
          "position": 2778
        },
        "endLoc": {
          "line": 241,
          "column": 26,
          "position": 3153
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ")\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.enum(['name', 'sku', 'category', 'brand', 'createdAt', 'updatedAt']).default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 288,
        "end": 295,
        "startLoc": {
          "line": 288,
          "column": 2,
          "position": 3684
        },
        "endLoc": {
          "line": 295,
          "column": 2,
          "position": 3816
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 222,
        "end": 228,
        "startLoc": {
          "line": 222,
          "column": 2,
          "position": 2807
        },
        "endLoc": {
          "line": 228,
          "column": 2,
          "position": 2937
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "])\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.enum(['name', 'sku', 'category', 'brand', 'createdAt', 'updatedAt']).default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    async (req, res, next) => {\n      try {\n        const { status",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 328,
        "end": 339,
        "startLoc": {
          "line": 328,
          "column": 11,
          "position": 4117
        },
        "endLoc": {
          "line": 339,
          "column": 7,
          "position": 4285
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 288,
        "end": 299,
        "startLoc": {
          "line": 288,
          "column": 9,
          "position": 3683
        },
        "endLoc": {
          "line": 299,
          "column": 5,
          "position": 3851
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // GET /products/category/:category - Get products by category",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 340,
        "end": 364,
        "startLoc": {
          "line": 340,
          "column": 7,
          "position": 4313
        },
        "endLoc": {
          "line": 364,
          "column": 63,
          "position": 4504
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 300,
        "end": 324,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 3879
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ")\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.enum(['name', 'sku', 'category', 'brand', 'createdAt', 'updatedAt']).default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    async (req, res, next) => {\n      try {\n        const { category",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 368,
        "end": 379,
        "startLoc": {
          "line": 368,
          "column": 4,
          "position": 4547
        },
        "endLoc": {
          "line": 379,
          "column": 9,
          "position": 4714
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 222,
        "end": 299,
        "startLoc": {
          "line": 222,
          "column": 2,
          "position": 2807
        },
        "endLoc": {
          "line": 299,
          "column": 5,
          "position": 3851
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // GET /products/brand/:brand - Get products by brand",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 380,
        "end": 404,
        "startLoc": {
          "line": 380,
          "column": 9,
          "position": 4742
        },
        "endLoc": {
          "line": 404,
          "column": 54,
          "position": 4933
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 300,
        "end": 324,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 3879
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": z.string().min(1).max(100)\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.enum(['name', 'sku', 'category', 'brand', 'createdAt', 'updatedAt']).default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    async (req, res, next) => {\n      try {\n        const { brand",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 408,
        "end": 419,
        "startLoc": {
          "line": 408,
          "column": 6,
          "position": 4960
        },
        "endLoc": {
          "line": 419,
          "column": 6,
          "position": 5143
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 368,
        "end": 299,
        "startLoc": {
          "line": 368,
          "column": 9,
          "position": 4531
        },
        "endLoc": {
          "line": 299,
          "column": 5,
          "position": 3851
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // GET /products/supplier/:supplier - Get products by supplier",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 420,
        "end": 444,
        "startLoc": {
          "line": 420,
          "column": 6,
          "position": 5171
        },
        "endLoc": {
          "line": 444,
          "column": 63,
          "position": 5362
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 300,
        "end": 324,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 3879
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": z.string().min(1).max(100)\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.enum(['name', 'sku', 'category', 'brand', 'createdAt', 'updatedAt']).default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    async (req, res, next) => {\n      try {\n        const { supplier",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 448,
        "end": 459,
        "startLoc": {
          "line": 448,
          "column": 9,
          "position": 5389
        },
        "endLoc": {
          "line": 459,
          "column": 9,
          "position": 5572
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 368,
        "end": 299,
        "startLoc": {
          "line": 368,
          "column": 9,
          "position": 4531
        },
        "endLoc": {
          "line": 299,
          "column": 5,
          "position": 3851
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // GET /products/sku/:sku - Get product by SKU",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 460,
        "end": 484,
        "startLoc": {
          "line": 460,
          "column": 9,
          "position": 5600
        },
        "endLoc": {
          "line": 484,
          "column": 47,
          "position": 5791
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 300,
        "end": 324,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 3879
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // GET /products/inventory/out-of-stock - Get products out of stock",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 584,
        "end": 608,
        "startLoc": {
          "line": 584,
          "column": 7,
          "position": 6627
        },
        "endLoc": {
          "line": 608,
          "column": 68,
          "position": 6818
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 300,
        "end": 324,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 3879
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // GET /products/inventory/in-stock - Get products in stock",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 618,
        "end": 642,
        "startLoc": {
          "line": 618,
          "column": 7,
          "position": 6925
        },
        "endLoc": {
          "line": 642,
          "column": 60,
          "position": 7116
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 300,
        "end": 324,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 3879
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "(organizationId as string);\n        \n        res.status(200).json({\n          success: true,\n          data: products.map(product => ({\n            id: product.id.value,\n            name: product.name,\n            sku: product.sku,\n            type: product.type.value,\n            status: product.status.value,\n            category: product.category.value,\n            brand: product.brand?.value,\n            supplier: product.supplier?.value,\n            isActive: product.isActive,\n            createdAt: product.createdAt,\n            updatedAt: product.updatedAt\n          }))\n        });\n      } catch (error) {\n        next(error);\n      }\n    }\n  );\n\n  // ========================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 652,
        "end": 676,
        "startLoc": {
          "line": 652,
          "column": 14,
          "position": 7217
        },
        "endLoc": {
          "line": 676,
          "column": 76,
          "position": 7414
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 618,
        "end": 324,
        "startLoc": {
          "line": 618,
          "column": 17,
          "position": 6919
        },
        "endLoc": {
          "line": 324,
          "column": 57,
          "position": 4070
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": ",\n    authenticate,\n    authorize(['analytics:read']),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        type: z.enum(['sales_forecast', 'demand_prediction', 'churn_prediction', 'revenue_forecast', 'inventory_optimization', 'customer_lifetime_value', 'market_trend', 'risk_assessment']).optional(),\n        status: z.enum(['pending', 'processing', 'completed', 'failed', 'cancelled']).optional(),\n        modelType: z.enum(['linear_regression', 'decision_tree', 'random_forest', 'neural_network', 'time_series', 'clustering', 'classification', 'deep_learning']).optional(),\n        accuracy: z.enum(['low', 'medium', 'high', 'very_high']).optional(),\n        isActive: z.coerce.boolean().optional(),\n        needsRetraining: z.coerce.boolean().optional(),\n        hasPredictions: z.coerce.boolean().optional(),\n        minAccuracy: z.coerce.number().min(0).max(1).optional(),\n        maxAccuracy: z.coerce.number().min(0).max(1).optional(),\n        lastPredictionFrom: z.coerce.date().optional(),\n        lastPredictionTo: z.coerce.date().optional(),\n        nextRetrainFrom: z.coerce.date().optional(),\n        nextRetrainTo: z.coerce.date().optional()\n      })\n    }),\n    predictiveAnalyticsController.searchPredictiveAnalytics",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 144,
        "end": 172,
        "startLoc": {
          "line": 144,
          "column": 40,
          "position": 1885
        },
        "endLoc": {
          "line": 172,
          "column": 26,
          "position": 2380
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 112,
        "end": 140,
        "startLoc": {
          "line": 112,
          "column": 33,
          "position": 1369
        },
        "endLoc": {
          "line": 140,
          "column": 37,
          "position": 1864
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "])\n      }),\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    predictiveAnalyticsController.getAnalyticsByStatus",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 216,
        "end": 226,
        "startLoc": {
          "line": 216,
          "column": 12,
          "position": 2763
        },
        "endLoc": {
          "line": 226,
          "column": 21,
          "position": 2904
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 197,
        "end": 207,
        "startLoc": {
          "line": 197,
          "column": 18,
          "position": 2549
        },
        "endLoc": {
          "line": 207,
          "column": 19,
          "position": 2690
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    predictiveAnalyticsController.getActiveModels",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 234,
        "end": 242,
        "startLoc": {
          "line": 234,
          "column": 7,
          "position": 2946
        },
        "endLoc": {
          "line": 242,
          "column": 16,
          "position": 3078
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 199,
        "end": 207,
        "startLoc": {
          "line": 199,
          "column": 7,
          "position": 2558
        },
        "endLoc": {
          "line": 207,
          "column": 19,
          "position": 2690
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n    authenticate,\n    authorize(['analytics:read']),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    predictiveAnalyticsController.getNeedsRetraining",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 246,
        "end": 258,
        "startLoc": {
          "line": 246,
          "column": 20,
          "position": 3099
        },
        "endLoc": {
          "line": 258,
          "column": 19,
          "position": 3252
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 230,
        "end": 207,
        "startLoc": {
          "line": 230,
          "column": 10,
          "position": 2925
        },
        "endLoc": {
          "line": 207,
          "column": 19,
          "position": 2690
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "productId: z.string().uuid().optional(),\n          description: z.string().min(1).max(500),\n          quantity: z.number().min(0.01),\n          unitPrice: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }),\n          totalPrice: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }),\n          taxRate: z.number().min(0).max(100).optional(),\n          taxAmount: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }).optional(),\n          discountRate: z.number().min(0).max(100).optional(),\n          discountAmount: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }).optional(),\n          notes: z.string().max(500).optional()\n        })).optional",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 101,
        "end": 123,
        "startLoc": {
          "line": 101,
          "column": 11,
          "position": 1386
        },
        "endLoc": {
          "line": 123,
          "column": 9,
          "position": 1707
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 34,
        "end": 56,
        "startLoc": {
          "line": 34,
          "column": 11,
          "position": 365
        },
        "endLoc": {
          "line": 56,
          "column": 4,
          "position": 686
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "),\n          lateFeeRate: z.number().min(0).max(100).optional(),\n          lateFeeAmount: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }).optional(),\n          notes: z.string().max(1000).optional(),\n          footer: z.string().max(1000).optional(),\n          customFields: z.record(z.any()).optional",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 131,
        "end": 139,
        "startLoc": {
          "line": 131,
          "column": 2,
          "position": 1879
        },
        "endLoc": {
          "line": 139,
          "column": 9,
          "position": 2012
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 64,
        "end": 72,
        "startLoc": {
          "line": 64,
          "column": 3,
          "position": 858
        },
        "endLoc": {
          "line": 72,
          "column": 8,
          "position": 991
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "]),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        type: z.enum(['invoice'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 179,
        "end": 190,
        "startLoc": {
          "line": 179,
          "column": 15,
          "position": 2276
        },
        "endLoc": {
          "line": 190,
          "column": 10,
          "position": 2450
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 114,
        "end": 125,
        "startLoc": {
          "line": 114,
          "column": 17,
          "position": 1380
        },
        "endLoc": {
          "line": 125,
          "column": 17,
          "position": 1554
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ").optional(),\n        type: z.enum(['invoice', 'credit_note', 'debit_note', 'proforma', 'quote', 'receipt']).optional(),\n        status: z.enum(['draft', 'sent', 'paid', 'overdue', 'cancelled', 'refunded', 'partially_paid']).optional(),\n        paymentStatus: z.enum(['pending', 'paid', 'partial', 'overdue', 'cancelled']).optional(),\n        companyId: z.string().uuid().optional(),\n        contactId: z.string().uuid().optional(),\n        issueDateFrom",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 189,
        "end": 195,
        "startLoc": {
          "line": 189,
          "column": 4,
          "position": 2434
        },
        "endLoc": {
          "line": 195,
          "column": 14,
          "position": 2579
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 90,
        "end": 96,
        "startLoc": {
          "line": 90,
          "column": 4,
          "position": 1157
        },
        "endLoc": {
          "line": 96,
          "column": 10,
          "position": 1302
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ",\n    authenticate,\n    authorize(['invoice:read']),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        type: z.enum(['invoice', 'credit_note', 'debit_note', 'proforma', 'quote', 'receipt']).optional(),\n        status: z.enum(['draft', 'sent', 'paid', 'overdue', 'cancelled', 'refunded', 'partially_paid']).optional(),\n        paymentStatus: z.enum(['pending', 'paid', 'partial', 'overdue', 'cancelled']).optional(),\n        companyId: z.string().uuid().optional(),\n        contactId: z.string().uuid().optional(),\n        issueDateFrom: z.coerce.date().optional(),\n        issueDateTo: z.coerce.date().optional(),\n        dueDateFrom: z.coerce.date().optional(),\n        dueDateTo: z.coerce.date().optional(),\n        minAmount: z.coerce.number().min(0).optional(),\n        maxAmount: z.coerce.number().min(0).optional(),\n        isOverdue: z.coerce.boolean().optional(),\n        isPaid: z.coerce.boolean().optional(),\n        isPartiallyPaid: z.coerce.boolean().optional(),\n        isPending: z.coerce.boolean().optional()\n      })\n    }),\n    invoiceController.searchInvoices",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 211,
        "end": 241,
        "startLoc": {
          "line": 211,
          "column": 40,
          "position": 2790
        },
        "endLoc": {
          "line": 241,
          "column": 15,
          "position": 3294
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 177,
        "end": 207,
        "startLoc": {
          "line": 177,
          "column": 33,
          "position": 2265
        },
        "endLoc": {
          "line": 207,
          "column": 26,
          "position": 2769
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "])\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    invoiceController.getInvoicesByStatus",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 284,
        "end": 293,
        "startLoc": {
          "line": 284,
          "column": 17,
          "position": 3662
        },
        "endLoc": {
          "line": 293,
          "column": 20,
          "position": 3788
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 266,
        "end": 275,
        "startLoc": {
          "line": 266,
          "column": 10,
          "position": 3457
        },
        "endLoc": {
          "line": 275,
          "column": 18,
          "position": 3583
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "])\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    invoiceController.getInvoicesByPaymentStatus",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 302,
        "end": 311,
        "startLoc": {
          "line": 302,
          "column": 12,
          "position": 3861
        },
        "endLoc": {
          "line": 311,
          "column": 27,
          "position": 3987
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 266,
        "end": 275,
        "startLoc": {
          "line": 266,
          "column": 10,
          "position": 3457
        },
        "endLoc": {
          "line": 275,
          "column": 18,
          "position": 3583
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ": z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 320,
        "end": 327,
        "startLoc": {
          "line": 320,
          "column": 10,
          "position": 4040
        },
        "endLoc": {
          "line": 327,
          "column": 2,
          "position": 4164
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 117,
        "end": 123,
        "startLoc": {
          "line": 117,
          "column": 15,
          "position": 1401
        },
        "endLoc": {
          "line": 123,
          "column": 2,
          "position": 1523
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ")\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    invoiceController.getInvoicesByCompany",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 320,
        "end": 329,
        "startLoc": {
          "line": 320,
          "column": 2,
          "position": 4050
        },
        "endLoc": {
          "line": 329,
          "column": 21,
          "position": 4175
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 266,
        "end": 275,
        "startLoc": {
          "line": 266,
          "column": 2,
          "position": 3458
        },
        "endLoc": {
          "line": 275,
          "column": 18,
          "position": 3583
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "]),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    invoiceController",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 335,
        "end": 345,
        "startLoc": {
          "line": 335,
          "column": 15,
          "position": 4207
        },
        "endLoc": {
          "line": 345,
          "column": 18,
          "position": 4347
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 232,
        "end": 207,
        "startLoc": {
          "line": 232,
          "column": 17,
          "position": 2936
        },
        "endLoc": {
          "line": 207,
          "column": 30,
          "position": 2688
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ")\n      }),\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    invoiceController.getInvoicesDueSoon",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/invoice.routes.ts",
        "start": 354,
        "end": 364,
        "startLoc": {
          "line": 354,
          "column": 4,
          "position": 4424
        },
        "endLoc": {
          "line": 364,
          "column": 19,
          "position": 4564
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 197,
        "end": 345,
        "startLoc": {
          "line": 197,
          "column": 2,
          "position": 2550
        },
        "endLoc": {
          "line": 345,
          "column": 19,
          "position": 4349
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "]),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        productId",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 116,
        "end": 127,
        "startLoc": {
          "line": 116,
          "column": 17,
          "position": 1192
        },
        "endLoc": {
          "line": 127,
          "column": 10,
          "position": 1358
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 114,
        "end": 125,
        "startLoc": {
          "line": 114,
          "column": 17,
          "position": 1380
        },
        "endLoc": {
          "line": 125,
          "column": 5,
          "position": 1546
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": ",\n    authenticate,\n    authorize(['inventory:read']),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        productId: z.string().uuid().optional(),\n        warehouseId: z.string().uuid().optional(),\n        locationId: z.string().uuid().optional(),\n        movementType: z.enum(['in', 'out', 'transfer', 'adjustment', 'return', 'damage', 'expired', 'theft']).optional(),\n        movementReason: z.enum(['purchase', 'sale', 'transfer_in', 'transfer_out', 'adjustment', 'return', 'damage', 'expired', 'theft', 'production', 'consumption', 'other']).optional(),\n        status: z.enum(['pending', 'completed', 'cancelled', 'reversed']).optional(),\n        lowStock: z.coerce.boolean().optional(),\n        outOfStock: z.coerce.boolean().optional(),\n        needsReorder: z.coerce.boolean().optional(),\n        hasExpiredItems: z.coerce.boolean().optional(),\n        hasExpiringItems: z.coerce.boolean().optional(),\n        minQuantity: z.coerce.number().min(0).optional(),\n        maxQuantity: z.coerce.number().min(0).optional(),\n        minValue: z.coerce.number().min(0).optional(),\n        maxValue: z.coerce.number().min(0).optional(),\n        costMethod: z.enum(['fifo', 'lifo', 'average', 'standard']).optional(),\n        valuationMethod: z.enum(['fifo', 'lifo', 'average', 'standard']).optional()\n      })\n    }),\n    inventoryKardexController.searchInventoryKardex",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 150,
        "end": 182,
        "startLoc": {
          "line": 150,
          "column": 40,
          "position": 1790
        },
        "endLoc": {
          "line": 182,
          "column": 22,
          "position": 2378
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 114,
        "end": 146,
        "startLoc": {
          "line": 114,
          "column": 33,
          "position": 1181
        },
        "endLoc": {
          "line": 146,
          "column": 33,
          "position": 1769
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ")\n      }),\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    inventoryKardexController",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 207,
        "end": 217,
        "startLoc": {
          "line": 207,
          "column": 2,
          "position": 2528
        },
        "endLoc": {
          "line": 217,
          "column": 26,
          "position": 2666
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 197,
        "end": 207,
        "startLoc": {
          "line": 197,
          "column": 2,
          "position": 2550
        },
        "endLoc": {
          "line": 207,
          "column": 30,
          "position": 2688
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ": z.string().uuid()\n      }),\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    inventoryKardexController.getInventoryByWarehouse",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 226,
        "end": 236,
        "startLoc": {
          "line": 226,
          "column": 12,
          "position": 2721
        },
        "endLoc": {
          "line": 236,
          "column": 24,
          "position": 2871
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 207,
        "end": 217,
        "startLoc": {
          "line": 207,
          "column": 10,
          "position": 2518
        },
        "endLoc": {
          "line": 217,
          "column": 22,
          "position": 2668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "]),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    inventoryKardexController.getLowStockInventory",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 242,
        "end": 252,
        "startLoc": {
          "line": 242,
          "column": 17,
          "position": 2903
        },
        "endLoc": {
          "line": 252,
          "column": 21,
          "position": 3045
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 232,
        "end": 217,
        "startLoc": {
          "line": 232,
          "column": 17,
          "position": 2936
        },
        "endLoc": {
          "line": 217,
          "column": 22,
          "position": 2668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n    authenticate,\n    authorize(['inventory:read']),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    inventoryKardexController.getOutOfStockInventory",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 256,
        "end": 268,
        "startLoc": {
          "line": 256,
          "column": 16,
          "position": 3066
        },
        "endLoc": {
          "line": 268,
          "column": 23,
          "position": 3219
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 240,
        "end": 217,
        "startLoc": {
          "line": 240,
          "column": 13,
          "position": 2892
        },
        "endLoc": {
          "line": 217,
          "column": 22,
          "position": 2668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n    authenticate,\n    authorize(['inventory:read']),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    inventoryKardexController.getNeedsReorderInventory",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 272,
        "end": 284,
        "startLoc": {
          "line": 272,
          "column": 17,
          "position": 3240
        },
        "endLoc": {
          "line": 284,
          "column": 25,
          "position": 3393
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 240,
        "end": 217,
        "startLoc": {
          "line": 240,
          "column": 13,
          "position": 2892
        },
        "endLoc": {
          "line": 217,
          "column": 22,
          "position": 2668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 70,
      "fragment": "),\n        email: z.string().email().optional(),\n        phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n        mobile: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n        fax: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n        website: z.string().url().optional(),\n        address: z.object({\n          street: z.string().min(1),\n          city: z.string().min(1),\n          state: z.string().optional(),\n          postalCode: z.string().min(1),\n          country: z.string().min(1),\n          countryCode: z.string().length(2)\n        }).optional(),\n        birthday: z.coerce.date().optional(),\n        anniversary: z.coerce.date().optional(),\n        gender: z.enum(['male', 'female', 'other', 'prefer_not_to_say']).optional(),\n        maritalStatus: z.enum(['single', 'married', 'divorced', 'widowed', 'separated']).optional(),\n        children: z.number().int().min(0).max(20).optional(),\n        education: z.string().max(200).optional(),\n        profession: z.string().max(100).optional(),\n        industry: z.string().max(100).optional(),\n        experience: z.number().int().min(0).max(50).optional(),\n        salary: z.object({\n          amount: z.number().min(0),\n          currency: z.string().length(3)\n        }).optional(),\n        socialMedia: z.object({\n          linkedin: z.string().url().optional(),\n          twitter: z.string().url().optional(),\n          facebook: z.string().url().optional(),\n          instagram: z.string().url().optional(),\n          youtube: z.string().url().optional(),\n          tiktok: z.string().url().optional(),\n          other: z.record(z.string()).optional()\n        }).optional(),\n        communication: z.object({\n          preferredMethod: z.enum(['email', 'phone', 'sms', 'whatsapp', 'linkedin', 'other']).optional(),\n          bestTimeToCall: z.string().optional(),\n          timeZone: z.string().optional(),\n          doNotCall: z.boolean().optional(),\n          doNotEmail: z.boolean().optional(),\n          doNotSms: z.boolean().optional()\n        }).optional(),\n        settings: z.object({\n          notifications: z.object({\n            email: z.boolean().optional(),\n            sms: z.boolean().optional(),\n            push: z.boolean().optional(),\n            phone: z.boolean().optional()\n          }).optional(),\n          preferences: z.object({\n            language: z.string().length(2).optional(),\n            timezone: z.string().optional(),\n            currency: z.string().length(3).optional(),\n            dateFormat: z.string().optional(),\n            timeFormat: z.string().optional()\n          }).optional(),\n          customFields: z.record(z.any()).optional(),\n          tags: z.array(z.string()).optional(),\n          notes: z.string().optional(),\n          internalNotes: z.string().optional()\n        }).optional(),\n        assignedUserId: z.string().uuid().optional(),\n        nextFollowUpDate: z.coerce.date().optional(),\n        leadScore: z.number().int().min(0).max(100).optional(),\n        engagementScore: z.number().int().min(0).max(100).optional()\n      })\n    }),\n    contactController.updateContact",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 119,
        "end": 188,
        "startLoc": {
          "line": 119,
          "column": 2,
          "position": 1860
        },
        "endLoc": {
          "line": 188,
          "column": 14,
          "position": 2985
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 31,
        "end": 100,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 395
        },
        "endLoc": {
          "line": 100,
          "column": 14,
          "position": 1520
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ").optional(),\n        type: z.enum(['primary', 'secondary', 'decision_maker', 'influencer', 'user', 'technical', 'financial', 'procurement']).optional(),\n        status: z.enum(['active', 'inactive', 'unsubscribed', 'bounced', 'spam', 'deleted']).optional(),\n        source: z.enum(['website', 'referral', 'cold_call', 'email', 'social_media', 'event', 'trade_show', 'webinar', 'content', 'advertising', 'other']).optional(),\n        priority: z.enum(['low', 'medium', 'high', 'urgent']).optional(),\n        assignedUserId",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 242,
        "end": 247,
        "startLoc": {
          "line": 242,
          "column": 2,
          "position": 3326
        },
        "endLoc": {
          "line": 247,
          "column": 15,
          "position": 3481
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 115,
        "end": 120,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1709
        },
        "endLoc": {
          "line": 120,
          "column": 6,
          "position": 1864
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ": z.object({\n          companyId: z.string().uuid().optional(),\n          firstName: z.string().min(1).max(100).optional(),\n          lastName: z.string().min(1).max(100).optional(),\n          middleName: z.string().max(100).optional(),\n          title: z.string().max(100).optional(),\n          department: z.string().max(100).optional(),\n          type: z.enum(['primary', 'secondary', 'decision_maker', 'influencer', 'user', 'technical', 'financial', 'procurement']).optional(),\n          status: z.enum(['active', 'inactive', 'unsubscribed', 'bounced', 'spam', 'deleted']).optional(),\n          source: z.enum(['website', 'referral', 'cold_call', 'email', 'social_media', 'event', 'trade_show', 'webinar', 'content', 'advertising', 'other']).optional(),\n          priority: z.enum(['low', 'medium', 'high', 'urgent']).optional(),\n          email: z.string().email().optional(),\n          phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n          mobile: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n          fax: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n          website: z.string().url().optional(),\n          assignedUserId",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 545,
        "end": 561,
        "startLoc": {
          "line": 545,
          "column": 8,
          "position": 6113
        },
        "endLoc": {
          "line": 561,
          "column": 15,
          "position": 6496
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 109,
        "end": 125,
        "startLoc": {
          "line": 109,
          "column": 5,
          "position": 1579
        },
        "endLoc": {
          "line": 125,
          "column": 8,
          "position": 1962
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ").optional(),\n          settings: z.object({\n            notifications: z.object({\n              email: z.boolean().optional(),\n              sms: z.boolean().optional(),\n              push: z.boolean().optional(),\n              phone: z.boolean().optional()\n            }).optional(),\n            preferences: z.object({\n              language: z.string().length(2).optional(),\n              timezone: z.string().optional(),\n              currency: z.string().length(3).optional(),\n              dateFormat: z.string().optional(),\n              timeFormat: z.string().optional()\n            }).optional(),\n            customFields: z.record(z.any()).optional(),\n            tags: z.array(z.string()).optional(),\n            notes: z.string().optional(),\n            internalNotes: z.string().optional()\n          }).optional()\n        }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 564,
        "end": 584,
        "startLoc": {
          "line": 564,
          "column": 4,
          "position": 6582
        },
        "endLoc": {
          "line": 584,
          "column": 2,
          "position": 6858
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 74,
        "end": 93,
        "startLoc": {
          "line": 74,
          "column": 2,
          "position": 1139
        },
        "endLoc": {
          "line": 93,
          "column": 2,
          "position": 1413
        }
      }
    },
    {
      "format": "typescript",
      "lines": 61,
      "fragment": "),\n        website: z.string().url().optional(),\n        email: z.string().email().optional(),\n        phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n        address: z.object({\n          street: z.string().min(1),\n          city: z.string().min(1),\n          state: z.string().optional(),\n          postalCode: z.string().min(1),\n          country: z.string().min(1),\n          countryCode: z.string().length(2)\n        }).optional(),\n        billingAddress: z.object({\n          street: z.string().min(1),\n          city: z.string().min(1),\n          state: z.string().optional(),\n          postalCode: z.string().min(1),\n          country: z.string().min(1),\n          countryCode: z.string().length(2)\n        }).optional(),\n        shippingAddress: z.object({\n          street: z.string().min(1),\n          city: z.string().min(1),\n          state: z.string().optional(),\n          postalCode: z.string().min(1),\n          country: z.string().min(1),\n          countryCode: z.string().length(2)\n        }).optional(),\n        taxId: z.string().min(5).max(20).optional(),\n        vatNumber: z.string().min(8).max(15).optional(),\n        registrationNumber: z.string().max(50).optional(),\n        description: z.string().max(1000).optional(),\n        annualRevenue: z.object({\n          amount: z.number().min(0),\n          currency: z.string().length(3)\n        }).optional(),\n        employeeCount: z.number().int().min(0).max(1000000).optional(),\n        foundedYear: z.number().int().min(1800).max(new Date().getFullYear()).optional(),\n        parentCompanyId: z.string().uuid().optional(),\n        assignedUserId: z.string().uuid().optional(),\n        nextFollowUpDate: z.coerce.date().optional(),\n        leadScore: z.number().int().min(0).max(100).optional(),\n        settings: z.object({\n          notifications: z.object({\n            email: z.boolean().optional(),\n            sms: z.boolean().optional(),\n            push: z.boolean().optional()\n          }).optional(),\n          preferences: z.object({\n            language: z.string().length(2).optional(),\n            timezone: z.string().optional(),\n            currency: z.string().length(3).optional(),\n            dateFormat: z.string().optional()\n          }).optional(),\n          customFields: z.record(z.any()).optional(),\n          tags: z.array(z.string()).optional(),\n          notes: z.string().optional()\n        }).optional()\n      })\n    }),\n    companyController.updateCompany",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 104,
        "end": 164,
        "startLoc": {
          "line": 104,
          "column": 2,
          "position": 1500
        },
        "endLoc": {
          "line": 164,
          "column": 14,
          "position": 2425
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 28,
        "end": 88,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 315
        },
        "endLoc": {
          "line": 88,
          "column": 14,
          "position": 1240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": z.object({\n          name: z.string().min(1).max(200).optional(),\n          legalName: z.string().max(200).optional(),\n          type: z.enum(['customer', 'supplier', 'partner', 'prospect', 'competitor']).optional(),\n          status: z.enum(['active', 'inactive', 'suspended', 'prospect', 'lead']).optional(),\n          size: z.enum(['startup', 'small', 'medium', 'large', 'enterprise']).optional(),\n          industry: z.string().min(1).max(100).optional(),\n          source: z.enum(['website', 'referral', 'cold_call', 'email', 'social_media', 'event', 'other']).optional(),\n          website: z.string().url().optional(),\n          email: z.string().email().optional(),\n          phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/).optional(),\n          taxId",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 379,
        "end": 390,
        "startLoc": {
          "line": 379,
          "column": 8,
          "position": 4366
        },
        "endLoc": {
          "line": 390,
          "column": 6,
          "position": 4629
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 97,
        "end": 108,
        "startLoc": {
          "line": 97,
          "column": 5,
          "position": 1299
        },
        "endLoc": {
          "line": 108,
          "column": 8,
          "position": 1562
        }
      }
    },
    {
      "format": "typescript",
      "lines": 34,
      "fragment": ").optional(),\n          taxId: z.string().min(5).max(20).optional(),\n          vatNumber: z.string().min(8).max(15).optional(),\n          registrationNumber: z.string().max(50).optional(),\n          description: z.string().max(1000).optional(),\n          annualRevenue: z.object({\n            amount: z.number().min(0),\n            currency: z.string().length(3)\n          }).optional(),\n          employeeCount: z.number().int().min(0).max(1000000).optional(),\n          foundedYear: z.number().int().min(1800).max(new Date().getFullYear()).optional(),\n          parentCompanyId: z.string().uuid().optional(),\n          assignedUserId: z.string().uuid().optional(),\n          nextFollowUpDate: z.coerce.date().optional(),\n          leadScore: z.number().int().min(0).max(100).optional(),\n          settings: z.object({\n            notifications: z.object({\n              email: z.boolean().optional(),\n              sms: z.boolean().optional(),\n              push: z.boolean().optional()\n            }).optional(),\n            preferences: z.object({\n              language: z.string().length(2).optional(),\n              timezone: z.string().optional(),\n              currency: z.string().length(3).optional(),\n              dateFormat: z.string().optional()\n            }).optional(),\n            customFields: z.record(z.any()).optional(),\n            tags: z.array(z.string()).optional(),\n            notes: z.string().optional()\n          }).optional()\n        })\n      })\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 389,
        "end": 422,
        "startLoc": {
          "line": 389,
          "column": 25,
          "position": 4621
        },
        "endLoc": {
          "line": 422,
          "column": 2,
          "position": 5150
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 55,
        "end": 87,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 708
        },
        "endLoc": {
          "line": 87,
          "column": 2,
          "position": 1235
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "),\n        description: z.string().max(1000).optional(),\n        settings: z.object({\n          layers: z.array(z.object({\n            id: z.string().uuid(),\n            name: z.string().min(1).max(255),\n            type: z.enum(['domain', 'application', 'infrastructure', 'presentation', 'shared']),\n            description: z.string().max(1000),\n            components: z.array(z.object({\n              id: z.string().uuid(),\n              name: z.string().min(1).max(255),\n              type: z.enum(['entity', 'repository', 'use_case', 'service', 'controller', 'middleware', 'dto', 'route']),\n              description: z.string().max(1000),\n              dependencies: z.array(z.string()).default([]),\n              interfaces: z.array(z.string()).default([]),\n              implementation: z.string().max(5000),\n              tests: z.array(z.string()).default([]),\n              documentation: z.string().max(5000)\n            })),",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 73,
        "end": 91,
        "startLoc": {
          "line": 73,
          "column": 2,
          "position": 963
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 1290
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 25,
        "end": 43,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 209
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 536
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "]),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        type: z.enum(['hexagonal'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 142,
        "end": 153,
        "startLoc": {
          "line": 142,
          "column": 20,
          "position": 1762
        },
        "endLoc": {
          "line": 153,
          "column": 12,
          "position": 1936
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 114,
        "end": 125,
        "startLoc": {
          "line": 114,
          "column": 17,
          "position": 1380
        },
        "endLoc": {
          "line": 125,
          "column": 17,
          "position": 1554
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ",\n    authenticate,\n    authorize(['architecture:read']),\n    validateRequest({\n      params: z.object({\n        organizationId: z.string().uuid()\n      }),\n      query: z.object({\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc'),\n        search: z.string().max(200).optional(),\n        type: z.enum(['hexagonal', 'layered', 'microservices', 'monolithic', 'event_driven']).optional(),\n        status: z.enum(['design', 'implementation', 'testing', 'deployed', 'maintenance']).optional(),\n        layerType: z.enum(['domain', 'application', 'infrastructure', 'presentation', 'shared']).optional(),\n        componentType: z.enum(['entity', 'repository', 'use_case', 'service', 'controller', 'middleware', 'dto', 'route']).optional(),\n        isActive: z.coerce.boolean().optional(),\n        hasMetrics: z.coerce.boolean().optional(),\n        minQualityScore: z.coerce.number().min(0).max(10).optional(),\n        maxQualityScore: z.coerce.number().min(0).max(10).optional(),\n        lastAnalysisFrom: z.coerce.date().optional(),\n        lastAnalysisTo: z.coerce.date().optional()\n      })\n    }),\n    architectureController.searchArchitectures",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 169,
        "end": 194,
        "startLoc": {
          "line": 169,
          "column": 40,
          "position": 2210
        },
        "endLoc": {
          "line": 194,
          "column": 20,
          "position": 2648
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 140,
        "end": 165,
        "startLoc": {
          "line": 140,
          "column": 33,
          "position": 1751
        },
        "endLoc": {
          "line": 165,
          "column": 31,
          "position": 2189
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "])\n      }),\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    architectureController",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 219,
        "end": 229,
        "startLoc": {
          "line": 219,
          "column": 15,
          "position": 2808
        },
        "endLoc": {
          "line": 229,
          "column": 23,
          "position": 2947
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 197,
        "end": 207,
        "startLoc": {
          "line": 197,
          "column": 18,
          "position": 2549
        },
        "endLoc": {
          "line": 207,
          "column": 30,
          "position": 2688
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "])\n      }),\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    architectureController.getArchitecturesByStatus",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 238,
        "end": 248,
        "startLoc": {
          "line": 238,
          "column": 14,
          "position": 3022
        },
        "endLoc": {
          "line": 248,
          "column": 25,
          "position": 3163
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 197,
        "end": 229,
        "startLoc": {
          "line": 197,
          "column": 18,
          "position": 2549
        },
        "endLoc": {
          "line": 229,
          "column": 23,
          "position": 2949
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "]),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    architectureController.getActiveArchitectures",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 254,
        "end": 264,
        "startLoc": {
          "line": 254,
          "column": 20,
          "position": 3195
        },
        "endLoc": {
          "line": 264,
          "column": 23,
          "position": 3337
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 232,
        "end": 229,
        "startLoc": {
          "line": 232,
          "column": 17,
          "position": 2936
        },
        "endLoc": {
          "line": 229,
          "column": 23,
          "position": 2949
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n    authenticate,\n    authorize(['architecture:read']),\n    validateRequest({\n      query: z.object({\n        organizationId: z.string().uuid(),\n        page: z.coerce.number().int().min(1).default(1),\n        limit: z.coerce.number().int().min(1).max(100).default(20),\n        sortBy: z.string().default('createdAt'),\n        sortOrder: z.enum(['asc', 'desc']).default('desc')\n      })\n    }),\n    architectureController.getArchitecturesWithMetrics",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 268,
        "end": 280,
        "startLoc": {
          "line": 268,
          "column": 16,
          "position": 3358
        },
        "endLoc": {
          "line": 280,
          "column": 28,
          "position": 3511
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 252,
        "end": 229,
        "startLoc": {
          "line": 252,
          "column": 10,
          "position": 3184
        },
        "endLoc": {
          "line": 229,
          "column": 23,
          "position": 2949
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "name: z.string().min(1, 'Variant name is required').max(100, 'Variant name cannot exceed 100 characters'),\n    sku: z.string().min(1, 'Variant SKU is required').max(100, 'Variant SKU cannot exceed 100 characters'),\n    price: z.object({\n      amount: z.number().min(0, 'Variant price must be non-negative'),\n      currency: z.string().length(3, 'Currency must be 3 characters')\n    }),\n    compareAtPrice: z.object({\n      amount: z.number().min(0, 'Compare at price must be non-negative'),\n      currency: z.string().length(3, 'Currency must be 3 characters')\n    }).optional(),\n    costPrice: z.object({\n      amount: z.number().min(0, 'Cost price must be non-negative'),\n      currency: z.string().length(3, 'Currency must be 3 characters')\n    }).optional(),\n    inventory: z.object({\n      quantity: z.number().int().min(0, 'Quantity must be non-negative'),\n      reserved: z.number().int().min(0, 'Reserved quantity must be non-negative'),\n      available: z.number().int().min(0, 'Available quantity must be non-negative')\n    }),\n    attributes: z.record(z.any()).default({}),\n    isActive: z.boolean().default(true)\n  })).optional()\n});\n\n// ========================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/product.dto.ts",
        "start": 157,
        "end": 181,
        "startLoc": {
          "line": 157,
          "column": 5,
          "position": 2474
        },
        "endLoc": {
          "line": 181,
          "column": 76,
          "position": 2825
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/product.dto.ts",
        "start": 72,
        "end": 96,
        "startLoc": {
          "line": 72,
          "column": 5,
          "position": 1055
        },
        "endLoc": {
          "line": 96,
          "column": 7,
          "position": 1406
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ").optional(),\n  type: z.enum(['physical', 'digital', 'service', 'subscription', 'bundle']).optional(),\n  status: z.enum(['active', 'inactive', 'discontinued', 'draft', 'archived']).optional(),\n  category: z.string().optional(),\n  brand: z.string().optional(),\n  supplier: z.string().optional(),\n  minPrice: z.coerce.number().min(0,",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/product.dto.ts",
        "start": 202,
        "end": 208,
        "startLoc": {
          "line": 202,
          "column": 43,
          "position": 3061
        },
        "endLoc": {
          "line": 208,
          "column": 2,
          "position": 3188
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/product.routes.ts",
        "start": 229,
        "end": 235,
        "startLoc": {
          "line": 229,
          "column": 4,
          "position": 2952
        },
        "endLoc": {
          "line": 235,
          "column": 2,
          "position": 3079
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ".optional(),\n  settings: z.object({\n    modelType: z.enum(['linear_regression', 'decision_tree', 'random_forest', 'neural_network', 'time_series', 'clustering', 'classification', 'deep_learning']).optional(),\n    trainingPeriod: z.number().int().min(1).max(3650).optional(),\n    predictionHorizon: z.number().int().min(1).max(365).optional(),\n    confidenceThreshold: z.number().min(0).max(1).optional(),\n    autoRetrain: z.boolean().optional(),\n    retrainFrequency: z.number().int().min(1).max(365).optional(),\n    dataSource: z.array(z.string().min(1)).optional(),\n    features: z.array(z.string().min(1)).optional(),\n    targetVariable: z.string().min(1).max(100).optional(),\n    validationMethod: z.enum(['cross_validation', 'holdout', 'time_series_split']).optional(),\n    hyperparameters: z.record(z.any()).optional(),\n    customFields: CustomFieldsSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/predictive-analytics.dto.ts",
        "start": 63,
        "end": 76,
        "startLoc": {
          "line": 63,
          "column": 11,
          "position": 703
        },
        "endLoc": {
          "line": 76,
          "column": 19,
          "position": 1008
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 61,
        "end": 74,
        "startLoc": {
          "line": 61,
          "column": 2,
          "position": 804
        },
        "endLoc": {
          "line": 74,
          "column": 2,
          "position": 1109
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "type: z.enum(['sales_forecast', 'demand_prediction', 'churn_prediction', 'revenue_forecast', 'inventory_optimization', 'customer_lifetime_value', 'market_trend', 'risk_assessment']).optional(),\n  status: z.enum(['pending', 'processing', 'completed', 'failed', 'cancelled']).optional(),\n  modelType: z.enum(['linear_regression', 'decision_tree', 'random_forest', 'neural_network', 'time_series', 'clustering', 'classification', 'deep_learning']).optional(),\n  accuracy: z.enum(['low', 'medium', 'high', 'very_high']).optional(),\n  isActive: z.coerce.boolean().optional(),\n  needsRetraining: z.coerce.boolean().optional(),\n  hasPredictions: z.coerce.boolean().optional(),\n  minAccuracy: z.coerce.number().min(0).max(1).optional(),\n  maxAccuracy: z.coerce.number().min(0).max(1).optional(),\n  lastPredictionFrom: z.coerce.date().optional(),\n  lastPredictionTo: z.coerce.date().optional(),\n  nextRetrainFrom: z.coerce.date().optional(),\n  nextRetrainTo: z.coerce.date().optional()\n});",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/predictive-analytics.dto.ts",
        "start": 106,
        "end": 119,
        "startLoc": {
          "line": 106,
          "column": 3,
          "position": 1247
        },
        "endLoc": {
          "line": 119,
          "column": 2,
          "position": 1555
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/predictive-analytics.routes.ts",
        "start": 125,
        "end": 139,
        "startLoc": {
          "line": 125,
          "column": 9,
          "position": 1546
        },
        "endLoc": {
          "line": 139,
          "column": 2,
          "position": 1857
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "({\n    type: z.enum(['sales_forecast', 'demand_prediction', 'churn_prediction', 'revenue_forecast', 'inventory_optimization', 'customer_lifetime_value', 'market_trend', 'risk_assessment']).optional(),\n    status: z.enum(['pending', 'processing', 'completed', 'failed', 'cancelled']).optional(),\n    modelType: z.enum(['linear_regression', 'decision_tree', 'random_forest', 'neural_network', 'time_series', 'clustering', 'classification', 'deep_learning']).optional(),\n    accuracy: z.enum(['low', 'medium', 'high', 'very_high']).optional(),\n    isActive: z.boolean",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/predictive-analytics.dto.ts",
        "start": 238,
        "end": 243,
        "startLoc": {
          "line": 238,
          "column": 7,
          "position": 2895
        },
        "endLoc": {
          "line": 243,
          "column": 8,
          "position": 3039
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/predictive-analytics.dto.ts",
        "start": 105,
        "end": 129,
        "startLoc": {
          "line": 105,
          "column": 7,
          "position": 1243
        },
        "endLoc": {
          "line": 129,
          "column": 7,
          "position": 1686
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "productId: UUIDSchema.optional(),\n    description: z.string().min(1, 'Item description is required').max(500, 'Description cannot exceed 500 characters'),\n    quantity: z.number().min(0.01, 'Quantity must be greater than 0'),\n    unitPrice: MoneySchema,\n    totalPrice: MoneySchema,\n    taxRate: z.number().min(0, 'Tax rate must be non-negative').max(100, 'Tax rate cannot exceed 100%').optional(),\n    taxAmount: MoneySchema.optional(),\n    discountRate: z.number().min(0, 'Discount rate must be non-negative').max(100, 'Discount rate cannot exceed 100%').optional(),\n    discountAmount: MoneySchema.optional(),\n    notes: z.string().max(500, 'Item notes cannot exceed 500 characters').optional()\n  })).optional",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/invoice.dto.ts",
        "start": 95,
        "end": 105,
        "startLoc": {
          "line": 95,
          "column": 5,
          "position": 1178
        },
        "endLoc": {
          "line": 105,
          "column": 9,
          "position": 1359
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/invoice.dto.ts",
        "start": 48,
        "end": 58,
        "startLoc": {
          "line": 48,
          "column": 5,
          "position": 395
        },
        "endLoc": {
          "line": 58,
          "column": 4,
          "position": 576
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ".optional(),\n  movementType: z.enum(['in', 'out', 'transfer', 'adjustment', 'return', 'damage', 'expired', 'theft']).optional(),\n  movementReason: z.enum(['purchase', 'sale', 'transfer_in', 'transfer_out', 'adjustment', 'return', 'damage', 'expired', 'theft', 'production', 'consumption', 'other']).optional(),\n  status: z.enum(['pending', 'completed', 'cancelled', 'reversed']).optional(),\n  lowStock: z.coerce.boolean().optional(),\n  outOfStock: z.coerce.boolean().optional(),\n  needsReorder: z.coerce.boolean().optional(),\n  hasExpiredItems: z.coerce.boolean().optional(),\n  hasExpiringItems: z.coerce.boolean().optional(),\n  minQuantity: z.coerce.number().min(0,",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/inventory-kardex.dto.ts",
        "start": 127,
        "end": 136,
        "startLoc": {
          "line": 127,
          "column": 11,
          "position": 1315
        },
        "endLoc": {
          "line": 136,
          "column": 2,
          "position": 1538
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/inventory-kardex.routes.ts",
        "start": 129,
        "end": 138,
        "startLoc": {
          "line": 129,
          "column": 2,
          "position": 1408
        },
        "endLoc": {
          "line": 138,
          "column": 2,
          "position": 1631
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "({\n    productId: UUIDSchema.optional(),\n    warehouseId: UUIDSchema.optional(),\n    locationId: UUIDSchema.optional(),\n    movementType: z.enum(['in', 'out', 'transfer', 'adjustment', 'return', 'damage', 'expired', 'theft']).optional(),\n    movementReason: z.enum(['purchase', 'sale', 'transfer_in', 'transfer_out', 'adjustment', 'return', 'damage', 'expired', 'theft', 'production', 'consumption', 'other']).optional(),\n    status: z.enum(['pending', 'completed', 'cancelled', 'reversed']).optional()\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/inventory-kardex.dto.ts",
        "start": 291,
        "end": 298,
        "startLoc": {
          "line": 291,
          "column": 7,
          "position": 3450
        },
        "endLoc": {
          "line": 298,
          "column": 2,
          "position": 3603
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/inventory-kardex.dto.ts",
        "start": 124,
        "end": 130,
        "startLoc": {
          "line": 124,
          "column": 7,
          "position": 1285
        },
        "endLoc": {
          "line": 130,
          "column": 2,
          "position": 1436
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "type: InteractionTypeSchema.optional(),\n  status: InteractionStatusSchema.optional(),\n  priority: InteractionPrioritySchema.optional(),\n  contactId: UUIDSchema.optional(),\n  companyId: UUIDSchema.optional(),\n  userId: UUIDSchema.optional(),\n  scheduledFrom: z.coerce.date().optional(),\n  scheduledTo: z.coerce.date().optional(),\n  completedFrom: z.coerce.date().optional(),\n  completedTo: z.coerce.date().optional(),\n  tags: z.string().optional(),\n  hasOutcome: z.coerce.boolean().optional(),\n  hasNextAction: z.coerce.boolean().optional(),\n  overdue: z.coerce.boolean().optional(),\n  upcoming: z.coerce.boolean().optional()\n});\n\n// ========================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/interaction.dto.ts",
        "start": 204,
        "end": 221,
        "startLoc": {
          "line": 204,
          "column": 3,
          "position": 1853
        },
        "endLoc": {
          "line": 221,
          "column": 76,
          "position": 2073
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/interaction.dto.ts",
        "start": 186,
        "end": 203,
        "startLoc": {
          "line": 186,
          "column": 3,
          "position": 1618
        },
        "endLoc": {
          "line": 203,
          "column": 7,
          "position": 1838
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ".optional(),\n  expectedCloseDate: z.coerce.date().optional(),\n  nextStep: z.string().max(500, 'Next step cannot exceed 500 characters').optional(),\n  nextStepDate: z.coerce.date().optional(),\n  tags: TagsSchema,\n  customFields: CustomFieldsSchema,\n  attachments: z.array(z.string().url('Invalid attachment URL')).max(5, 'Cannot have more than 5 attachments').optional(),\n  notes: z.string().max(2000, 'Notes cannot exceed 2000 characters').optional(),\n  competitors: z.array(z.string().max(100, 'Competitor name cannot exceed 100 characters')).max(10, 'Cannot have more than 10 competitors').optional(),\n  decisionMakers: z.array(z.string().max(100, 'Decision maker name cannot exceed 100 characters')).max(10, 'Cannot have more than 10 decision makers').optional(),\n  budget: z.number().min(0, 'Budget cannot be negative').optional(),\n  timeline: z.string().max(200, 'Timeline cannot exceed 200 characters').optional(),\n  requirements: z.array(z.string().max(500, 'Requirement cannot exceed 500 characters')).max(20, 'Cannot have more than 20 requirements').optional(),\n  objections: z.array(z.string().max(500, 'Objection cannot exceed 500 characters')).max(20, 'Cannot have more than 20 objections').optional()\n});\n\nexport const UpdateStageSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/deal.dto.ts",
        "start": 132,
        "end": 148,
        "startLoc": {
          "line": 132,
          "column": 2,
          "position": 1300
        },
        "endLoc": {
          "line": 148,
          "column": 18,
          "position": 1631
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/deal.dto.ts",
        "start": 64,
        "end": 80,
        "startLoc": {
          "line": 64,
          "column": 11,
          "position": 390
        },
        "endLoc": {
          "line": 80,
          "column": 17,
          "position": 721
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "stage: DealStageSchema.optional(),\n  status: DealStatusSchema.optional(),\n  priority: DealPrioritySchema.optional(),\n  source: DealSourceSchema.optional(),\n  contactId: UUIDSchema.optional(),\n  companyId: UUIDSchema.optional(),\n  userId: UUIDSchema.optional(),\n  valueFrom: z.coerce.number().min(0, 'Value from cannot be negative').optional(),\n  valueTo: z.coerce.number().min(0, 'Value to cannot be negative').optional(),\n  probabilityFrom: z.coerce.number().min(0, 'Probability from cannot be negative').max(100, 'Probability from cannot exceed 100').optional(),\n  probabilityTo: z.coerce.number().min(0, 'Probability to cannot be negative').max(100, 'Probability to cannot exceed 100').optional(),\n  expectedCloseFrom: z.coerce.date().optional(),\n  expectedCloseTo: z.coerce.date().optional(),\n  actualCloseFrom: z.coerce.date().optional(),\n  actualCloseTo: z.coerce.date().optional(),\n  tags: z.string().optional(),\n  hasNextStep: z.coerce.boolean().optional(),\n  overdue: z.coerce.boolean().optional(),\n  won: z.coerce.boolean().optional(),\n  lost: z.coerce.boolean().optional(),\n  active: z.coerce.boolean().optional()\n});\n\n// ========================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/deal.dto.ts",
        "start": 269,
        "end": 292,
        "startLoc": {
          "line": 269,
          "column": 3,
          "position": 2957
        },
        "endLoc": {
          "line": 292,
          "column": 76,
          "position": 3321
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/deal.dto.ts",
        "start": 245,
        "end": 268,
        "startLoc": {
          "line": 245,
          "column": 3,
          "position": 2578
        },
        "endLoc": {
          "line": 268,
          "column": 7,
          "position": 2942
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "),\n    constraints: z.array(z.object({\n      id: z.string().uuid(),\n      name: z.string().min(1, 'Constraint name is required').max(255, 'Constraint name cannot exceed 255 characters'),\n      type: z.enum(['primary_key', 'foreign_key', 'unique', 'check', 'not_null', 'default', 'index'], {\n        errorMap: () => ({ message: 'Constraint type must be one of: primary_key, foreign_key, unique, check, not_null, default, index' })\n      }),\n      columns: z.array(z.string()).min(1, 'At least one column is required'),\n      referencedTable: z.string().max(255).optional(),\n      referencedColumns: z.array(z.string()).optional(),\n      condition: z.string().max(1000).optional(),\n      description: z.string().max(1000, 'Description cannot exceed 1000 characters'),\n      isDeferrable: z.boolean().default(false),\n      initiallyDeferred: z.boolean().default(false),\n      onDelete: z.enum(['CASCADE', 'SET NULL', 'RESTRICT', 'NO ACTION']).optional(),\n      onUpdate: z.enum(['CASCADE', 'SET NULL', 'RESTRICT', 'NO ACTION']).optional()\n    })).default([]),\n    indexes",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/database-schema.dto.ts",
        "start": 125,
        "end": 142,
        "startLoc": {
          "line": 125,
          "column": 44,
          "position": 1924
        },
        "endLoc": {
          "line": 142,
          "column": 8,
          "position": 2242
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/database-schema.dto.ts",
        "start": 102,
        "end": 119,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 1490
        },
        "endLoc": {
          "line": 119,
          "column": 12,
          "position": 1808
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "z.object({\n  id: z.string(),\n  name: z.string(),\n  type: z.enum(['primary_key', 'foreign_key', 'unique', 'check', 'not_null', 'default', 'index']),\n  columns: z.array(z.string()),\n  referencedTable: z.string().optional(),\n  referencedColumns: z.array(z.string()).optional(),\n  condition: z.string().optional(),\n  description: z.string(),\n  isDeferrable: z.boolean(),\n  initiallyDeferred: z.boolean(),\n  onDelete: z.enum(['CASCADE', 'SET NULL', 'RESTRICT', 'NO ACTION']).optional(),\n  onUpdate: z.enum(['CASCADE', 'SET NULL', 'RESTRICT', 'NO ACTION']).optional(),\n  createdAt: z.date(),\n  updatedAt: z.date()\n});",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/database-schema.dto.ts",
        "start": 342,
        "end": 357,
        "startLoc": {
          "line": 342,
          "column": 2,
          "position": 5449
        },
        "endLoc": {
          "line": 357,
          "column": 2,
          "position": 5685
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/database-schema.dto.ts",
        "start": 316,
        "end": 331,
        "startLoc": {
          "line": 316,
          "column": 2,
          "position": 5101
        },
        "endLoc": {
          "line": 331,
          "column": 2,
          "position": 5338
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "({\n    type: z.enum(['postgresql', 'mysql', 'sqlite', 'mongodb', 'redis', 'elasticsearch']).optional(),\n    status: z.enum(['design', 'development', 'testing', 'production', 'deprecated']).optional(),\n    tableType: z.enum(['table', 'view', 'materialized_view', 'function', 'procedure', 'trigger', 'index', 'sequence']).optional(),\n    columnType: z.enum(['varchar', 'text', 'integer', 'bigint', 'decimal', 'boolean', 'date', 'timestamp', 'json', 'jsonb', 'uuid', 'array', 'enum']).optional(),\n    constraintType: z.enum(['primary_key', 'foreign_key', 'unique', 'check', 'not_null', 'default', 'index']).optional(),\n    isActive: z.boolean",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/database-schema.dto.ts",
        "start": 577,
        "end": 583,
        "startLoc": {
          "line": 577,
          "column": 7,
          "position": 8076
        },
        "endLoc": {
          "line": 583,
          "column": 8,
          "position": 8277
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/database-schema.dto.ts",
        "start": 272,
        "end": 278,
        "startLoc": {
          "line": 272,
          "column": 7,
          "position": 4335
        },
        "endLoc": {
          "line": 278,
          "column": 7,
          "position": 4536
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "z.object({\n    linkedin: z.string().url('Invalid LinkedIn URL').optional(),\n    twitter: z.string().url('Invalid Twitter URL').optional(),\n    facebook: z.string().url('Invalid Facebook URL').optional(),\n    instagram: z.string().url('Invalid Instagram URL').optional(),\n    youtube: z.string().url('Invalid YouTube URL').optional(),\n    tiktok: z.string().url('Invalid TikTok URL').optional(),\n    other: z.record(z.string()).optional()\n  }).",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 57,
        "end": 65,
        "startLoc": {
          "line": 57,
          "column": 2,
          "position": 963
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 1111
        }
      },
      "secondFile": {
        "name": "apps/api/src/shared/utils/validation.utils.ts",
        "start": 92,
        "end": 100,
        "startLoc": {
          "line": 92,
          "column": 2,
          "position": 751
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 898
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ").optional(),\n    other: z.record(z.string()).optional()\n  }).optional(),\n  communication: z.object({\n    preferredMethod: z.enum(['email', 'phone', 'sms', 'whatsapp', 'linkedin', 'other']).optional(),\n    bestTimeToCall: z.string().optional(),\n    timeZone: z.string().optional(),\n    doNotCall: z.boolean().optional(),\n    doNotEmail: z.boolean().optional(),\n    doNotSms: z.boolean().optional()\n  }).optional(),\n  settings: z.object({\n    notifications: z.object({\n      email: z.boolean().optional(),\n      sms: z.boolean().optional(),\n      push: z.boolean().optional(),\n      phone: z.boolean().optional()\n    }).optional(),\n    preferences: z.object({\n      language: z.string().length(2,",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 63,
        "end": 82,
        "startLoc": {
          "line": 63,
          "column": 21,
          "position": 1082
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 1354
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 64,
        "end": 83,
        "startLoc": {
          "line": 64,
          "column": 2,
          "position": 985
        },
        "endLoc": {
          "line": 83,
          "column": 2,
          "position": 1257
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ").optional(),\n      dateFormat: z.string().optional(),\n      timeFormat: z.string().optional()\n    }).optional(),\n    customFields: z.record(z.any()).optional(),\n    tags: z.array(z.string()).optional(),\n    notes: z.string().optional(),\n    internalNotes: z.string().optional()\n  }).optional(),\n  assignedUserId: z.string().uuid('Invalid assigned user ID format'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 84,
        "end": 93,
        "startLoc": {
          "line": 84,
          "column": 35,
          "position": 1395
        },
        "endLoc": {
          "line": 93,
          "column": 34,
          "position": 1530
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 85,
        "end": 94,
        "startLoc": {
          "line": 85,
          "column": 2,
          "position": 1292
        },
        "endLoc": {
          "line": 94,
          "column": 2,
          "position": 1427
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "query: z.string().optional(),\n  type: z.enum(['primary', 'secondary', 'decision_maker', 'influencer', 'user', 'technical', 'financial', 'procurement']).optional(),\n  status: z.enum(['active', 'inactive', 'unsubscribed', 'bounced', 'spam', 'deleted']).optional(),\n  source: z.enum(['website', 'referral', 'cold_call', 'email', 'social_media', 'event', 'trade_show', 'webinar', 'content', 'advertising', 'other']).optional(),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']).optional(),\n  assignedUserId: z.string().uuid('Invalid assigned user ID format'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 111,
        "end": 116,
        "startLoc": {
          "line": 111,
          "column": 3,
          "position": 1756
        },
        "endLoc": {
          "line": 116,
          "column": 34,
          "position": 1929
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 242,
        "end": 247,
        "startLoc": {
          "line": 242,
          "column": 9,
          "position": 3319
        },
        "endLoc": {
          "line": 247,
          "column": 2,
          "position": 3492
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ").optional(),\n  department: z.string().optional(),\n  industry: z.string().optional(),\n  profession: z.string().optional(),\n  isActive: z.boolean().optional(),\n  isVerified: z.boolean().optional(),\n  isOptedIn: z.boolean().optional(),\n  hasCompany: z.boolean().optional(),\n  isAssigned: z.boolean().optional(),\n  leadScoreMin: z.number",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 117,
        "end": 126,
        "startLoc": {
          "line": 117,
          "column": 28,
          "position": 1950
        },
        "endLoc": {
          "line": 126,
          "column": 7,
          "position": 2083
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 248,
        "end": 257,
        "startLoc": {
          "line": 248,
          "column": 2,
          "position": 3511
        },
        "endLoc": {
          "line": 257,
          "column": 7,
          "position": 3644
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ".number().int().min(0).optional(),\n  lastContactAfter: z.coerce.date().optional(),\n  lastContactBefore: z.coerce.date().optional(),\n  nextFollowUpAfter: z.coerce.date().optional(),\n  nextFollowUpBefore: z.coerce.date().optional(),\n  lastEmailOpenAfter: z.coerce.date().optional(),\n  lastEmailOpenBefore: z.coerce.date().optional(),\n  lastEmailClickAfter: z.coerce.date().optional(),\n  lastEmailClickBefore: z.coerce.date().optional(),\n  lastWebsiteVisitAfter: z.coerce.date().optional(),\n  lastWebsiteVisitBefore: z.coerce.date().optional(),\n  lastSocialMediaInteractionAfter: z.coerce.date().optional(),\n  lastSocialMediaInteractionBefore: z.coerce.date().optional(),\n  createdAfter: z.coerce.date().optional(),\n  createdBefore: z.coerce.date().optional(),\n  updatedAfter: z.coerce.date().optional(),\n  updatedBefore: z.coerce.date().optional(),\n  birthdayAfter: z.coerce.date().optional(),\n  birthdayBefore: z.coerce.date().optional(),\n  anniversaryAfter: z.coerce.date().optional(),\n  anniversaryBefore: z.coerce.date().optional(),\n  tags: z.array(z.string()).optional(),\n  page: z.coerce.number().int().min(1,",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 138,
        "end": 160,
        "startLoc": {
          "line": 138,
          "column": 2,
          "position": 2370
        },
        "endLoc": {
          "line": 160,
          "column": 2,
          "position": 2768
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 269,
        "end": 291,
        "startLoc": {
          "line": 269,
          "column": 7,
          "position": 3955
        },
        "endLoc": {
          "line": 291,
          "column": 2,
          "position": 4353
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "(),\n  type: z.enum(['primary', 'secondary', 'decision_maker', 'influencer', 'user', 'technical', 'financial', 'procurement']),\n  status: z.enum(['active', 'inactive', 'unsubscribed', 'bounced', 'spam', 'deleted']),\n  source: z.enum(['website', 'referral', 'cold_call', 'email', 'social_media', 'event', 'trade_show', 'webinar', 'content', 'advertising', 'other']),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']),\n  email: z.string().nullable",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 187,
        "end": 192,
        "startLoc": {
          "line": 187,
          "column": 9,
          "position": 3154
        },
        "endLoc": {
          "line": 192,
          "column": 9,
          "position": 3299
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/contact.routes.ts",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 263
        },
        "endLoc": {
          "line": 32,
          "column": 6,
          "position": 408
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ").optional(),\n  address: z.object({\n    street: z.string().min(1, 'Street is required'),\n    city: z.string().min(1, 'City is required'),\n    state: z.string().optional(),\n    postalCode: z.string().min(1, 'Postal code is required'),\n    country: z.string().min(1, 'Country is required'),\n    countryCode: z.string().length(2, 'Country code must be 2 characters')\n  }).optional(),\n  billingAddress",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/company.dto.ts",
        "start": 30,
        "end": 39,
        "startLoc": {
          "line": 30,
          "column": 30,
          "position": 405
        },
        "endLoc": {
          "line": 39,
          "column": 15,
          "position": 541
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 22,
          "position": 538
        },
        "endLoc": {
          "line": 44,
          "column": 9,
          "position": 674
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "query: z.string().optional(),\n  type: z.enum(['customer', 'supplier', 'partner', 'prospect', 'competitor']).optional(),\n  status: z.enum(['active', 'inactive', 'suspended', 'prospect', 'lead']).optional(),\n  size: z.enum(['startup', 'small', 'medium', 'large', 'enterprise']).optional(),\n  industry: z.string().optional(),\n  source: z.enum(['website', 'referral', 'cold_call', 'email', 'social_media', 'event', 'other']).optional(),\n  assignedUserId: z.string().uuid('Invalid assigned user ID format'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/company.dto.ts",
        "start": 99,
        "end": 105,
        "startLoc": {
          "line": 99,
          "column": 3,
          "position": 1491
        },
        "endLoc": {
          "line": 105,
          "column": 34,
          "position": 1658
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 208,
        "end": 214,
        "startLoc": {
          "line": 208,
          "column": 9,
          "position": 2695
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 2862
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ".number().int().min(1800).optional(),\n  lastContactAfter: z.coerce.date().optional(),\n  lastContactBefore: z.coerce.date().optional(),\n  nextFollowUpAfter: z.coerce.date().optional(),\n  nextFollowUpBefore: z.coerce.date().optional(),\n  createdAfter: z.coerce.date().optional(),\n  createdBefore: z.coerce.date().optional(),\n  updatedAfter: z.coerce.date().optional(),\n  updatedBefore: z.coerce.date().optional(),\n  tags: z.array(z.string()).optional(),\n  page: z.coerce.number().int().min(1,",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/company.dto.ts",
        "start": 118,
        "end": 128,
        "startLoc": {
          "line": 118,
          "column": 2,
          "position": 1926
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 2120
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/company.routes.ts",
        "start": 227,
        "end": 237,
        "startLoc": {
          "line": 227,
          "column": 7,
          "position": 3144
        },
        "endLoc": {
          "line": 237,
          "column": 2,
          "position": 3338
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ": z.string(),\n    count: z.number().int().min(0)\n  })),\n  topSources: z.array(z.object({\n    source: z.string(),\n    count: z.number().int().min(0)\n  })),\n  topAssignedUsers: z.array(z.object({\n    userId: z.string(),\n    count: z.number().int().min(0)\n  }))\n}",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/company.dto.ts",
        "start": 271,
        "end": 282,
        "startLoc": {
          "line": 271,
          "column": 9,
          "position": 4209
        },
        "endLoc": {
          "line": 282,
          "column": 2,
          "position": 4342
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/contact.dto.ts",
        "start": 369,
        "end": 379,
        "startLoc": {
          "line": 369,
          "column": 11,
          "position": 5913
        },
        "endLoc": {
          "line": 379,
          "column": 2,
          "position": 6045
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "),\n        description: z.string().max(1000),\n        dependencies: z.array(z.string()).default([]),\n        interfaces: z.array(z.string()).default([]),\n        implementation: z.string().max(5000),\n        tests: z.array(z.string()).default([]),\n        documentation: z.string().max(5000)\n      })).min(1,",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/architecture.dto.ts",
        "start": 49,
        "end": 56,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 429
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 553
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 36,
        "end": 43,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 416
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 540
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "),\n    patterns: z.array(z.string()).default([]),\n    principles: z.array(z.string()).default([]),\n    conventions: z.record(z.any()).default({}),\n    tools: z.array(z.string()).default([]),\n    frameworks: z.array(z.string()).default([]),\n    libraries: z.array(z.string()).default([]),\n    customFields: CustomFieldsSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/architecture.dto.ts",
        "start": 60,
        "end": 67,
        "startLoc": {
          "line": 60,
          "column": 33,
          "position": 635
        },
        "endLoc": {
          "line": 67,
          "column": 19,
          "position": 774
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 47,
        "end": 54,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 616
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 755
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": ".optional(),\n  settings: z.object({\n    layers: z.array(z.object({\n      id: z.string().uuid(),\n      name: z.string().min(1).max(255),\n      type: z.enum(['domain', 'application', 'infrastructure', 'presentation', 'shared']),\n      description: z.string().max(1000),\n      components: z.array(z.object({\n        id: z.string().uuid(),\n        name: z.string().min(1).max(255),\n        type: z.enum(['entity', 'repository', 'use_case', 'service', 'controller', 'middleware', 'dto', 'route']),\n        description: z.string().max(1000),\n        dependencies: z.array(z.string()).default([]),\n        interfaces: z.array(z.string()).default([]),\n        implementation: z.string().max(5000),\n        tests: z.array(z.string()).default([]),\n        documentation: z.string().max(5000)\n      })),\n      dependencies: z.array(z.string()).default([]),\n      responsibilities: z.array(z.string()).default([]),\n      patterns: z.array(z.string()).default([])\n    })).optional(),\n    patterns: z.array(z.string()).optional(),\n    principles: z.array(z.string()).optional(),\n    conventions: z.record(z.any()).optional(),\n    tools: z.array(z.string()).optional(),\n    frameworks: z.array(z.string()).optional(),\n    libraries: z.array(z.string()).optional(),\n    customFields: CustomFieldsSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/architecture.dto.ts",
        "start": 76,
        "end": 104,
        "startLoc": {
          "line": 76,
          "column": 18,
          "position": 859
        },
        "endLoc": {
          "line": 104,
          "column": 19,
          "position": 1370
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 26,
        "end": 102,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 226
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 1491
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "type: z.enum(['hexagonal', 'layered', 'microservices', 'monolithic', 'event_driven']).optional(),\n  status: z.enum(['design', 'implementation', 'testing', 'deployed', 'maintenance']).optional(),\n  layerType: z.enum(['domain', 'application', 'infrastructure', 'presentation', 'shared']).optional(),\n  componentType: z.enum(['entity', 'repository', 'use_case', 'service', 'controller', 'middleware', 'dto', 'route']).optional(),\n  isActive: z.coerce.boolean().optional(),\n  hasMetrics: z.coerce.boolean().optional(),\n  minQualityScore: z.coerce.number().min(0).max(10).optional(),\n  maxQualityScore: z.coerce.number().min(0).max(10).optional(),\n  lastAnalysisFrom: z.coerce.date().optional(),\n  lastAnalysisTo: z.coerce.date().optional()\n});",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/architecture.dto.ts",
        "start": 127,
        "end": 137,
        "startLoc": {
          "line": 127,
          "column": 3,
          "position": 1504
        },
        "endLoc": {
          "line": 137,
          "column": 2,
          "position": 1755
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/routes/architecture.routes.ts",
        "start": 153,
        "end": 164,
        "startLoc": {
          "line": 153,
          "column": 9,
          "position": 1928
        },
        "endLoc": {
          "line": 164,
          "column": 2,
          "position": 2182
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "({\n    type: z.enum(['hexagonal', 'layered', 'microservices', 'monolithic', 'event_driven']).optional(),\n    status: z.enum(['design', 'implementation', 'testing', 'deployed', 'maintenance']).optional(),\n    layerType: z.enum(['domain', 'application', 'infrastructure', 'presentation', 'shared']).optional(),\n    componentType: z.enum(['entity', 'repository', 'use_case', 'service', 'controller', 'middleware', 'dto', 'route']).optional(),\n    isActive: z.boolean",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/dto/architecture.dto.ts",
        "start": 267,
        "end": 272,
        "startLoc": {
          "line": 267,
          "column": 7,
          "position": 3189
        },
        "endLoc": {
          "line": 272,
          "column": 8,
          "position": 3327
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/architecture.dto.ts",
        "start": 126,
        "end": 157,
        "startLoc": {
          "line": 126,
          "column": 7,
          "position": 1500
        },
        "endLoc": {
          "line": 157,
          "column": 7,
          "position": 2062
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ");\n\n      if (!user) {\n        res.status(404).json({\n          success: false,\n          error: 'User not found',\n          timestamp: new Date()\n        } as ApiResponse);\n        return;\n      }\n\n      const response: ApiResponse<UserResponse> = {\n        success: true,\n        data: transformUserToResponse(user),\n        timestamp: new Date(),\n        requestId: req.headers['x-request-id'] as string\n      };\n\n      res.status(200).json(response);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getUsersByOrganization",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/user.controller.ts",
        "start": 209,
        "end": 233,
        "startLoc": {
          "line": 209,
          "column": 6,
          "position": 1628
        },
        "endLoc": {
          "line": 233,
          "column": 23,
          "position": 1800
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/user.controller.ts",
        "start": 172,
        "end": 196,
        "startLoc": {
          "line": 172,
          "column": 7,
          "position": 1325
        },
        "endLoc": {
          "line": 196,
          "column": 15,
          "position": 1497
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ");\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          error: result.error,\n          timestamp: new Date()\n        } as ApiResponse);\n        return;\n      }\n\n      const response: ApiResponse = {\n        success: true,\n        data: {\n          total: result.results.length,\n          successful: result.results.filter(r => r.success).length,\n          failed: result.results.filter(r => !r.success).length,\n          results: result.results\n        },\n        message: 'Bulk delete completed'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/user.controller.ts",
        "start": 364,
        "end": 383,
        "startLoc": {
          "line": 364,
          "column": 7,
          "position": 2942
        },
        "endLoc": {
          "line": 383,
          "column": 24,
          "position": 3110
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/user.controller.ts",
        "start": 317,
        "end": 336,
        "startLoc": {
          "line": 317,
          "column": 7,
          "position": 2532
        },
        "endLoc": {
          "line": 336,
          "column": 24,
          "position": 2700
        }
      }
    },
    {
      "format": "typescript",
      "lines": 67,
      "fragment": "});\n\n      const response: ProductResponse = {\n        id: result.data.product.id.value,\n        organizationId: result.data.product.organizationId.value,\n        name: result.data.product.name,\n        description: result.data.product.description,\n        shortDescription: result.data.product.shortDescription,\n        sku: result.data.product.sku,\n        barcode: result.data.product.barcode,\n        type: result.data.product.type.value,\n        status: result.data.product.status.value,\n        category: result.data.product.category.value,\n        brand: result.data.product.brand?.value,\n        supplier: result.data.product.supplier?.value,\n        settings: {\n          inventory: result.data.product.settings.inventory,\n          pricing: {\n            costPrice: result.data.product.settings.pricing.costPrice ? {\n              amount: result.data.product.settings.pricing.costPrice.amount,\n              currency: result.data.product.settings.pricing.costPrice.currency\n            } : undefined,\n            sellingPrice: {\n              amount: result.data.product.settings.pricing.sellingPrice.amount,\n              currency: result.data.product.settings.pricing.sellingPrice.currency\n            },\n            compareAtPrice: result.data.product.settings.pricing.compareAtPrice ? {\n              amount: result.data.product.settings.pricing.compareAtPrice.amount,\n              currency: result.data.product.settings.pricing.compareAtPrice.currency\n            } : undefined,\n            margin: result.data.product.settings.pricing.margin\n          },\n          shipping: result.data.product.settings.shipping,\n          seo: result.data.product.settings.seo,\n          customFields: result.data.product.settings.customFields,\n          tags: result.data.product.settings.tags,\n          notes: result.data.product.settings.notes\n        },\n        images: result.data.product.images,\n        documents: result.data.product.documents,\n        specifications: result.data.product.specifications,\n        variants: result.data.product.variants?.map(variant => ({\n          id: variant.id,\n          name: variant.name,\n          sku: variant.sku,\n          price: {\n            amount: variant.price.amount,\n            currency: variant.price.currency\n          },\n          compareAtPrice: variant.compareAtPrice ? {\n            amount: variant.compareAtPrice.amount,\n            currency: variant.compareAtPrice.currency\n          } : undefined,\n          costPrice: variant.costPrice ? {\n            amount: variant.costPrice.amount,\n            currency: variant.costPrice.currency\n          } : undefined,\n          inventory: variant.inventory,\n          attributes: variant.attributes,\n          isActive: variant.isActive\n        })),\n        isActive: result.data.product.isActive,\n        createdAt: result.data.product.createdAt,\n        updatedAt: result.data.product.updatedAt\n      };\n\n      res.status(200",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 139,
        "end": 205,
        "startLoc": {
          "line": 139,
          "column": 7,
          "position": 1330
        },
        "endLoc": {
          "line": 205,
          "column": 4,
          "position": 2102
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 53,
        "end": 119,
        "startLoc": {
          "line": 53,
          "column": 7,
          "position": 368
        },
        "endLoc": {
          "line": 119,
          "column": 4,
          "position": 1140
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "product.variants?.map(variant => ({\n          id: variant.id,\n          name: variant.name,\n          sku: variant.sku,\n          price: {\n            amount: variant.price.amount,\n            currency: variant.price.currency\n          },\n          compareAtPrice: variant.compareAtPrice ? {\n            amount: variant.compareAtPrice.amount,\n            currency: variant.compareAtPrice.currency\n          } : undefined,\n          costPrice: variant.costPrice ? {\n            amount: variant.costPrice.amount,\n            currency: variant.costPrice.currency\n          } : undefined,\n          inventory: variant.inventory,\n          attributes: variant.attributes,\n          isActive: variant.isActive\n        })),\n        isActive: product",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 283,
        "end": 303,
        "startLoc": {
          "line": 283,
          "column": 2,
          "position": 2848
        },
        "endLoc": {
          "line": 303,
          "column": 8,
          "position": 3038
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 94,
        "end": 114,
        "startLoc": {
          "line": 94,
          "column": 2,
          "position": 906
        },
        "endLoc": {
          "line": 114,
          "column": 7,
          "position": 1096
        }
      }
    },
    {
      "format": "typescript",
      "lines": 63,
      "fragment": "{\n          id: product.id.value,\n          organizationId: product.organizationId.value,\n          name: product.name,\n          description: product.description,\n          shortDescription: product.shortDescription,\n          sku: product.sku,\n          barcode: product.barcode,\n          type: product.type.value,\n          status: product.status.value,\n          category: product.category.value,\n          brand: product.brand?.value,\n          supplier: product.supplier?.value,\n          settings: {\n            inventory: product.settings.inventory,\n            pricing: {\n              costPrice: product.settings.pricing.costPrice ? {\n                amount: product.settings.pricing.costPrice.amount,\n                currency: product.settings.pricing.costPrice.currency\n              } : undefined,\n              sellingPrice: {\n                amount: product.settings.pricing.sellingPrice.amount,\n                currency: product.settings.pricing.sellingPrice.currency\n              },\n              compareAtPrice: product.settings.pricing.compareAtPrice ? {\n                amount: product.settings.pricing.compareAtPrice.amount,\n                currency: product.settings.pricing.compareAtPrice.currency\n              } : undefined,\n              margin: product.settings.pricing.margin\n            },\n            shipping: product.settings.shipping,\n            seo: product.settings.seo,\n            customFields: product.settings.customFields,\n            tags: product.settings.tags,\n            notes: product.settings.notes\n          },\n          images: product.images,\n          documents: product.documents,\n          specifications: product.specifications,\n          variants: product.variants?.map(variant => ({\n            id: variant.id,\n            name: variant.name,\n            sku: variant.sku,\n            price: {\n              amount: variant.price.amount,\n              currency: variant.price.currency\n            },\n            compareAtPrice: variant.compareAtPrice ? {\n              amount: variant.compareAtPrice.amount,\n              currency: variant.compareAtPrice.currency\n            } : undefined,\n            costPrice: variant.costPrice ? {\n              amount: variant.costPrice.amount,\n              currency: variant.costPrice.currency\n            } : undefined,\n            inventory: variant.inventory,\n            attributes: variant.attributes,\n            isActive: variant.isActive\n          })),\n          isActive: product.isActive,\n          createdAt: product.createdAt,\n          updatedAt: product.updatedAt\n        })",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 375,
        "end": 437,
        "startLoc": {
          "line": 375,
          "column": 2,
          "position": 3800
        },
        "endLoc": {
          "line": 437,
          "column": 2,
          "position": 4413
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 244,
        "end": 306,
        "startLoc": {
          "line": 244,
          "column": 2,
          "position": 2449
        },
        "endLoc": {
          "line": 306,
          "column": 2,
          "position": 3062
        }
      }
    },
    {
      "format": "typescript",
      "lines": 67,
      "fragment": ".map(product => ({\n          id: product.id.value,\n          organizationId: product.organizationId.value,\n          name: product.name,\n          description: product.description,\n          shortDescription: product.shortDescription,\n          sku: product.sku,\n          barcode: product.barcode,\n          type: product.type.value,\n          status: product.status.value,\n          category: product.category.value,\n          brand: product.brand?.value,\n          supplier: product.supplier?.value,\n          settings: {\n            inventory: product.settings.inventory,\n            pricing: {\n              costPrice: product.settings.pricing.costPrice ? {\n                amount: product.settings.pricing.costPrice.amount,\n                currency: product.settings.pricing.costPrice.currency\n              } : undefined,\n              sellingPrice: {\n                amount: product.settings.pricing.sellingPrice.amount,\n                currency: product.settings.pricing.sellingPrice.currency\n              },\n              compareAtPrice: product.settings.pricing.compareAtPrice ? {\n                amount: product.settings.pricing.compareAtPrice.amount,\n                currency: product.settings.pricing.compareAtPrice.currency\n              } : undefined,\n              margin: product.settings.pricing.margin\n            },\n            shipping: product.settings.shipping,\n            seo: product.settings.seo,\n            customFields: product.settings.customFields,\n            tags: product.settings.tags,\n            notes: product.settings.notes\n          },\n          images: product.images,\n          documents: product.documents,\n          specifications: product.specifications,\n          variants: product.variants?.map(variant => ({\n            id: variant.id,\n            name: variant.name,\n            sku: variant.sku,\n            price: {\n              amount: variant.price.amount,\n              currency: variant.price.currency\n            },\n            compareAtPrice: variant.compareAtPrice ? {\n              amount: variant.compareAtPrice.amount,\n              currency: variant.compareAtPrice.currency\n            } : undefined,\n            costPrice: variant.costPrice ? {\n              amount: variant.costPrice.amount,\n              currency: variant.costPrice.currency\n            } : undefined,\n            inventory: variant.inventory,\n            attributes: variant.attributes,\n            isActive: variant.isActive\n          })),\n          isActive: product.isActive,\n          createdAt: product.createdAt,\n          updatedAt: product.updatedAt\n        })),\n        pagination: {\n          page: query.page,\n          limit: query.limit,\n          total:",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 465,
        "end": 531,
        "startLoc": {
          "line": 465,
          "column": 9,
          "position": 4658
        },
        "endLoc": {
          "line": 531,
          "column": 2,
          "position": 5309
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/product.controller.ts",
        "start": 375,
        "end": 441,
        "startLoc": {
          "line": 375,
          "column": 18,
          "position": 3792
        },
        "endLoc": {
          "line": 441,
          "column": 2,
          "position": 4443
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "{\n        id: movement.id,\n        productId: movement.productId,\n        warehouseId: movement.warehouseId,\n        locationId: movement.locationId,\n        movementType: movement.movementType.value,\n        movementReason: movement.movementReason.value,\n        quantity: movement.quantity,\n        unitCost: {\n          amount: movement.unitCost.amount,\n          currency: movement.unitCost.currency\n        },\n        totalCost: {\n          amount: movement.totalCost.amount,\n          currency: movement.totalCost.currency\n        },\n        reference: movement.reference,\n        referenceId: movement.referenceId,\n        notes: movement.notes,\n        batchNumber: movement.batchNumber,\n        expirationDate: movement.expirationDate,\n        serialNumber: movement.serialNumber,\n        supplierId: movement.supplierId,\n        customerId: movement.customerId,\n        userId: movement.userId,\n        movementDate: movement.movementDate,\n        status: movement.status.value\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/inventory-kardex.controller.ts",
        "start": 381,
        "end": 408,
        "startLoc": {
          "line": 381,
          "column": 2,
          "position": 3784
        },
        "endLoc": {
          "line": 408,
          "column": 2,
          "position": 4017
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/inventory-kardex/record-movement.use-case.ts",
        "start": 177,
        "end": 205,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1253
        },
        "endLoc": {
          "line": 205,
          "column": 2,
          "position": 1488
        }
      }
    },
    {
      "format": "typescript",
      "lines": 37,
      "fragment": ");\n\n      const response: InteractionResponse = {\n        id: result.data.interaction.id,\n        organizationId: result.data.interaction.organizationId,\n        contactId: result.data.interaction.contactId,\n        companyId: result.data.interaction.companyId,\n        userId: result.data.interaction.userId,\n        type: result.data.interaction.type,\n        status: result.data.interaction.status,\n        priority: result.data.interaction.priority,\n        subject: result.data.interaction.subject,\n        description: result.data.interaction.description,\n        scheduledAt: result.data.interaction.scheduledAt,\n        completedAt: result.data.interaction.completedAt,\n        duration: result.data.interaction.duration,\n        outcome: result.data.interaction.outcome,\n        nextAction: result.data.interaction.nextAction,\n        nextActionDate: result.data.interaction.nextActionDate,\n        tags: result.data.interaction.tags,\n        customFields: result.data.interaction.customFields,\n        attachments: result.data.interaction.attachments,\n        createdAt: result.data.interaction.createdAt,\n        updatedAt: result.data.interaction.updatedAt\n      };\n\n      res.status(201).json({\n        success: true,\n        data: { interaction: response }\n      });\n    } catch (error) {\n      res.status(400).json(createErrorResponse(error));\n    }\n  }\n\n  // ========================================================================\n  // CREATE TASK",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 108,
        "end": 144,
        "startLoc": {
          "line": 108,
          "column": 7,
          "position": 890
        },
        "endLoc": {
          "line": 144,
          "column": 15,
          "position": 1259
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 51,
        "end": 87,
        "startLoc": {
          "line": 51,
          "column": 8,
          "position": 345
        },
        "endLoc": {
          "line": 87,
          "column": 32,
          "position": 714
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ",\n        req.body.companyId\n      );\n\n      const response: InteractionResponse = {\n        id: result.data.interaction.id,\n        organizationId: result.data.interaction.organizationId,\n        contactId: result.data.interaction.contactId,\n        companyId: result.data.interaction.companyId,\n        userId: result.data.interaction.userId,\n        type: result.data.interaction.type,\n        status: result.data.interaction.status,\n        priority: result.data.interaction.priority,\n        subject: result.data.interaction.subject,\n        description: result.data.interaction.description,\n        scheduledAt: result.data.interaction.scheduledAt,\n        completedAt: result.data.interaction.completedAt,\n        duration: result.data.interaction.duration,\n        outcome: result.data.interaction.outcome,\n        nextAction: result.data.interaction.nextAction,\n        nextActionDate: result.data.interaction.nextActionDate,\n        tags: result.data.interaction.tags,\n        customFields: result.data.interaction.customFields,\n        attachments: result.data.interaction.attachments,\n        createdAt: result.data.interaction.createdAt,\n        updatedAt: result.data.interaction.updatedAt\n      };\n\n      res.status(201).json({\n        success: true,\n        data: { interaction: response }\n      });\n    } catch (error) {\n      res.status(400).json(createErrorResponse(error));\n    }\n  }\n\n  // ========================================================================\n  // CREATE NOTE",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 163,
        "end": 201,
        "startLoc": {
          "line": 163,
          "column": 9,
          "position": 1425
        },
        "endLoc": {
          "line": 201,
          "column": 15,
          "position": 1804
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 106,
        "end": 87,
        "startLoc": {
          "line": 106,
          "column": 12,
          "position": 880
        },
        "endLoc": {
          "line": 87,
          "column": 32,
          "position": 714
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ",\n        req.body.companyId\n      );\n\n      const response: InteractionResponse = {\n        id: result.data.interaction.id,\n        organizationId: result.data.interaction.organizationId,\n        contactId: result.data.interaction.contactId,\n        companyId: result.data.interaction.companyId,\n        userId: result.data.interaction.userId,\n        type: result.data.interaction.type,\n        status: result.data.interaction.status,\n        priority: result.data.interaction.priority,\n        subject: result.data.interaction.subject,\n        description: result.data.interaction.description,\n        scheduledAt: result.data.interaction.scheduledAt,\n        completedAt: result.data.interaction.completedAt,\n        duration: result.data.interaction.duration,\n        outcome: result.data.interaction.outcome,\n        nextAction: result.data.interaction.nextAction,\n        nextActionDate: result.data.interaction.nextActionDate,\n        tags: result.data.interaction.tags,\n        customFields: result.data.interaction.customFields,\n        attachments: result.data.interaction.attachments,\n        createdAt: result.data.interaction.createdAt,\n        updatedAt: result.data.interaction.updatedAt\n      };\n\n      res.status(201).json({\n        success: true,\n        data: { interaction: response }\n      });\n    } catch (error) {\n      res.status(400).json(createErrorResponse(error));\n    }\n  }\n\n  // ========================================================================\n  // CREATE FOLLOW-UP",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 219,
        "end": 257,
        "startLoc": {
          "line": 219,
          "column": 12,
          "position": 1962
        },
        "endLoc": {
          "line": 257,
          "column": 20,
          "position": 2341
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 106,
        "end": 87,
        "startLoc": {
          "line": 106,
          "column": 12,
          "position": 880
        },
        "endLoc": {
          "line": 87,
          "column": 32,
          "position": 714
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ",\n        req.body.companyId\n      );\n\n      const response: InteractionResponse = {\n        id: result.data.interaction.id,\n        organizationId: result.data.interaction.organizationId,\n        contactId: result.data.interaction.contactId,\n        companyId: result.data.interaction.companyId,\n        userId: result.data.interaction.userId,\n        type: result.data.interaction.type,\n        status: result.data.interaction.status,\n        priority: result.data.interaction.priority,\n        subject: result.data.interaction.subject,\n        description: result.data.interaction.description,\n        scheduledAt: result.data.interaction.scheduledAt,\n        completedAt: result.data.interaction.completedAt,\n        duration: result.data.interaction.duration,\n        outcome: result.data.interaction.outcome,\n        nextAction: result.data.interaction.nextAction,\n        nextActionDate: result.data.interaction.nextActionDate,\n        tags: result.data.interaction.tags,\n        customFields: result.data.interaction.customFields,\n        attachments: result.data.interaction.attachments,\n        createdAt: result.data.interaction.createdAt,\n        updatedAt: result.data.interaction.updatedAt\n      };\n\n      res.status(201).json({\n        success: true,\n        data: { interaction: response }\n      });\n    } catch (error) {\n      res.status(400).json(createErrorResponse(error));\n    }\n  }\n\n  // ========================================================================\n  // UPDATE INTERACTION",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 275,
        "end": 313,
        "startLoc": {
          "line": 275,
          "column": 15,
          "position": 2499
        },
        "endLoc": {
          "line": 313,
          "column": 22,
          "position": 2878
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 106,
        "end": 87,
        "startLoc": {
          "line": 106,
          "column": 12,
          "position": 880
        },
        "endLoc": {
          "line": 87,
          "column": 32,
          "position": 714
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ".execute(request);\n\n      const response: InteractionResponse = {\n        id: result.data.interaction.id,\n        organizationId: result.data.interaction.organizationId,\n        contactId: result.data.interaction.contactId,\n        companyId: result.data.interaction.companyId,\n        userId: result.data.interaction.userId,\n        type: result.data.interaction.type,\n        status: result.data.interaction.status,\n        priority: result.data.interaction.priority,\n        subject: result.data.interaction.subject,\n        description: result.data.interaction.description,\n        scheduledAt: result.data.interaction.scheduledAt,\n        completedAt: result.data.interaction.completedAt,\n        duration: result.data.interaction.duration,\n        outcome: result.data.interaction.outcome,\n        nextAction: result.data.interaction.nextAction,\n        nextActionDate: result.data.interaction.nextActionDate,\n        tags: result.data.interaction.tags,\n        customFields: result.data.interaction.customFields,\n        attachments: result.data.interaction.attachments,\n        createdAt: result.data.interaction.createdAt,\n        updatedAt: result.data.interaction.updatedAt\n      };\n\n      res.status(200",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 333,
        "end": 359,
        "startLoc": {
          "line": 333,
          "column": 25,
          "position": 3046
        },
        "endLoc": {
          "line": 359,
          "column": 4,
          "position": 3348
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 51,
        "end": 77,
        "startLoc": {
          "line": 51,
          "column": 25,
          "position": 341
        },
        "endLoc": {
          "line": 77,
          "column": 4,
          "position": 643
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "{\n          id: interaction.id,\n          organizationId: interaction.organizationId,\n          contactId: interaction.contactId,\n          companyId: interaction.companyId,\n          userId: interaction.userId,\n          type: interaction.type,\n          status: interaction.status,\n          priority: interaction.priority,\n          subject: interaction.subject,\n          description: interaction.description,\n          scheduledAt: interaction.scheduledAt,\n          completedAt: interaction.completedAt,\n          duration: interaction.duration,\n          outcome: interaction.outcome,\n          nextAction: interaction.nextAction,\n          nextActionDate: interaction.nextActionDate,\n          tags: interaction.tags,\n          customFields: interaction.customFields,\n          attachments: interaction.attachments,\n          createdAt: interaction.createdAt,\n          updatedAt: interaction.updatedAt\n        })",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 465,
        "end": 487,
        "startLoc": {
          "line": 465,
          "column": 2,
          "position": 4501
        },
        "endLoc": {
          "line": 487,
          "column": 2,
          "position": 4693
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 393,
        "end": 415,
        "startLoc": {
          "line": 393,
          "column": 2,
          "position": 3630
        },
        "endLoc": {
          "line": 415,
          "column": 2,
          "position": 3822
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "(req: Request, res: Response): Promise<void> {\n    try {\n      const organizationId = req.user?.organizationId;\n\n      if (!organizationId) {\n        res.status(401).json(createErrorResponse(new Error('Unauthorized')));\n        return;\n      }\n\n      const query: InteractionSearchQuery = {\n        page: parseInt(req.query.page as string) || 1,\n        limit: parseInt(req.query.limit as string) || 20,\n        sortBy: (req.query.sortBy as any) || 'createdAt',\n        sortOrder: (req.query.sortOrder as any) || 'desc'\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 504,
        "end": 518,
        "startLoc": {
          "line": 504,
          "column": 25,
          "position": 4789
        },
        "endLoc": {
          "line": 518,
          "column": 2,
          "position": 4969
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 430,
        "end": 443,
        "startLoc": {
          "line": 430,
          "column": 30,
          "position": 3911
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 4089
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": ", query);\n\n      const response: InteractionListResponse = {\n        data: result.data.map(interaction => ({\n          id: interaction.id,\n          organizationId: interaction.organizationId,\n          contactId: interaction.contactId,\n          companyId: interaction.companyId,\n          userId: interaction.userId,\n          type: interaction.type,\n          status: interaction.status,\n          priority: interaction.priority,\n          subject: interaction.subject,\n          description: interaction.description,\n          scheduledAt: interaction.scheduledAt,\n          completedAt: interaction.completedAt,\n          duration: interaction.duration,\n          outcome: interaction.outcome,\n          nextAction: interaction.nextAction,\n          nextActionDate: interaction.nextActionDate,\n          tags: interaction.tags,\n          customFields: interaction.customFields,\n          attachments: interaction.attachments,\n          createdAt: interaction.createdAt,\n          updatedAt: interaction.updatedAt\n        })),\n        pagination: result.pagination\n      };\n\n      res.status(200).json({\n        success: true,\n        data: response\n      });\n    } catch (error) {\n      res.status(400).json(createErrorResponse(error));\n    }\n  }\n\n  // ========================================================================\n  // GET INTERACTIONS BY COMPANY",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 520,
        "end": 559,
        "startLoc": {
          "line": 520,
          "column": 10,
          "position": 4993
        },
        "endLoc": {
          "line": 559,
          "column": 31,
          "position": 5305
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 462,
        "end": 501,
        "startLoc": {
          "line": 462,
          "column": 15,
          "position": 4467
        },
        "endLoc": {
          "line": 501,
          "column": 31,
          "position": 4779
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "(req: Request, res: Response): Promise<void> {\n    try {\n      const organizationId = req.user?.organizationId;\n\n      if (!organizationId) {\n        res.status(401).json(createErrorResponse(new Error('Unauthorized')));\n        return;\n      }\n\n      const query: InteractionSearchQuery = {\n        page: parseInt(req.query.page as string) || 1,\n        limit: parseInt(req.query.limit as string) || 20,\n        sortBy: (req.query.sortBy as any) || 'createdAt',\n        sortOrder: (req.query.sortOrder as any) || 'desc'\n      };\n\n      const result = await this.interactionRepository.findByCompanyId",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 562,
        "end": 578,
        "startLoc": {
          "line": 562,
          "column": 25,
          "position": 5315
        },
        "endLoc": {
          "line": 578,
          "column": 16,
          "position": 5512
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 430,
        "end": 520,
        "startLoc": {
          "line": 430,
          "column": 30,
          "position": 3911
        },
        "endLoc": {
          "line": 520,
          "column": 16,
          "position": 4986
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": ", query);\n\n      const response: InteractionListResponse = {\n        data: result.data.map(interaction => ({\n          id: interaction.id,\n          organizationId: interaction.organizationId,\n          contactId: interaction.contactId,\n          companyId: interaction.companyId,\n          userId: interaction.userId,\n          type: interaction.type,\n          status: interaction.status,\n          priority: interaction.priority,\n          subject: interaction.subject,\n          description: interaction.description,\n          scheduledAt: interaction.scheduledAt,\n          completedAt: interaction.completedAt,\n          duration: interaction.duration,\n          outcome: interaction.outcome,\n          nextAction: interaction.nextAction,\n          nextActionDate: interaction.nextActionDate,\n          tags: interaction.tags,\n          customFields: interaction.customFields,\n          attachments: interaction.attachments,\n          createdAt: interaction.createdAt,\n          updatedAt: interaction.updatedAt\n        })),\n        pagination: result.pagination\n      };\n\n      res.status(200).json({\n        success: true,\n        data: response\n      });\n    } catch (error) {\n      res.status(400).json(createErrorResponse(error));\n    }\n  }\n\n  // ========================================================================\n  // GET INTERACTION STATS",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 578,
        "end": 617,
        "startLoc": {
          "line": 578,
          "column": 10,
          "position": 5519
        },
        "endLoc": {
          "line": 617,
          "column": 25,
          "position": 5831
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 462,
        "end": 501,
        "startLoc": {
          "line": 462,
          "column": 15,
          "position": 4467
        },
        "endLoc": {
          "line": 501,
          "column": 31,
          "position": 4779
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "type: req.query.type as any,\n        status: req.query.status as any,\n        priority: req.query.priority as any,\n        contactId: req.query.contactId as string,\n        companyId: req.query.companyId as string,\n        userId: req.query.userId as string,\n        scheduledFrom: req.query.scheduledFrom ? new Date(req.query.scheduledFrom as string) : undefined,\n        scheduledTo: req.query.scheduledTo ? new Date(req.query.scheduledTo as string) : undefined,\n        completedFrom: req.query.completedFrom ? new Date(req.query.completedFrom as string) : undefined,\n        completedTo: req.query.completedTo ? new Date(req.query.completedTo as string) : undefined,\n        tags: req.query.tags as string,\n        hasOutcome: req.query.hasOutcome ? req.query.hasOutcome === 'true' : undefined,\n        hasNextAction: req.query.hasNextAction ? req.query.hasNextAction === 'true' : undefined,\n        overdue: req.query.overdue ? req.query.overdue === 'true' : undefined,\n        upcoming: req.query.upcoming ? req.query.upcoming === 'true' : undefined\n      };\n\n      const stats",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 630,
        "end": 647,
        "startLoc": {
          "line": 630,
          "column": 9,
          "position": 5936
        },
        "endLoc": {
          "line": 647,
          "column": 6,
          "position": 6283
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 445,
        "end": 462,
        "startLoc": {
          "line": 445,
          "column": 9,
          "position": 4107
        },
        "endLoc": {
          "line": 462,
          "column": 7,
          "position": 4454
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ".map(interaction => ({\n          id: interaction.id,\n          organizationId: interaction.organizationId,\n          contactId: interaction.contactId,\n          companyId: interaction.companyId,\n          userId: interaction.userId,\n          type: interaction.type,\n          status: interaction.status,\n          priority: interaction.priority,\n          subject: interaction.subject,\n          description: interaction.description,\n          scheduledAt: interaction.scheduledAt,\n          completedAt: interaction.completedAt,\n          duration: interaction.duration,\n          outcome: interaction.outcome,\n          nextAction: interaction.nextAction,\n          nextActionDate: interaction.nextActionDate,\n          tags: interaction.tags,\n          customFields: interaction.customFields,\n          attachments: interaction.attachments,\n          createdAt: interaction.createdAt,\n          updatedAt: interaction.updatedAt\n        })),\n        upcomingInteractions",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 692,
        "end": 715,
        "startLoc": {
          "line": 692,
          "column": 19,
          "position": 6670
        },
        "endLoc": {
          "line": 715,
          "column": 21,
          "position": 6875
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 465,
        "end": 488,
        "startLoc": {
          "line": 465,
          "column": 5,
          "position": 4493
        },
        "endLoc": {
          "line": 488,
          "column": 11,
          "position": 4698
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ".map(interaction => ({\n          id: interaction.id,\n          organizationId: interaction.organizationId,\n          contactId: interaction.contactId,\n          companyId: interaction.companyId,\n          userId: interaction.userId,\n          type: interaction.type,\n          status: interaction.status,\n          priority: interaction.priority,\n          subject: interaction.subject,\n          description: interaction.description,\n          scheduledAt: interaction.scheduledAt,\n          completedAt: interaction.completedAt,\n          duration: interaction.duration,\n          outcome: interaction.outcome,\n          nextAction: interaction.nextAction,\n          nextActionDate: interaction.nextActionDate,\n          tags: interaction.tags,\n          customFields: interaction.customFields,\n          attachments: interaction.attachments,\n          createdAt: interaction.createdAt,\n          updatedAt: interaction.updatedAt\n        })),\n        overdueInteractions",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 715,
        "end": 738,
        "startLoc": {
          "line": 715,
          "column": 21,
          "position": 6881
        },
        "endLoc": {
          "line": 738,
          "column": 20,
          "position": 7086
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 465,
        "end": 488,
        "startLoc": {
          "line": 465,
          "column": 5,
          "position": 4493
        },
        "endLoc": {
          "line": 488,
          "column": 11,
          "position": 4698
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ".map(interaction => ({\n          id: interaction.id,\n          organizationId: interaction.organizationId,\n          contactId: interaction.contactId,\n          companyId: interaction.companyId,\n          userId: interaction.userId,\n          type: interaction.type,\n          status: interaction.status,\n          priority: interaction.priority,\n          subject: interaction.subject,\n          description: interaction.description,\n          scheduledAt: interaction.scheduledAt,\n          completedAt: interaction.completedAt,\n          duration: interaction.duration,\n          outcome: interaction.outcome,\n          nextAction: interaction.nextAction,\n          nextActionDate: interaction.nextActionDate,\n          tags: interaction.tags,\n          customFields: interaction.customFields,\n          attachments: interaction.attachments,\n          createdAt: interaction.createdAt,\n          updatedAt: interaction.updatedAt\n        }))\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 738,
        "end": 761,
        "startLoc": {
          "line": 738,
          "column": 20,
          "position": 7092
        },
        "endLoc": {
          "line": 761,
          "column": 2,
          "position": 7296
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 465,
        "end": 487,
        "startLoc": {
          "line": 465,
          "column": 5,
          "position": 4493
        },
        "endLoc": {
          "line": 487,
          "column": 2,
          "position": 4695
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "(req: Request, res: Response): Promise<void> {\n    try {\n      const organizationId = req.user?.organizationId;\n\n      if (!organizationId) {\n        res.status(401).json(createErrorResponse(new Error('Unauthorized')));\n        return;\n      }\n\n      const interaction = await this.interactionRepository.findById(req.params.id);\n\n      if (!interaction) {\n        res.status(404).json(createErrorResponse(new Error('Interaction not found')));\n        return;\n      }\n\n      if (interaction.organizationId !== organizationId) {\n        res.status(403).json(createErrorResponse(new Error('Forbidden')));\n        return;\n      }\n\n      await",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 776,
        "end": 797,
        "startLoc": {
          "line": 776,
          "column": 18,
          "position": 7386
        },
        "endLoc": {
          "line": 797,
          "column": 6,
          "position": 7578
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/interaction.controller.ts",
        "start": 372,
        "end": 393,
        "startLoc": {
          "line": 372,
          "column": 19,
          "position": 3429
        },
        "endLoc": {
          "line": 393,
          "column": 6,
          "position": 3621
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ".layers.map((layer: any) => ({\n        id: layer.id,\n        name: layer.name,\n        type: layer.type.value,\n        description: layer.description,\n        components: layer.components.map((component: any) => ({\n          id: component.id,\n          name: component.name,\n          type: component.type.value,\n          layer: component.layer.value,\n          description: component.description,\n          dependencies: component.dependencies,\n          interfaces: component.interfaces,\n          implementation: component.implementation,\n          tests: component.tests,\n          documentation: component.documentation,\n          createdAt: component.createdAt,\n          updatedAt: component.updatedAt\n        })),\n        dependencies: layer.dependencies,\n        responsibilities: layer.responsibilities,\n        patterns: layer.patterns,\n        createdAt: layer.createdAt,\n        updatedAt: layer.updatedAt\n      })),\n      lastAnalysisDate",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/presentation/controllers/architecture.controller.ts",
        "start": 370,
        "end": 395,
        "startLoc": {
          "line": 370,
          "column": 13,
          "position": 3687
        },
        "endLoc": {
          "line": 395,
          "column": 17,
          "position": 3932
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/controllers/architecture.controller.ts",
        "start": 306,
        "end": 331,
        "startLoc": {
          "line": 306,
          "column": 9,
          "position": 3035
        },
        "endLoc": {
          "line": 331,
          "column": 9,
          "position": 3280
        }
      }
    },
    {
      "format": "typescript",
      "lines": 50,
      "fragment": "type?: string;\n  status?: string;\n  source?: string;\n  priority?: string;\n  assignedUserId?: string;\n  companyId?: string;\n  department?: string;\n  industry?: string;\n  profession?: string;\n  isActive?: boolean;\n  isVerified?: boolean;\n  isOptedIn?: boolean;\n  hasCompany?: boolean;\n  isAssigned?: boolean;\n  leadScoreMin?: number;\n  leadScoreMax?: number;\n  engagementScoreMin?: number;\n  engagementScoreMax?: number;\n  revenueMin?: number;\n  revenueMax?: number;\n  currency?: string;\n  salaryMin?: number;\n  salaryMax?: number;\n  experienceMin?: number;\n  experienceMax?: number;\n  ageMin?: number;\n  ageMax?: number;\n  lastContactAfter?: Date;\n  lastContactBefore?: Date;\n  nextFollowUpAfter?: Date;\n  nextFollowUpBefore?: Date;\n  lastEmailOpenAfter?: Date;\n  lastEmailOpenBefore?: Date;\n  lastEmailClickAfter?: Date;\n  lastEmailClickBefore?: Date;\n  lastWebsiteVisitAfter?: Date;\n  lastWebsiteVisitBefore?: Date;\n  lastSocialMediaInteractionAfter?: Date;\n  lastSocialMediaInteractionBefore?: Date;\n  createdAfter?: Date;\n  createdBefore?: Date;\n  updatedAfter?: Date;\n  updatedBefore?: Date;\n  birthdayAfter?: Date;\n  birthdayBefore?: Date;\n  anniversaryAfter?: Date;\n  anniversaryBefore?: Date;\n  tags?: string[];\n  customFields?: Record<string, any>;\n  sortBy",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/repositories/contact.repository.ts",
        "start": 274,
        "end": 323,
        "startLoc": {
          "line": 274,
          "column": 3,
          "position": 3097
        },
        "endLoc": {
          "line": 323,
          "column": 7,
          "position": 3497
        }
      },
      "secondFile": {
        "name": "apps/api/src/domain/repositories/contact.repository.ts",
        "start": 210,
        "end": 259,
        "startLoc": {
          "line": 210,
          "column": 3,
          "position": 2606
        },
        "endLoc": {
          "line": 259,
          "column": 2,
          "position": 3005
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "type?: string;\n  status?: string;\n  size?: string;\n  industry?: string;\n  source?: string;\n  assignedUserId?: string;\n  parentCompanyId?: string;\n  isActive?: boolean;\n  hasParentCompany?: boolean;\n  isAssigned?: boolean;\n  leadScoreMin?: number;\n  leadScoreMax?: number;\n  revenueMin?: number;\n  revenueMax?: number;\n  currency?: string;\n  employeeCountMin?: number;\n  employeeCountMax?: number;\n  foundedYearMin?: number;\n  foundedYearMax?: number;\n  lastContactAfter?: Date;\n  lastContactBefore?: Date;\n  nextFollowUpAfter?: Date;\n  nextFollowUpBefore?: Date;\n  createdAfter?: Date;\n  createdBefore?: Date;\n  updatedAfter?: Date;\n  updatedBefore?: Date;\n  tags?: string[];\n  customFields?: Record<string, any>;\n  sortBy",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/repositories/company.repository.ts",
        "start": 188,
        "end": 217,
        "startLoc": {
          "line": 188,
          "column": 3,
          "position": 1883
        },
        "endLoc": {
          "line": 217,
          "column": 7,
          "position": 2123
        }
      },
      "secondFile": {
        "name": "apps/api/src/domain/repositories/company.repository.ts",
        "start": 144,
        "end": 173,
        "startLoc": {
          "line": 144,
          "column": 3,
          "position": 1552
        },
        "endLoc": {
          "line": 173,
          "column": 2,
          "position": 1791
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "().optional(),\n  userId: z.string().uuid().optional(),\n  organizationId: z.string().uuid().optional(),\n  tags: z.array(z.string()).optional(),\n  minScore: z.number().min(0).max(1).optional(),\n  minRelevance: z.number().min(0).max(1).optional(),\n  minConfidence: z.number().min(0).max(1).optional(),\n  customFilters: z.record(z.any()).optional()\n});",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/entities/search-result.entity.ts",
        "start": 143,
        "end": 151,
        "startLoc": {
          "line": 143,
          "column": 5,
          "position": 827
        },
        "endLoc": {
          "line": 151,
          "column": 2,
          "position": 989
        }
      },
      "secondFile": {
        "name": "apps/api/src/presentation/dto/search.dto.ts",
        "start": 17,
        "end": 25,
        "startLoc": {
          "line": 17,
          "column": 9,
          "position": 184
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 347
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "(): any {\n    return {\n      id: this.props.id.value,\n      name: this.props.name,\n      slug: this.props.slug.value,\n      description: this.props.description,\n      website: this.props.website,\n      logo: this.props.logo,\n      settings: this.props.settings,\n      subscriptionTier: this.props.subscriptionTier.value,\n      status: this.props.status.value,\n      trialEndsAt: this.props.trialEndsAt,\n      billingEmail: this.props.billingEmail,\n      isActive: this.props.isActive,\n      createdAt: this.props.createdAt,\n      updatedAt: this.props.updatedAt\n    };\n  }\n\n  // ========================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/entities/organization.entity.ts",
        "start": 406,
        "end": 425,
        "startLoc": {
          "line": 406,
          "column": 6,
          "position": 3047
        },
        "endLoc": {
          "line": 425,
          "column": 76,
          "position": 3230
        }
      },
      "secondFile": {
        "name": "apps/api/src/domain/entities/organization.entity.ts",
        "start": 387,
        "end": 406,
        "startLoc": {
          "line": 387,
          "column": 14,
          "position": 2863
        },
        "endLoc": {
          "line": 406,
          "column": 6,
          "position": 3046
        }
      }
    },
    {
      "format": "typescript",
      "lines": 54,
      "fragment": "= date;\n    this.props.updatedAt = new Date();\n  }\n\n  addTag(tag: string): void {\n    if (!this.props.tags) {\n      this.props.tags = [];\n    }\n    if (!this.props.tags.includes(tag)) {\n      this.props.tags.push(tag);\n      this.props.updatedAt = new Date();\n    }\n  }\n\n  removeTag(tag: string): void {\n    if (this.props.tags) {\n      this.props.tags = this.props.tags.filter(t => t !== tag);\n      this.props.updatedAt = new Date();\n    }\n  }\n\n  setCustomField(key: string, value: any): void {\n    if (!this.props.customFields) {\n      this.props.customFields = {};\n    }\n    this.props.customFields[key] = value;\n    this.props.updatedAt = new Date();\n  }\n\n  removeCustomField(key: string): void {\n    if (this.props.customFields) {\n      delete this.props.customFields[key];\n      this.props.updatedAt = new Date();\n    }\n  }\n\n  addAttachment(attachment: string): void {\n    if (!this.props.attachments) {\n      this.props.attachments = [];\n    }\n    if (!this.props.attachments.includes(attachment)) {\n      this.props.attachments.push(attachment);\n      this.props.updatedAt = new Date();\n    }\n  }\n\n  removeAttachment(attachment: string): void {\n    if (this.props.attachments) {\n      this.props.attachments = this.props.attachments.filter(a => a !== attachment);\n      this.props.updatedAt = new Date();\n    }\n  }\n\n  addCompetitor",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/entities/deal.entity.ts",
        "start": 204,
        "end": 257,
        "startLoc": {
          "line": 204,
          "column": 2,
          "position": 2042
        },
        "endLoc": {
          "line": 257,
          "column": 14,
          "position": 2572
        }
      },
      "secondFile": {
        "name": "apps/api/src/domain/entities/interaction.entity.ts",
        "start": 148,
        "end": 201,
        "startLoc": {
          "line": 148,
          "column": 2,
          "position": 1386
        },
        "endLoc": {
          "line": 201,
          "column": 76,
          "position": 1916
        }
      }
    },
    {
      "format": "typescript",
      "lines": 47,
      "fragment": "version: string;\n  encoding: string;\n  collation: string;\n  timezone: string;\n  connectionPool: {\n    min: number;\n    max: number;\n    idle: number;\n    acquire: number;\n    evict: number;\n  };\n  migrations: {\n    enabled: boolean;\n    directory: string;\n    table: string;\n    lockTable: string;\n  };\n  backup: {\n    enabled: boolean;\n    frequency: string;\n    retention: number;\n    compression: boolean;\n  };\n  monitoring: {\n    enabled: boolean;\n    slowQueryThreshold: number;\n    logLevel: string;\n    metrics: boolean;\n  };\n  security: {\n    ssl: boolean;\n    encryption: boolean;\n    auditLog: boolean;\n    rowLevelSecurity: boolean;\n  };\n  performance: {\n    queryOptimization: boolean;\n    indexOptimization: boolean;\n    connectionPooling: boolean;\n    caching: boolean;\n  };\n  customFields: Record<string, any>;\n  tags: string[];\n  notes: string;\n}\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/entities/database-schema.entity.ts",
        "start": 148,
        "end": 194,
        "startLoc": {
          "line": 148,
          "column": 3,
          "position": 1146
        },
        "endLoc": {
          "line": 194,
          "column": 7,
          "position": 1440
        }
      },
      "secondFile": {
        "name": "apps/api/src/application/use-cases/database-schema/create-database-schema.use-case.ts",
        "start": 14,
        "end": 58,
        "startLoc": {
          "line": 14,
          "column": 5,
          "position": 114
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 407
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "(): any {\n    return {\n      id: this.props.id.value,\n      organizationId: this.props.organizationId.value,\n      name: this.props.name,\n      legalName: this.props.legalName,\n      type: this.props.type.value,\n      status: this.props.status.value,\n      size: this.props.size.value,\n      industry: this.props.industry.value,\n      source: this.props.source.value,\n      website: this.props.website,\n      email: this.props.email,\n      phone: this.props.phone,\n      address: this.props.address?.toJSON(),\n      billingAddress: this.props.billingAddress?.toJSON(),\n      shippingAddress: this.props.shippingAddress?.toJSON(),\n      taxId: this.props.taxId,\n      vatNumber: this.props.vatNumber,\n      registrationNumber: this.props.registrationNumber,\n      description: this.props.description,\n      settings: this.props.settings,\n      annualRevenue: this.props.annualRevenue?.toJSON(),\n      employeeCount: this.props.employeeCount,\n      foundedYear: this.props.foundedYear,\n      parentCompanyId: this.props.parentCompanyId?.value,\n      assignedUserId: this.props.assignedUserId,\n      lastContactDate: this.props.lastContactDate,\n      nextFollowUpDate: this.props.nextFollowUpDate,\n      leadScore: this.props.leadScore,\n      leadScoreLevel",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/domain/entities/company.entity.ts",
        "start": 568,
        "end": 598,
        "startLoc": {
          "line": 568,
          "column": 6,
          "position": 4974
        },
        "endLoc": {
          "line": 598,
          "column": 15,
          "position": 5333
        }
      },
      "secondFile": {
        "name": "apps/api/src/domain/entities/company.entity.ts",
        "start": 532,
        "end": 562,
        "startLoc": {
          "line": 532,
          "column": 14,
          "position": 4574
        },
        "endLoc": {
          "line": 562,
          "column": 9,
          "position": 4933
        }
      }
    },
    {
      "format": "typescript",
      "lines": 46,
      "fragment": "tenantId: 'tenant_2',\n        organizationId: 'org_1',\n        tableName: 'customers',\n        policyName: 'role_based_tenant_access',\n        description: 'Acceso a clientes basado en roles dentro del tenant',\n        configuration: {\n          operation: 'SELECT',\n          isActive: true,\n          priority: 8,\n          bypassRLS: false,\n          enforceTenantIsolation: true\n        },\n        conditions: {\n          type: 'role_based',\n          expression: 'tenant_id = $1 AND (created_by = $2 OR role = $3)',\n          parameters: { \n            tenantId: 'current_tenant',\n            createdBy: 'current_user_id',\n            role: 'admin'\n          },\n          tenantConditions: {\n            strictIsolation: true,\n            crossTenantAccess: false,\n            sharedDataAccess: false\n          }\n        },\n        accessRules: {\n          roles: ['admin', 'user'],\n          tenantRestrictions: {\n            allowedTenants: ['current_tenant'],\n            crossTenantOperations: []\n          }\n        },\n        metadata: {\n          createdBy: 'user_1',\n          lastModifiedBy: 'user_1',\n          version: 1,\n          tags: ['role-based', 'tenant-isolation', 'customers'],\n          compliance: {\n            gdpr: true,\n            sox: false,\n            hipaa: false,\n            pci: false\n          }\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts",
        "start": 167,
        "end": 212,
        "startLoc": {
          "line": 167,
          "column": 9,
          "position": 1186
        },
        "endLoc": {
          "line": 212,
          "column": 2,
          "position": 1477
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts",
        "start": 115,
        "end": 159,
        "startLoc": {
          "line": 115,
          "column": 9,
          "position": 834
        },
        "endLoc": {
          "line": 159,
          "column": 2,
          "position": 1123
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "tenantId: 'tenant_1',\n        organizationId: 'org_1',\n        ruleName: 'admin_cross_tenant_access',\n        description: 'Permitir acceso cross-tenant para administradores',\n        configuration: {\n          isActive: true,\n          priority: 8,\n          evaluationOrder: 2,\n          stopOnMatch: false,\n          tenantScope: 'multi' as const\n        },\n        conditions: {\n          context: {\n            role: 'admin',\n            permissions: ['cross_tenant_access']\n          },\n          data: {\n            operation: 'SELECT'\n          }\n        },\n        actions: {\n          type: 'allow' as const,\n          parameters: {},\n          message: 'Acceso cross-tenant permitido para administrador'\n        },\n        metadata: {\n          createdBy: 'admin@tenant.com',\n          lastModifiedBy: 'admin@tenant.com',\n          version: 1,\n          tags: ['admin', 'cross-tenant', 'access']\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts",
        "start": 684,
        "end": 715,
        "startLoc": {
          "line": 684,
          "column": 9,
          "position": 4936
        },
        "endLoc": {
          "line": 715,
          "column": 2,
          "position": 5141
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts",
        "start": 646,
        "end": 676,
        "startLoc": {
          "line": 646,
          "column": 9,
          "position": 4670
        },
        "endLoc": {
          "line": 676,
          "column": 2,
          "position": 4873
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "organizationId: 'org_1',\n        tenantId: 'tenant_1',\n        userId: 'user_1',\n        sessionId: 'session_1',\n        operation: {\n          type: 'SELECT' as const,\n          tableName: 'invoices',\n          columns: ['id', 'amount', 'status'],\n          tenantId: 'tenant_1'\n        },\n        securityContext: {\n          ipAddress: '192.168.1.100',\n          userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',\n          role: 'user',\n          permissions: ['read'],\n          policiesApplied: ['policy_1'],\n          rulesEvaluated: ['rule_1'],\n          tenantIsolation: true\n        },\n        result: {\n          allowed: true,\n          dataReturned: 15,\n          executionTime: 45,\n          policiesMatched: 1,\n          rulesMatched: 1,\n          tenantIsolationEnforced: true\n        },\n        requestId",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts",
        "start": 785,
        "end": 812,
        "startLoc": {
          "line": 785,
          "column": 9,
          "position": 5683
        },
        "endLoc": {
          "line": 812,
          "column": 10,
          "position": 5875
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/integration/rls-tenant-policies.integration.test.ts",
        "start": 751,
        "end": 778,
        "startLoc": {
          "line": 751,
          "column": 9,
          "position": 5439
        },
        "endLoc": {
          "line": 778,
          "column": 10,
          "position": 5631
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "}\n\n  // ========================================================================\n  // CONTEXT PROPAGATION\n  // ========================================================================\n\n  getCurrentSpan(): Span | undefined {\n    return trace.getActiveSpan();\n  }\n\n  getCurrentTraceId(): string | undefined {\n    const span = this.getCurrentSpan();\n    return span?.spanContext().traceId;\n  }\n\n  getCurrentSpanId(): string | undefined {\n    const span = this.getCurrentSpan();\n    return span?.spanContext().spanId;\n  }\n\n  getTraceContext(): TraceContext | undefined {\n    const span = this.getCurrentSpan();\n    if (!span) return undefined;\n\n    const spanContext = span.spanContext();\n    return {\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      operation: span.name,\n      service: this",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/services/observability-otel.service.ts",
        "start": 501,
        "end": 530,
        "startLoc": {
          "line": 501,
          "column": 3,
          "position": 3966
        },
        "endLoc": {
          "line": 530,
          "column": 5,
          "position": 4189
        }
      },
      "secondFile": {
        "name": "apps/api/src/infrastructure/observability/tracing.service.ts",
        "start": 212,
        "end": 241,
        "startLoc": {
          "line": 212,
          "column": 3,
          "position": 1797
        },
        "endLoc": {
          "line": 241,
          "column": 15,
          "position": 2020
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ".size >= 0\n      };\n\n      const healthyServices = Object.values(services).filter(Boolean).length;\n      const totalServices = Object.keys(services).length;\n      \n      let status: 'healthy' | 'degraded' | 'unhealthy';\n      if (healthyServices === totalServices) {\n        status = 'healthy';\n      } else if (healthyServices >= totalServices * 0.5) {\n        status = 'degraded';\n      } else {\n        status = 'unhealthy';\n      }\n\n      return {\n        status,\n        services,\n        lastCheck: new Date()\n      };\n    } catch (error: any) {\n      logger.error('Health check failed', { error: error.message });\n      return {\n        status: 'unhealthy',\n        services: { database: false, monitoring",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/services/ai-performance-optimization.service.ts",
        "start": 878,
        "end": 902,
        "startLoc": {
          "line": 878,
          "column": 12,
          "position": 7457
        },
        "endLoc": {
          "line": 902,
          "column": 11,
          "position": 7682
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/ai-security-compliance.service.ts",
        "start": 889,
        "end": 913,
        "startLoc": {
          "line": 889,
          "column": 16,
          "position": 7561
        },
        "endLoc": {
          "line": 913,
          "column": 9,
          "position": 7786
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "const costData = await db.select()\n        .from(aiCostOptimization)\n        .where(and(\n          eq(aiCostOptimization.department, department),\n          gte(aiCostOptimization.createdAt, since)\n        ))\n        .orderBy(desc(aiCostOptimization.createdAt))\n        .limit(100);\n\n      const totalCost = costData.reduce((sum, record) => sum + (record.costSavings || 0), 0);\n      const totalTokens = costData.reduce((sum, record) => sum + (record.tokensUsed || 0), 0);\n      const averageLatency = costData.reduce((sum, record) => sum + (record.latencyMs || 0), 0) / costData.length || 0;\n      const successRate = costData.filter(r => r.status === 'success').length / costData.length || 0;\n      const errorRate = costData.filter(r => r.status === 'error').length / costData.length || 0;\n\n      return {\n        totalCost,\n        totalTokens,\n        averageLatency,\n        successRate,\n        errorRate,\n      };\n    } catch (error) {\n      logger.error('Error getting cost metrics'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/services/ai-dashboard-consolidation.service.ts",
        "start": 307,
        "end": 330,
        "startLoc": {
          "line": 307,
          "column": 7,
          "position": 2491
        },
        "endLoc": {
          "line": 330,
          "column": 29,
          "position": 2814
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/cockpit-integration.service.ts",
        "start": 434,
        "end": 457,
        "startLoc": {
          "line": 434,
          "column": 7,
          "position": 3711
        },
        "endLoc": {
          "line": 457,
          "column": 26,
          "position": 4034
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "(department: string) {\n    try {\n      const optimizationData = await db.select()\n        .from(aiCostOptimization)\n        .where(eq(aiCostOptimization.department, department))\n        .orderBy(desc(aiCostOptimization.createdAt))\n        .limit(10);\n\n      const activeRules = optimizationData.filter(r => r.status === 'active').length;\n      const savings = optimizationData.reduce((sum, r) => sum + (r.costSavings || 0), 0);\n      const recommendations = optimizationData\n        .filter(r => r.recommendations)\n        .map(r => r.recommendations)\n        .slice(0, 5);\n\n      return {\n        activeRules,\n        savings,\n        recommendations: recommendations as string[],\n      };\n    } catch (error) {\n      logger.error('Error getting optimization metrics'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/services/ai-dashboard-consolidation.service.ts",
        "start": 378,
        "end": 399,
        "startLoc": {
          "line": 378,
          "column": 23,
          "position": 3157
        },
        "endLoc": {
          "line": 399,
          "column": 37,
          "position": 3388
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/cockpit-integration.service.ts",
        "start": 513,
        "end": 534,
        "startLoc": {
          "line": 513,
          "column": 20,
          "position": 4489
        },
        "endLoc": {
          "line": 534,
          "column": 34,
          "position": 4720
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "{\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        type: row.type,\n        algorithm: row.algorithm,\n        features: row.features,\n        hyperparameters: row.hyperparameters,\n        accuracy: parseFloat(row.accuracy),\n        mae: parseFloat(row.mae),\n        mse: parseFloat(row.mse),\n        rmse: parseFloat(row.rmse),\n        r2Score: parseFloat(row.r2_score),\n        isActive: row.is_active,\n        lastTrained: row.last_trained,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at\n      }))",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/services/ai-cost-prediction.service.ts",
        "start": 346,
        "end": 363,
        "startLoc": {
          "line": 346,
          "column": 2,
          "position": 2879
        },
        "endLoc": {
          "line": 363,
          "column": 2,
          "position": 3042
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/ai-cost-prediction.service.ts",
        "start": 228,
        "end": 245,
        "startLoc": {
          "line": 228,
          "column": 2,
          "position": 1868
        },
        "endLoc": {
          "line": 245,
          "column": 2,
          "position": 2031
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "};\n\n      const healthyServices = Object.values(services).filter(Boolean).length;\n      const totalServices = Object.keys(services).length;\n      \n      let status: 'healthy' | 'degraded' | 'unhealthy';\n      if (healthyServices === totalServices) {\n        status = 'healthy';\n      } else if (healthyServices >= totalServices * 0.5) {\n        status = 'degraded';\n      } else {\n        status = 'unhealthy';\n      }\n\n      return {\n        status,\n        services,\n        lastCheck: new Date()\n      };\n    } catch (error: any) {\n      logger.error('Health check failed', { error: error.message });\n      return {\n        status: 'unhealthy',\n        services: { database: false, models",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/services/ai-cost-prediction.service.ts",
        "start": 943,
        "end": 966,
        "startLoc": {
          "line": 943,
          "column": 7,
          "position": 8582
        },
        "endLoc": {
          "line": 966,
          "column": 7,
          "position": 8799
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/ai-security-compliance.service.ts",
        "start": 890,
        "end": 913,
        "startLoc": {
          "line": 890,
          "column": 7,
          "position": 7569
        },
        "endLoc": {
          "line": 913,
          "column": 9,
          "position": 7786
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ", {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      body: req.body\n    });\n\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        success: false,\n        error: 'Invalid request data',\n        details: error.errors,\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n});\n\n/**\n * Manage cron jobs\n */",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/workers-integration.ts",
        "start": 137,
        "end": 161,
        "startLoc": {
          "line": 137,
          "column": 53,
          "position": 1200
        },
        "endLoc": {
          "line": 161,
          "column": 4,
          "position": 1385
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/workers-integration.ts",
        "start": 71,
        "end": 95,
        "startLoc": {
          "line": 71,
          "column": 47,
          "position": 645
        },
        "endLoc": {
          "line": 95,
          "column": 4,
          "position": 830
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ", {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      body: req.body\n    });\n\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        success: false,\n        error: 'Invalid request data',\n        details: error.errors,\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n});\n\n/**\n * Get workers health status\n */",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/workers-integration.ts",
        "start": 196,
        "end": 220,
        "startLoc": {
          "line": 196,
          "column": 49,
          "position": 1673
        },
        "endLoc": {
          "line": 220,
          "column": 4,
          "position": 1858
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/workers-integration.ts",
        "start": 71,
        "end": 95,
        "startLoc": {
          "line": 71,
          "column": 47,
          "position": 645
        },
        "endLoc": {
          "line": 95,
          "column": 4,
          "position": 830
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "),\n  searchableFields: z.object({\n    name: z.string().optional(),\n    email: z.string().email().optional(),\n    phone: z.string().optional(),\n    company: z.string().optional(),\n    description: z.string().optional(),\n    notes: z.string().optional(),\n    tags: z.array(z.string()).optional()\n  }).",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/semantic-search-crm.ts",
        "start": 74,
        "end": 83,
        "startLoc": {
          "line": 74,
          "column": 2,
          "position": 1159
        },
        "endLoc": {
          "line": 83,
          "column": 2,
          "position": 1288
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/semantic-search-crm.ts",
        "start": 25,
        "end": 35,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 347
        },
        "endLoc": {
          "line": 35,
          "column": 2,
          "position": 477
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "= z.object({\n  userId: z.string().uuid(),\n  orgId: z.string().uuid(),\n  type: z.enum(['info', 'success', 'warning', 'error', 'alert', 'reminder', 'update', 'announcement']),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']),\n  title: z.string().min(1).max(200),\n  message: z.string().min(1).max(1000),\n  data: z.record(z.any()).optional(),\n  channels: z.array(z.enum(['email', 'sms', 'push', 'in_app', 'webhook'])),\n  templateId: z.string().optional(),\n  templateVariables",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/notifications.ts",
        "start": 45,
        "end": 55,
        "startLoc": {
          "line": 45,
          "column": 2,
          "position": 562
        },
        "endLoc": {
          "line": 55,
          "column": 18,
          "position": 767
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/notifications.ts",
        "start": 32,
        "end": 42,
        "startLoc": {
          "line": 32,
          "column": 2,
          "position": 331
        },
        "endLoc": {
          "line": 42,
          "column": 12,
          "position": 536
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "router.post('/optimize', async (req, res) => {\n  const traceId = `trace_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const spanId = `span_${Math.random().toString(36).substr(2, 9)}`;\n\n  try {\n    const { type } = req.body;\n    \n    // Validar tipo de optimización\n    if (type && !OptimizationTypeSchema.safeParse(type).success) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid optimization type',\n        validTypes: ['gc'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/memory-management.ts",
        "start": 177,
        "end": 189,
        "startLoc": {
          "line": 177,
          "column": 1,
          "position": 1675
        },
        "endLoc": {
          "line": 189,
          "column": 5,
          "position": 1846
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/performance-v2.ts",
        "start": 169,
        "end": 181,
        "startLoc": {
          "line": 169,
          "column": 1,
          "position": 1626
        },
        "endLoc": {
          "line": 181,
          "column": 9,
          "position": 1797
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ", {\n      traceId,\n      spanId,\n      newConfig: newStatus.config\n    });\n\n    res.json({\n      success: true,\n      data: {\n        config: newStatus.config,\n        message: 'Configuration updated successfully',\n        timestamp: new Date().toISOString(),\n        traceId\n      }\n    });\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid configuration data',\n        details: error.errors,\n        traceId\n      });\n    }\n\n    structuredLogger.error('Failed to update memory config'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/memory-management.ts",
        "start": 263,
        "end": 289,
        "startLoc": {
          "line": 263,
          "column": 24,
          "position": 2386
        },
        "endLoc": {
          "line": 289,
          "column": 33,
          "position": 2555
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/performance-v2.ts",
        "start": 254,
        "end": 280,
        "startLoc": {
          "line": 254,
          "column": 29,
          "position": 2365
        },
        "endLoc": {
          "line": 280,
          "column": 38,
          "position": 2534
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": ",\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      data: task,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        success: false,\n        error: 'Invalid request data',\n        details: error.errors,\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    structuredLogger.error('Failed to advance HITL workflow'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/hitl-v2.ts",
        "start": 341,
        "end": 363,
        "startLoc": {
          "line": 341,
          "column": 34,
          "position": 3298
        },
        "endLoc": {
          "line": 363,
          "column": 34,
          "position": 3460
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/hitl-v2.ts",
        "start": 200,
        "end": 222,
        "startLoc": {
          "line": 200,
          "column": 17,
          "position": 2109
        },
        "endLoc": {
          "line": 222,
          "column": 29,
          "position": 2271
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ", requireAADRole(\"approver\"), async (req: Request, res: Response) => {\n  let prisma: any = null;\n  try {\n    const db = await import(\"@econeura/db\");\n    const getPrisma = (db as unknown as { getPrisma?: () => unknown }).getPrisma;\n    prisma = typeof getPrisma === 'function' ? getPrisma() : null;\n  } catch {}\n  if (!prisma) return res.status(503).json({ type:\"about:blank\", title:\"Service Unavailable\", status:503, detail:\"DB not configured\" });\n  const id = req.params.id;\n  const reason",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/hil.approvals.v2.ts",
        "start": 37,
        "end": 46,
        "startLoc": {
          "line": 37,
          "column": 21,
          "position": 636
        },
        "endLoc": {
          "line": 46,
          "column": 7,
          "position": 824
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/hil.approvals.v2.ts",
        "start": 22,
        "end": 31,
        "startLoc": {
          "line": 22,
          "column": 22,
          "position": 302
        },
        "endLoc": {
          "line": 31,
          "column": 5,
          "position": 490
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "),\n  abTest: z.object({\n    enabled: z.boolean().default(false),\n    variants: z.array(z.object({\n      id: z.string(),\n      subject: z.string(),\n      htmlContent: z.string(),\n      percentage: z.number().min(0).max(100)\n    })).default([]),\n    winner: z.string().optional(),\n    testDuration: z.number().optional()\n  }).optional(),\n  automation: z.object({\n    enabled: z.boolean().default(false),\n    triggers: z.array(z.object({\n      type: z.string(),\n      conditions: z.record(z.any()),\n      delay: z.number().optional()\n    })).default([]),\n    actions: z.array(z.object({\n      type: z.string(),\n      config: z.record(z.any())\n    })).default([])\n  }).optional()\n});\n\nconst CreateSubscriberSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/email-marketing.ts",
        "start": 102,
        "end": 128,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 1114
        },
        "endLoc": {
          "line": 128,
          "column": 23,
          "position": 1419
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/email-marketing.ts",
        "start": 61,
        "end": 87,
        "startLoc": {
          "line": 61,
          "column": 5,
          "position": 460
        },
        "endLoc": {
          "line": 87,
          "column": 21,
          "position": 765
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ".getStats();\n    \n    res.json({\n      success: true,\n      data: stats,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    structuredLogger.error('Failed to get dunning stats', {\n      error: error instanceof Error ? error.message : String(error),\n      requestId: req.headers['x-request-id'] as string || ''\n    });\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to get dunning stats',\n      message: error instanceof Error ? error.message : String(error)\n    });\n  }\n});\n\n/**\n * POST /dunning-3-toques/process\n * Inicia el procesamiento de campañas de dunning\n */",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/dunning-3-toques.ts",
        "start": 50,
        "end": 74,
        "startLoc": {
          "line": 50,
          "column": 22,
          "position": 515
        },
        "endLoc": {
          "line": 74,
          "column": 4,
          "position": 696
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/dunning-solid.ts",
        "start": 105,
        "end": 129,
        "startLoc": {
          "line": 105,
          "column": 20,
          "position": 1377
        },
        "endLoc": {
          "line": 129,
          "column": 4,
          "position": 1558
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ".updateConfig(validatedData);\n    \n    structuredLogger.info('Dunning configuration updated', {\n      config: validatedData,\n      requestId: req.headers['x-request-id'] as string || ''\n    });\n    \n    res.json({\n      success: true,\n      message: 'Dunning configuration updated successfully',\n      data: validatedData,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    structuredLogger.error('Failed to update dunning config', {\n      error: error instanceof Error ? error.message : String(error),\n      requestId: req.headers['x-request-id'] as string || ''\n    });\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to update dunning configuration',\n      message: error instanceof Error ? error.message : String(error)\n    });\n  }\n});\n\n/**\n * GET /dunning-3-toques/config\n * Obtiene la configuración actual del servicio de dunning\n */",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/dunning-3-toques.ts",
        "start": 311,
        "end": 341,
        "startLoc": {
          "line": 311,
          "column": 22,
          "position": 2591
        },
        "endLoc": {
          "line": 341,
          "column": 4,
          "position": 2823
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/dunning-solid.ts",
        "start": 480,
        "end": 510,
        "startLoc": {
          "line": 480,
          "column": 20,
          "position": 4471
        },
        "endLoc": {
          "line": 510,
          "column": 4,
          "position": 4703
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ",\n      notificationEnabled: true\n    };\n    \n    res.json({\n      success: true,\n      data: config,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    structuredLogger.error('Failed to get dunning config', {\n      error: error instanceof Error ? error.message : String(error),\n      requestId: req.headers['x-request-id'] as string || ''\n    });\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to get dunning configuration',\n      message: error instanceof Error ? error.message : String(error)\n    });\n  }\n});\n\n/**\n * POST /dunning-3-toques/campaigns/:campaignId/cancel\n * Cancela una campaña de dunning\n */",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/dunning-3-toques.ts",
        "start": 357,
        "end": 383,
        "startLoc": {
          "line": 357,
          "column": 3,
          "position": 2947
        },
        "endLoc": {
          "line": 383,
          "column": 4,
          "position": 3134
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/dunning-solid.ts",
        "start": 525,
        "end": 551,
        "startLoc": {
          "line": 525,
          "column": 2,
          "position": 4826
        },
        "endLoc": {
          "line": 551,
          "column": 4,
          "position": 5013
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "z.object({\n    title: z.string().min(1).max(255),\n    description: z.string().optional(),\n    tags: z.array(z.string()).default([]),\n    category: z.string().optional(),\n    author: z.string().min(1),\n    language: z.string().default('es'),\n    keywords: z.array(z.string()).default([]),\n    customFields: z.record(z.any()).default({})\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/document-management.ts",
        "start": 47,
        "end": 56,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 269
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 424
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/document-management.service.ts",
        "start": 32,
        "end": 40,
        "startLoc": {
          "line": 32,
          "column": 2,
          "position": 178
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 331
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "),\n  size: z.number().positive(),\n  mimeType: z.string(),\n  checksum: z.string(),\n  isPublic: z.boolean().default(false),\n  isEncrypted: z.boolean().default(false),\n  retentionPolicy: z.object({\n    retentionDays: z.number().positive().optional(),\n    autoDelete: z.boolean().default(false),\n    legalHold: z.boolean().default(false)\n  }).optional()\n}",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/document-management.ts",
        "start": 58,
        "end": 69,
        "startLoc": {
          "line": 58,
          "column": 8,
          "position": 464
        },
        "endLoc": {
          "line": 69,
          "column": 2,
          "position": 604
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/document-management.service.ts",
        "start": 86,
        "end": 96,
        "startLoc": {
          "line": 86,
          "column": 2,
          "position": 924
        },
        "endLoc": {
          "line": 96,
          "column": 2,
          "position": 1063
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "().optional()\n    }).optional(),\n    sizeRange: z.object({\n      min: z.number().optional(),\n      max: z.number().optional()\n    }).optional()\n  }).optional(),\n  sort: z.object({\n    field: z.enum(['name', 'createdAt', 'updatedAt', 'size', 'type']),\n    direction: z.enum(['asc', 'desc'])\n  }).optional(),\n  pagination: z.object({\n    page: z.number().min(1).default(1),\n    limit: z.number().min(1).max(100).default(20)\n  }).optional()\n});\n\n// ============================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/document-management.ts",
        "start": 116,
        "end": 133,
        "startLoc": {
          "line": 116,
          "column": 9,
          "position": 1307
        },
        "endLoc": {
          "line": 133,
          "column": 80,
          "position": 1509
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/document-management.service.ts",
        "start": 113,
        "end": 130,
        "startLoc": {
          "line": 113,
          "column": 5,
          "position": 1279
        },
        "endLoc": {
          "line": 130,
          "column": 7,
          "position": 1481
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "senderId: z.string().uuid(),\n  senderType: z.enum(['customer', 'agent', 'bot']),\n  message: z.string().min(1),\n  messageType: z.enum(['text', 'image', 'file', 'system']).default('text'),\n  attachments: z.array(z.object({\n    id: z.string(),\n    name: z.string(),\n    url: z.string().url(),\n    size: z.number(),\n    type: z.string()\n  })).default([])\n}",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/customer-support.ts",
        "start": 59,
        "end": 70,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 579
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 740
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/customer-support.service.ts",
        "start": 60,
        "end": 70,
        "startLoc": {
          "line": 60,
          "column": 3,
          "position": 592
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 752
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "),\n  skills: z.array(z.string()).default([]),\n  languages: z.array(z.string()).default(['en']),\n  workingHours: z.object({\n    timezone: z.string().default('UTC'),\n    schedule: z.record(z.object({\n      start: z.string(),\n      end: z.string(),\n      isWorking: z.boolean().default(true)\n    }))\n  }).optional()\n}",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/customer-support.ts",
        "start": 86,
        "end": 97,
        "startLoc": {
          "line": 86,
          "column": 3,
          "position": 964
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 1102
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/customer-support.service.ts",
        "start": 100,
        "end": 110,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 1159
        },
        "endLoc": {
          "line": 110,
          "column": 2,
          "position": 1296
        }
      }
    },
    {
      "format": "typescript",
      "lines": 32,
      "fragment": "z.object({\n    title: z.string().min(1).max(255),\n    description: z.string().optional(),\n    excerpt: z.string().optional(),\n    tags: z.array(z.string()).default([]),\n    categories: z.array(z.string()).default([]),\n    author: z.string().min(1),\n    language: z.string().default('es'),\n    keywords: z.array(z.string()).default([]),\n    customFields: z.record(z.any()).default({}),\n    seo: z.object({\n      metaTitle: z.string().optional(),\n      metaDescription: z.string().optional(),\n      metaKeywords: z.array(z.string()).default([]),\n      canonicalUrl: z.string().optional(),\n      ogTitle: z.string().optional(),\n      ogDescription: z.string().optional(),\n      ogImage: z.string().optional(),\n      twitterCard: z.string().optional(),\n      structuredData: z.record(z.any()).optional()\n    }).optional(),\n    analytics: z.object({\n      views: z.number().default(0),\n      uniqueViews: z.number().default(0),\n      shares: z.number().default(0),\n      comments: z.number().default(0),\n      likes: z.number().default(0),\n      engagement: z.number().default(0),\n      bounceRate: z.number().default(0),\n      timeOnPage: z.number().default(0)\n    }).optional()\n  }),",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 50,
        "end": 81,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 297
        },
        "endLoc": {
          "line": 81,
          "column": 2,
          "position": 787
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/content-management.service.ts",
        "start": 33,
        "end": 64,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 178
        },
        "endLoc": {
          "line": 64,
          "column": 2,
          "position": 667
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "().optional(),\n  isPublic: z.boolean().default(false),\n  isFeatured: z.boolean().default(false),\n  isSticky: z.boolean().default(false),\n  allowComments: z.boolean().default(true),\n  allowSharing: z.boolean().default(true),\n  workflow: z.object({\n    currentStep: z.string(),\n    steps: z.array(z.object({\n      step: z.string(),\n      status: z.enum(['pending', 'in_progress', 'completed', 'rejected']),\n      assignedTo: z.string().uuid().optional(),\n      completedAt: z.string",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 90,
        "end": 102,
        "startLoc": {
          "line": 90,
          "column": 9,
          "position": 943
        },
        "endLoc": {
          "line": 102,
          "column": 7,
          "position": 1125
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/content-management.service.ts",
        "start": 98,
        "end": 110,
        "startLoc": {
          "line": 98,
          "column": 5,
          "position": 1107
        },
        "endLoc": {
          "line": 110,
          "column": 5,
          "position": 1289
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "),\n      canonicalUrl: z.string().optional(),\n      ogTitle: z.string().optional(),\n      ogDescription: z.string().optional(),\n      ogImage: z.string().optional(),\n      twitterCard: z.string().optional(),\n      structuredData: z.record(z.any()).optional()\n    }).optional(),\n    analytics: z.object({\n      views: z.number().optional",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 128,
        "end": 137,
        "startLoc": {
          "line": 128,
          "column": 2,
          "position": 1579
        },
        "endLoc": {
          "line": 137,
          "column": 9,
          "position": 1705
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/content-management.service.ts",
        "start": 46,
        "end": 55,
        "startLoc": {
          "line": 46,
          "column": 2,
          "position": 414
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 540
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "),\n  workflow: z.object({\n    currentStep: z.string(),\n    steps: z.array(z.object({\n      step: z.string(),\n      status: z.enum(['pending', 'in_progress', 'completed', 'rejected']),\n      assignedTo: z.string().uuid().optional(),\n      completedAt: z.string().datetime().optional(),\n      comments: z.string().optional()\n    })).default([]),\n    approvedBy: z.string().uuid().optional(),\n    approvedAt: z.string().datetime().optional()\n  }).optional()\n});\n\nconst CreateVersionSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 160,
        "end": 175,
        "startLoc": {
          "line": 160,
          "column": 2,
          "position": 2065
        },
        "endLoc": {
          "line": 175,
          "column": 20,
          "position": 2253
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 95,
        "end": 110,
        "startLoc": {
          "line": 95,
          "column": 5,
          "position": 1028
        },
        "endLoc": {
          "line": 110,
          "column": 20,
          "position": 1216
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "().optional()\n    }).optional(),\n    isPublic: z.boolean().optional(),\n    isFeatured: z.boolean().optional()\n  }).optional(),\n  sort: z.object({\n    field: z.enum(['title', 'createdAt', 'updatedAt', 'publishedAt', 'views', 'engagement']),\n    direction: z.enum(['asc', 'desc'])\n  }).optional(),\n  pagination: z.object({\n    page: z.number().min(1).default(1),\n    limit: z.number().min(1).max(100).default(20)\n  }).optional()\n});\n\n// ============================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 194,
        "end": 209,
        "startLoc": {
          "line": 194,
          "column": 9,
          "position": 2600
        },
        "endLoc": {
          "line": 209,
          "column": 80,
          "position": 2787
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/content-management.service.ts",
        "start": 133,
        "end": 148,
        "startLoc": {
          "line": 133,
          "column": 5,
          "position": 1601
        },
        "endLoc": {
          "line": 148,
          "column": 7,
          "position": 1788
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "= {\n      ...validatedData,\n      publishedAt: validatedData.publishedAt ? new Date(validatedData.publishedAt) : undefined,\n      scheduledAt: validatedData.scheduledAt ? new Date(validatedData.scheduledAt) : undefined,\n      expiresAt: validatedData.expiresAt ? new Date(validatedData.expiresAt) : undefined,\n      workflow: validatedData.workflow ? {\n        ...validatedData.workflow,\n        steps: validatedData.workflow.steps.map(step => ({\n          ...step,\n          completedAt: step.completedAt ? new Date(step.completedAt) : undefined\n        })),\n        approvedAt: validatedData.workflow.approvedAt ? new Date(validatedData.workflow.approvedAt) : undefined\n      } : undefined\n    };\n\n    const content = await contentManagementService.updateContent",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 398,
        "end": 413,
        "startLoc": {
          "line": 398,
          "column": 2,
          "position": 4392
        },
        "endLoc": {
          "line": 413,
          "column": 14,
          "position": 4595
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 222,
        "end": 237,
        "startLoc": {
          "line": 222,
          "column": 2,
          "position": 2889
        },
        "endLoc": {
          "line": 237,
          "column": 14,
          "position": 3092
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ", async (req: AuthenticatedRequest, res) => {\n  try {\n    const organizationId = req.user?.organizationId || 'demo-org';\n    const searchParams = SearchContentSchema.parse(req.query);\n\n    // Convert date strings to Date objects\n    if (searchParams.filters?.dateRange) {\n      if (searchParams.filters.dateRange.from) {\n        searchParams.filters.dateRange.from = new Date(searchParams.filters.dateRange.from);\n      }\n      if (searchParams.filters.dateRange.to) {\n        searchParams.filters.dateRange.to = new Date(searchParams.filters.dateRange.to);\n      }\n    }\n\n    const result = await contentManagementService.searchContent(organizationId, searchParams);\n\n    res.json({\n      success: true,\n      data: result,\n      message: 'Content search completed successfully'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 677,
        "end": 697,
        "startLoc": {
          "line": 677,
          "column": 10,
          "position": 6521
        },
        "endLoc": {
          "line": 697,
          "column": 40,
          "position": 6734
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/content-management.ts",
        "start": 277,
        "end": 297,
        "startLoc": {
          "line": 277,
          "column": 4,
          "position": 3358
        },
        "endLoc": {
          "line": 297,
          "column": 33,
          "position": 3571
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ") {\n      return res.status(404).json({ \n        error: 'Contact not found',\n        message: `Contact with ID ${id} not found or access denied`\n      });\n    }\n\n    structuredLogger.info('Contact retrieved', { orgId, contactId: id });\n\n    res.json({\n      success: true,\n      data: contact\n    });\n\n  } catch (error) {\n    structuredLogger.error('Failed to retrieve contact', error as Error, {\n      orgId: req.headers['x-org-id'],\n      contactId: req.params.id\n    });\n    \n    res.status(500).json({ \n      error: 'Failed to retrieve contact',\n      message: (error as Error).message \n    });\n  }\n});\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/contacts-simple.ts",
        "start": 91,
        "end": 118,
        "startLoc": {
          "line": 91,
          "column": 10,
          "position": 775
        },
        "endLoc": {
          "line": 118,
          "column": 7,
          "position": 974
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/contacts.ts",
        "start": 130,
        "end": 157,
        "startLoc": {
          "line": 130,
          "column": 8,
          "position": 1125
        },
        "endLoc": {
          "line": 157,
          "column": 38,
          "position": 1324
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": ", async (req, res) => {\n  const traceId = `trace_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const spanId = `span_${Math.random().toString(36).substr(2, 9)}`;\n  const { poolName } = req.params;\n\n  try {\n    const poolStats = connectionPoolService.getPoolStats(poolName);\n    \n    if (!poolStats) {\n      return res.status(404).json({\n        success: false,\n        error: 'Pool not found',\n        poolName,\n        traceId\n      });\n    }\n\n    // Evaluar salud del pool",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/connection-pool.ts",
        "start": 592,
        "end": 609,
        "startLoc": {
          "line": 592,
          "column": 20,
          "position": 5033
        },
        "endLoc": {
          "line": 609,
          "column": 26,
          "position": 5212
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/connection-pool.ts",
        "start": 106,
        "end": 123,
        "startLoc": {
          "line": 106,
          "column": 19,
          "position": 1114
        },
        "endLoc": {
          "line": 123,
          "column": 31,
          "position": 1293
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "limit)\n      }\n    });\n\n  } catch (error) {\n    structuredLogger.error('Failed to retrieve companies', error as Error, {\n      orgId: req.headers['x-org-id'],\n      query: req.query\n    });\n    \n    res.status(500).json({ \n      error: 'Failed to retrieve companies',\n      message: (error as Error).message \n    });\n  }\n});\n\n// GET /v1/companies/:id - Get single company\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const orgId = req.headers['x-org-id'] as string ||",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/companies-simple.ts",
        "start": 64,
        "end": 85,
        "startLoc": {
          "line": 64,
          "column": 2,
          "position": 548
        },
        "endLoc": {
          "line": 85,
          "column": 3,
          "position": 724
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/companies.ts",
        "start": 75,
        "end": 96,
        "startLoc": {
          "line": 75,
          "column": 2,
          "position": 617
        },
        "endLoc": {
          "line": 96,
          "column": 2,
          "position": 792
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ") {\n      return res.status(404).json({ \n        error: 'Company not found',\n        message: `Company with ID ${id} not found or access denied`\n      });\n    }\n\n    structuredLogger.info('Company retrieved', { orgId, companyId: id });\n\n    res.json({\n      success: true,\n      data: company\n    });\n\n  } catch (error) {\n    structuredLogger.error('Failed to retrieve company', error as Error, {\n      orgId: req.headers['x-org-id'],\n      companyId: req.params.id\n    });\n    \n    res.status(500).json({ \n      error: 'Failed to retrieve company',\n      message: (error as Error).message \n    });\n  }\n});\n\n// POST /v1/companies - Create company\nrouter.post('/', async (req, res) => {\n  try {\n    const orgId = req.headers['x-org-id'] as string ||",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/companies-simple.ts",
        "start": 89,
        "end": 119,
        "startLoc": {
          "line": 89,
          "column": 10,
          "position": 769
        },
        "endLoc": {
          "line": 119,
          "column": 3,
          "position": 1013
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/companies.ts",
        "start": 111,
        "end": 141,
        "startLoc": {
          "line": 111,
          "column": 8,
          "position": 908
        },
        "endLoc": {
          "line": 141,
          "column": 2,
          "position": 1151
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "= z.object({\n  department: z.enum(['ceo', 'ia', 'cso', 'cto', 'ciso', 'coo', 'chro', 'cgo', 'cfo', 'cdo']),\n  message: z.string().min(1).max(1000),\n  context: z.object({\n    agentId: z.string().optional(),\n    previousMessages: z.array(z.string()).optional(),\n    includeMetrics: z.boolean().default(true),\n  }).optional(),\n});\n\n/**\n * POST /v1/cockpit-integration/agent-action\n * Ejecuta una acción en un agente del cockpit\n */",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/cockpit-integration.ts",
        "start": 28,
        "end": 41,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 330
        },
        "endLoc": {
          "line": 41,
          "column": 4,
          "position": 475
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/cockpit-integration.service.ts",
        "start": 29,
        "end": 39,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 324
        },
        "endLoc": {
          "line": 39,
          "column": 7,
          "position": 469
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ".updateConfig(validatedData);\n\n    res.json({\n      success: true,\n      data: updatedConfig,\n      message: 'Configuration updated successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation error',\n        details: error.errors\n      });\n    }\n\n    logger.error('Error updating configuration', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update configuration',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// ===== HEALTH CHECK =====\n\n// GET /api/centralized-logging/health",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 626,
        "end": 653,
        "startLoc": {
          "line": 626,
          "column": 15,
          "position": 5880
        },
        "endLoc": {
          "line": 653,
          "column": 39,
          "position": 6069
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/project-completion-deployment.ts",
        "start": 454,
        "end": 481,
        "startLoc": {
          "line": 454,
          "column": 25,
          "position": 4046
        },
        "endLoc": {
          "line": 481,
          "column": 49,
          "position": 4235
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "),\n  schedule: z.object({\n    enabled: z.boolean().default(false),\n    cron: z.string().optional(),\n    timezone: z.string().default('UTC'),\n    retention: z.object({\n      days: z.number().min(1).max(365).default(30),\n      maxBackups: z.number().min(1).max(1000).default(100)\n    })\n  }).",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/backup-recovery.ts",
        "start": 66,
        "end": 75,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 970
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 1098
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/backup-recovery.ts",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 372
        },
        "endLoc": {
          "line": 36,
          "column": 2,
          "position": 500
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": "router.put('/config', async (req: Request, res: Response) => {\n  try {\n    const validatedData = UpdateConfigSchema.parse(req.body);\n    \n    // Actualizar configuración (en una implementación real, esto se persistiría)\n    Object.assign(defaultConfig, validatedData);\n    \n    res.json({\n      success: true,\n      data: defaultConfig,\n      message: 'Configuration updated successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation error',\n        details: error.errors\n      });\n    }\n\n    logger.error('Error updating configuration', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update configuration',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// ===== HEALTH CHECK =====\n\n// GET /api/automated-documentation/health",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/automated-documentation.ts",
        "start": 531,
        "end": 563,
        "startLoc": {
          "line": 531,
          "column": 1,
          "position": 4635
        },
        "endLoc": {
          "line": 563,
          "column": 43,
          "position": 4883
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/automated-testing.ts",
        "start": 558,
        "end": 590,
        "startLoc": {
          "line": 558,
          "column": 1,
          "position": 4987
        },
        "endLoc": {
          "line": 590,
          "column": 37,
          "position": 5235
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  const startTime = Date.now();\n  const requestId = req.headers['x-request-id'] as string || `req_${Date.now()}`;\n\n  try {\n    if (!req.user?.id || !req.user?.organizationId) {\n      res.status(400).json({\n        error: 'User context required',\n        message: 'User ID and organization ID are required',\n        requestId,\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    // Get user permissions",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/auth.ts",
        "start": 426,
        "end": 441,
        "startLoc": {
          "line": 426,
          "column": 15,
          "position": 3516
        },
        "endLoc": {
          "line": 441,
          "column": 24,
          "position": 3680
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/auth.ts",
        "start": 295,
        "end": 310,
        "startLoc": {
          "line": 295,
          "column": 12,
          "position": 2447
        },
        "endLoc": {
          "line": 310,
          "column": 20,
          "position": 2611
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "name: z.string().min(1).max(100),\n  description: z.string().min(1).max(500),\n  type: z.enum(['data_protection', 'access_control', 'content_filter', 'audit', 'compliance']),\n  rules: z.array(z.object({\n    field: z.string(),\n    operator: z.enum(['equals', 'contains', 'regex', 'range', 'exists']),\n    value: z.any(),\n    action: z.enum(['allow', 'deny', 'log', 'encrypt', 'anonymize'])\n  })),\n  severity: z.enum(['low', 'medium', 'high', 'critical']),\n  isActive: z.boolean().",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/ai-security-compliance.ts",
        "start": 13,
        "end": 23,
        "startLoc": {
          "line": 13,
          "column": 3,
          "position": 119
        },
        "endLoc": {
          "line": 23,
          "column": 2,
          "position": 311
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/ai-security-compliance.service.ts",
        "start": 8,
        "end": 18,
        "startLoc": {
          "line": 8,
          "column": 3,
          "position": 70
        },
        "endLoc": {
          "line": 18,
          "column": 2,
          "position": 262
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ".getHealthStatus();\n    \n    const statusCode = health.status === 'healthy' ? 200 : \n                      health.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health,\n      message: `Service is ${health.status}`\n    });\n  } catch (error: any) {\n    logger.error('Health check failed', { \n      error: error.message, \n      userId: req.user?.id \n    });\n    \n    res.status(503).json({\n      success: false,\n      error: 'Health check failed',\n      message: error.message\n    });\n  }\n});\n\n// ===== ESTADÍSTICAS =====\n\n// GET /v1/ai-performance-optimization/stats - Estadísticas del servicio",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/ai-performance-optimization.ts",
        "start": 527,
        "end": 553,
        "startLoc": {
          "line": 527,
          "column": 33,
          "position": 4199
        },
        "endLoc": {
          "line": 553,
          "column": 73,
          "position": 4396
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/ai-security-compliance.ts",
        "start": 422,
        "end": 448,
        "startLoc": {
          "line": 422,
          "column": 28,
          "position": 3446
        },
        "endLoc": {
          "line": 448,
          "column": 68,
          "position": 3643
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ";\n\n// Schemas de validación\nconst DashboardMetricsSchema = z.object({\n  department: z.enum(['ceo', 'ia', 'cso', 'cto', 'ciso', 'coo', 'chro', 'cgo', 'cfo', 'cdo']),\n  timeframe: z.enum(['1h', '24h', '7d', '30d']).default('24h'),\n  includePredictions: z.boolean().default(true),\n  includeOptimizations: z.boolean().default(true),\n  includeSecurity: z.boolean().default(true),\n});\n\nconst RealTimeMetricsSchema = z.object({\n  department: z.enum(['ceo', 'ia', 'cso', 'cto', 'ciso', 'coo', 'chro', 'cgo', 'cfo', 'cdo']),\n  agentId: z.string().optional(),\n});\n\nconst AgentStatusSchema = z.object({\n  agentId: z.string(),\n  department: z.enum(['ceo', 'ia', 'cso', 'cto', 'ciso', 'coo', 'chro', 'cgo', 'cfo', 'cdo']),\n  status: z.enum(['active', 'paused', 'error', 'maintenance']),\n  lastActivity: z.string",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/ai-dashboard-consolidation.ts",
        "start": 12,
        "end": 32,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 107
        },
        "endLoc": {
          "line": 32,
          "column": 7,
          "position": 412
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/ai-dashboard-consolidation.service.ts",
        "start": 13,
        "end": 33,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 101
        },
        "endLoc": {
          "line": 33,
          "column": 5,
          "position": 406
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "name: z.string().min(1).max(100),\n  description: z.string().min(1).max(500),\n  type: z.enum(['time_series', 'regression', 'neural_network', 'ensemble']),\n  algorithm: z.enum(['arima', 'lstm', 'linear_regression', 'random_forest', 'xgboost', 'prophet']),\n  features: z.array(z.string()),\n  hyperparameters: z.record(z.any()),\n  isActive",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/ai-cost-prediction.ts",
        "start": 13,
        "end": 19,
        "startLoc": {
          "line": 13,
          "column": 3,
          "position": 119
        },
        "endLoc": {
          "line": 19,
          "column": 9,
          "position": 245
        }
      },
      "secondFile": {
        "name": "apps/api/src/services/ai-cost-prediction.service.ts",
        "start": 8,
        "end": 14,
        "startLoc": {
          "line": 8,
          "column": 3,
          "position": 70
        },
        "endLoc": {
          "line": 14,
          "column": 9,
          "position": 196
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ".getHealthStatus();\n    \n    const statusCode = health.status === 'healthy' ? 200 : \n                      health.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health,\n      message: `Service is ${health.status}`\n    });\n  } catch (error: any) {\n    logger.error('Health check failed', { \n      error: error.message, \n      userId: req.user?.id \n    });\n    \n    res.status(503).json({\n      success: false,\n      error: 'Health check failed',\n      message: error.message\n    });\n  }\n});\n\n// ===== ESTADÍSTICAS =====\n\n// GET /v1/ai-cost-prediction/stats - Estadísticas del servicio",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/ai-cost-prediction.ts",
        "start": 667,
        "end": 693,
        "startLoc": {
          "line": 667,
          "column": 24,
          "position": 5031
        },
        "endLoc": {
          "line": 693,
          "column": 64,
          "position": 5228
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/ai-security-compliance.ts",
        "start": 422,
        "end": 448,
        "startLoc": {
          "line": 422,
          "column": 28,
          "position": 3446
        },
        "endLoc": {
          "line": 448,
          "column": 68,
          "position": 3643
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": ".getHealthStatus();\n    \n    const statusCode = health.status === 'healthy' ? 200 : \n                      health.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health,\n      message: `Service is ${health.status}`\n    });\n  } catch (error: any) {\n    logger.error('Health check failed', { \n      error: error.message, \n      userId: req.user?.id \n    });\n    \n    res.status(503).json({\n      success: false,\n      error: 'Health check failed',\n      message: error.message\n    });\n  }\n});\n\n// ===== ESTADÍSTICAS =====\n\n// GET /v1/ai-cost-optimization/stats - Estadísticas del servicio",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/ai-cost-optimization.ts",
        "start": 573,
        "end": 599,
        "startLoc": {
          "line": 573,
          "column": 26,
          "position": 4704
        },
        "endLoc": {
          "line": 599,
          "column": 66,
          "position": 4901
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/ai-security-compliance.ts",
        "start": 422,
        "end": 448,
        "startLoc": {
          "line": 422,
          "column": 28,
          "position": 3446
        },
        "endLoc": {
          "line": 448,
          "column": 68,
          "position": 3643
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ".filter(a => a.category === 'soporte_qa').length\n      }\n    });\n\n  } catch (error) {\n    structuredLogger.error('Failed to retrieve agent registry', error as Error, {\n      orgId: req.headers['x-org-id']\n    });\n    \n    res.status(500).json({ \n      error: 'Failed to retrieve agent registry',\n      message: (error as Error).message \n    });\n  }\n});\n\n// POST /v1/agents/run - Execute an agent\nrouter.post('/run', async (req, res) => {\n  try {\n    const orgId = req.headers['x-org-id'] as string ||",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/agents-simple.ts",
        "start": 114,
        "end": 133,
        "startLoc": {
          "line": 114,
          "column": 14,
          "position": 2513
        },
        "endLoc": {
          "line": 133,
          "column": 3,
          "position": 2679
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/agents.ts",
        "start": 56,
        "end": 75,
        "startLoc": {
          "line": 56,
          "column": 7,
          "position": 578
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 743
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ".getAlertRule(id);\n    \n    if (!rule) {\n      return res.status(404).json({\n        success: false,\n        error: 'Alert rule not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: rule\n    });\n  } catch (error) {\n    logger.error('Error getting alert rule', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// POST /api/advanced-metrics-alerts/alert-rules",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-metrics-alerts.ts",
        "start": 198,
        "end": 221,
        "startLoc": {
          "line": 198,
          "column": 21,
          "position": 1975
        },
        "endLoc": {
          "line": 221,
          "column": 49,
          "position": 2141
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 264,
        "end": 287,
        "startLoc": {
          "line": 264,
          "column": 15,
          "position": 2863
        },
        "endLoc": {
          "line": 287,
          "column": 45,
          "position": 3028
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ",\n      actions: validatedData.actions\n    });\n\n    res.status(201).json({\n      success: true,\n      data: rule,\n      message: 'Alert rule created successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation error',\n        details: error.errors\n      });\n    }\n\n    logger.error('Error creating alert rule', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// PUT /api/advanced-metrics-alerts/alert-rules/:id",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-metrics-alerts.ts",
        "start": 234,
        "end": 261,
        "startLoc": {
          "line": 234,
          "column": 7,
          "position": 2290
        },
        "endLoc": {
          "line": 261,
          "column": 52,
          "position": 2489
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 301,
        "end": 328,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 3178
        },
        "endLoc": {
          "line": 328,
          "column": 48,
          "position": 3377
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ".updateAlertRule(id, updates);\n    \n    if (!updatedRule) {\n      return res.status(404).json({\n        success: false,\n        error: 'Alert rule not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: updatedRule,\n      message: 'Alert rule updated successfully'\n    });\n  } catch (error) {\n    logger.error('Error updating alert rule', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// DELETE /api/advanced-metrics-alerts/alert-rules/:id",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-metrics-alerts.ts",
        "start": 267,
        "end": 291,
        "startLoc": {
          "line": 267,
          "column": 21,
          "position": 2562
        },
        "endLoc": {
          "line": 291,
          "column": 55,
          "position": 2738
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 334,
        "end": 358,
        "startLoc": {
          "line": 334,
          "column": 15,
          "position": 3449
        },
        "endLoc": {
          "line": 358,
          "column": 51,
          "position": 3624
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ".deleteAlertRule(id);\n    \n    if (!deleted) {\n      return res.status(404).json({\n        success: false,\n        error: 'Alert rule not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Alert rule deleted successfully'\n    });\n  } catch (error) {\n    logger.error('Error deleting alert rule', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete alert rule',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// POST /api/advanced-metrics-alerts/alert-rules/evaluate",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-metrics-alerts.ts",
        "start": 295,
        "end": 318,
        "startLoc": {
          "line": 295,
          "column": 21,
          "position": 2797
        },
        "endLoc": {
          "line": 318,
          "column": 58,
          "position": 2963
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 362,
        "end": 385,
        "startLoc": {
          "line": 362,
          "column": 15,
          "position": 3683
        },
        "endLoc": {
          "line": 385,
          "column": 49,
          "position": 3848
        }
      }
    },
    {
      "format": "typescript",
      "lines": 33,
      "fragment": "router.put('/config', async (req: Request, res: Response) => {\n  try {\n    const validatedData = UpdateConfigSchema.parse(req.body);\n    \n    // Actualizar configuración (en una implementación real, esto se persistiría)\n    Object.assign(defaultConfig, validatedData);\n    \n    res.json({\n      success: true,\n      data: defaultConfig,\n      message: 'Configuration updated successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation error',\n        details: error.errors\n      });\n    }\n\n    logger.error('Error updating configuration', { error });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update configuration',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// ===== HEALTH CHECK =====\n\n// GET /api/advanced-metrics-alerts/health",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-metrics-alerts.ts",
        "start": 645,
        "end": 677,
        "startLoc": {
          "line": 645,
          "column": 1,
          "position": 5769
        },
        "endLoc": {
          "line": 677,
          "column": 43,
          "position": 6017
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/automated-testing.ts",
        "start": 558,
        "end": 590,
        "startLoc": {
          "line": 558,
          "column": 1,
          "position": 4987
        },
        "endLoc": {
          "line": 590,
          "column": 37,
          "position": 5235
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "maxTokens: z.number().min(1).max(4000).optional(),\n    temperature: z.number().min(0).max(2).optional(),\n    topP: z.number().min(0).max(1).optional(),\n    frequencyPenalty: z.number().min(-2).max(2).optional(),\n    presencePenalty: z.number().min(-2).max(2).optional()\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-features.ts",
        "start": 53,
        "end": 58,
        "startLoc": {
          "line": 53,
          "column": 5,
          "position": 560
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 686
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/azure-integration.ts",
        "start": 29,
        "end": 33,
        "startLoc": {
          "line": 29,
          "column": 3,
          "position": 216
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 340
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "]).optional(),\n  limit: z.coerce.number().int().positive().max(100).default(50).optional(),\n});\n\nconst CreatePatternSchema = z.object({\n  organizationId: z.string().min(1),\n  name: z.string().min(1),\n  description: z.string().min(1),\n  pattern: z.object({\n    errorType: z.string().optional",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-error-management.ts",
        "start": 71,
        "end": 80,
        "startLoc": {
          "line": 71,
          "column": 14,
          "position": 1146
        },
        "endLoc": {
          "line": 80,
          "column": 9,
          "position": 1274
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/dlg-grooming.ts",
        "start": 68,
        "end": 77,
        "startLoc": {
          "line": 68,
          "column": 16,
          "position": 1077
        },
        "endLoc": {
          "line": 77,
          "column": 4,
          "position": 1205
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "= z.object({\n  organizationId: z.string().min(1),\n  reportType: z.enum(['daily', 'weekly', 'monthly', 'ad_hoc']),\n  startDate: z.string().datetime(),\n  endDate: z.string().datetime(),\n  generatedBy: z.string().min(1),\n});\n\nconst GetStatsSchema = z.object({\n  organizationId: z.string().min(1),\n});\n\n// Routes\n\n// Error Management",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/routes/advanced-error-management.ts",
        "start": 185,
        "end": 199,
        "startLoc": {
          "line": 185,
          "column": 2,
          "position": 2910
        },
        "endLoc": {
          "line": 199,
          "column": 20,
          "position": 3044
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/dlg-grooming.ts",
        "start": 111,
        "end": 125,
        "startLoc": {
          "line": 111,
          "column": 2,
          "position": 1703
        },
        "endLoc": {
          "line": 125,
          "column": 26,
          "position": 1837
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "= (req: Request, res: Response, next: NextFunction): void => {\n  // Sanitizar body\n  if (req.body && typeof req.body === 'object') {\n    req.body = sanitizeObject(req.body);\n  }\n\n  // Sanitizar query parameters\n  if (req.query && typeof req.query === 'object') {\n    req.query = sanitizeObject(req.query);\n  }\n\n  // Sanitizar params\n  if (req.params && typeof req.params === 'object') {\n    req.params = sanitizeObject(req.params);\n  }\n\n  next();\n};\n\n// ========================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/middleware/security.middleware.ts",
        "start": 85,
        "end": 104,
        "startLoc": {
          "line": 85,
          "column": 2,
          "position": 568
        },
        "endLoc": {
          "line": 104,
          "column": 76,
          "position": 741
        }
      },
      "secondFile": {
        "name": "apps/api/src/middleware/security.ts",
        "start": 107,
        "end": 126,
        "startLoc": {
          "line": 107,
          "column": 2,
          "position": 886
        },
        "endLoc": {
          "line": 126,
          "column": 31,
          "position": 1062
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "summary = {\n          totalSuppliers: suppliers.length,\n          evaluatedSuppliers: evaluations.length,\n          averageScore: suppliers.reduce((sum, s) => sum + s.scorecard.overallScore, 0) / suppliers.length,\n          topPerformers: suppliers.filter(s => s.scorecard.grade === 'A+' || s.scorecard.grade === 'A').length,\n          underPerformers: suppliers.filter(s => s.scorecard.grade === 'D' || s.scorecard.grade === 'F').length,\n          riskSuppliers: suppliers.filter(s => s.riskAssessment.overallRisk === 'high').length\n        };\n        data = { scoreDistribution",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/supplier-scorecard.service.ts",
        "start": 766,
        "end": 774,
        "startLoc": {
          "line": 766,
          "column": 9,
          "position": 6836
        },
        "endLoc": {
          "line": 774,
          "column": 18,
          "position": 7010
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/supplier-scorecard.service.ts",
        "start": 744,
        "end": 752,
        "startLoc": {
          "line": 744,
          "column": 9,
          "position": 6482
        },
        "endLoc": {
          "line": 752,
          "column": 10,
          "position": 6656
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ");\n        summary = {\n          totalSuppliers: suppliers.length,\n          evaluatedSuppliers: evaluations.length,\n          averageScore: suppliers.reduce((sum, s) => sum + s.scorecard.overallScore, 0) / suppliers.length,\n          topPerformers: suppliers.filter(s => s.scorecard.grade === 'A+' || s.scorecard.grade === 'A').length,\n          underPerformers: suppliers.filter(s => s.scorecard.grade === 'D' || s.scorecard.grade === 'F').length,\n          riskSuppliers: riskSuppliers",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/supplier-scorecard.service.ts",
        "start": 778,
        "end": 785,
        "startLoc": {
          "line": 778,
          "column": 9,
          "position": 7068
        },
        "endLoc": {
          "line": 785,
          "column": 14,
          "position": 7214
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/supplier-scorecard.service.ts",
        "start": 764,
        "end": 772,
        "startLoc": {
          "line": 764,
          "column": 2,
          "position": 6831
        },
        "endLoc": {
          "line": 772,
          "column": 10,
          "position": 6978
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": ",\n        variables: [\n          {\n            id: 'policy_name',\n            name: 'policy_name',\n            type: 'string',\n            required: true,\n            description: 'Name of the policy'\n          },\n          {\n            id: 'schema_name',\n            name: 'schema_name',\n            type: 'string',\n            required: true,\n            description: 'Database schema name'\n          },\n          {\n            id: 'table_name',\n            name: 'table_name',\n            type: 'string',\n            required: true,\n            description: 'Database table name'\n          },\n          {\n            id: 'policy_type',\n            name: 'policy_type',\n            type: 'string',\n            required: true,\n            defaultValue: 'SELECT',\n            description: 'Type of policy'\n          },\n          {\n            id: 'roles',\n            name: 'roles',\n            type: 'array',\n            required: true,\n            description: 'Roles that can access this policy'\n          }\n        ]",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/rls-policy-generator.service.ts",
        "start": 181,
        "end": 219,
        "startLoc": {
          "line": 181,
          "column": 59,
          "position": 1035
        },
        "endLoc": {
          "line": 219,
          "column": 2,
          "position": 1255
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/rls-policy-generator.service.ts",
        "start": 103,
        "end": 140,
        "startLoc": {
          "line": 103,
          "column": 34,
          "position": 600
        },
        "endLoc": {
          "line": 140,
          "column": 2,
          "position": 818
        }
      }
    },
    {
      "format": "typescript",
      "lines": 42,
      "fragment": ",\n        variables: [\n          {\n            id: 'policy_name',\n            name: 'policy_name',\n            type: 'string',\n            required: true,\n            description: 'Name of the policy'\n          },\n          {\n            id: 'schema_name',\n            name: 'schema_name',\n            type: 'string',\n            required: true,\n            description: 'Database schema name'\n          },\n          {\n            id: 'table_name',\n            name: 'table_name',\n            type: 'string',\n            required: true,\n            description: 'Database table name'\n          },\n          {\n            id: 'policy_type',\n            name: 'policy_type',\n            type: 'string',\n            required: true,\n            defaultValue: 'SELECT',\n            description: 'Type of policy'\n          },\n          {\n            id: 'roles',\n            name: 'roles',\n            type: 'array',\n            required: true,\n            description: 'Roles that can access this policy'\n          }\n        ],\n        examples: [\n          {\n            id: 'sensitivity_policy_example'",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/rls-policy-generator.service.ts",
        "start": 251,
        "end": 292,
        "startLoc": {
          "line": 251,
          "column": 67,
          "position": 1422
        },
        "endLoc": {
          "line": 292,
          "column": 29,
          "position": 1658
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/rls-policy-generator.service.ts",
        "start": 103,
        "end": 222,
        "startLoc": {
          "line": 103,
          "column": 34,
          "position": 600
        },
        "endLoc": {
          "line": 222,
          "column": 21,
          "position": 1271
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ");\n      return false;\n    }\n  }\n\n  // Check if user has role\n  async hasRole(userId: string, orgId: string, roleName: string): Promise<boolean> {\n    const userRoles = this.getUserRoles(userId, orgId);\n    return userRoles.some(userRole => {\n      const role = this.roles.get(userRole.roleId);\n      return role && role.name === roleName;\n    });\n  }\n\n  // Get user permissions\n  async getUserPermissions(userId: string, orgId: string): Promise<Permission[]> {\n    const userRoles = this.getUserRoles(userId, orgId);\n    return this.getUserPermissionsFromRoles(userRoles);\n  }\n\n  // Create permission",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/rbac-granular.ts",
        "start": 100,
        "end": 120,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 760
        },
        "endLoc": {
          "line": 120,
          "column": 21,
          "position": 949
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/rbac-simple.ts",
        "start": 48,
        "end": 68,
        "startLoc": {
          "line": 48,
          "column": 6,
          "position": 379
        },
        "endLoc": {
          "line": 68,
          "column": 18,
          "position": 568
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ";\n  }\n\n  // Private helper methods\n  private getUserRoles(userId: string, orgId: string): UserRole[] {\n    const key = `${userId}:${orgId}`;\n    return this.userRoles.get(key) || [];\n  }\n\n  private getUserPermissionsFromRoles(userRoles: UserRole[]): Permission[] {\n    const permissions: Permission[] = [];\n    \n    for (const userRole of userRoles) {\n      const role = this.roles.get(userRole.roleId);\n      if (role) {\n        for (const permissionId of role.permissions) {\n          const permission = this.permissions.get(permissionId);\n          if (permission) {\n            permissions.push(permission);\n          }\n        }\n      }\n    }\n    \n    return permissions;\n  }\n\n  private evaluateConditions",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/rbac-granular.ts",
        "start": 251,
        "end": 278,
        "startLoc": {
          "line": 251,
          "column": 2,
          "position": 2130
        },
        "endLoc": {
          "line": 278,
          "column": 19,
          "position": 2363
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/rbac-simple.ts",
        "start": 108,
        "end": 135,
        "startLoc": {
          "line": 108,
          "column": 2,
          "position": 1093
        },
        "endLoc": {
          "line": 135,
          "column": 22,
          "position": 1326
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": ");\n  }\n\n  // Create permission\n  async createPermission(permission: Omit<Permission, 'id'>): Promise<string> {\n    const id = `perm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newPermission: Permission = { ...permission, id };\n    this.permissions.set(id, newPermission);\n    return id;\n  }\n\n  // Create role\n  async createRole(role: Omit<Role, 'id'>): Promise<string> {\n    const id = `role_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newRole: Role = { ...role, id };\n    this.roles.set(id, newRole);\n    return id;\n  }\n\n  // Assign role to user\n  async assignRole(userId: string, roleId: string, orgId: string): Promise<void> {\n    // Simplified implementation - just log the assignment",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/rbac-basic.ts",
        "start": 81,
        "end": 102,
        "startLoc": {
          "line": 81,
          "column": 7,
          "position": 684
        },
        "endLoc": {
          "line": 102,
          "column": 55,
          "position": 950
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/rbac-simple.ts",
        "start": 73,
        "end": 94,
        "startLoc": {
          "line": 73,
          "column": 10,
          "position": 662
        },
        "endLoc": {
          "line": 94,
          "column": 6,
          "position": 928
        }
      }
    },
    {
      "format": "typescript",
      "lines": 41,
      "fragment": ";\n  }\n\n  private initializeDefaultData(): void {\n    // Create default permissions\n    const defaultPermissions = [\n      { name: 'analytics:read', resource: 'analytics', action: 'read' },\n      { name: 'analytics:write', resource: 'analytics', action: 'write' },\n      { name: 'security:read', resource: 'security', action: 'read' },\n      { name: 'security:write', resource: 'security', action: 'write' },\n      { name: 'finops:read', resource: 'finops', action: 'read' },\n      { name: 'finops:write', resource: 'finops', action: 'write' },\n      { name: 'admin:all', resource: '*', action: '*' }\n    ];\n\n    defaultPermissions.forEach(permission => {\n      this.createPermission(permission);\n    });\n\n    // Create default roles\n    const defaultRoles = [\n      {\n        name: 'admin',\n        description: 'System administrator',\n        permissions: ['admin:all']\n      },\n      {\n        name: 'analyst',\n        description: 'Data analyst',\n        permissions: ['analytics:read']\n      },\n      {\n        name: 'security_officer',\n        description: 'Security officer',\n        permissions: ['security:read', 'security:write']\n      },\n      {\n        name: 'finance_manager',\n        description: 'Finance manager',\n        permissions: ['finops:read', 'finops:write']\n      },",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/rbac-basic.ts",
        "start": 113,
        "end": 153,
        "startLoc": {
          "line": 113,
          "column": 2,
          "position": 1054
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1407
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/rbac-simple.ts",
        "start": 132,
        "end": 173,
        "startLoc": {
          "line": 132,
          "column": 12,
          "position": 1317
        },
        "endLoc": {
          "line": 173,
          "column": 2,
          "position": 1672
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "],\n        availability: [\n          { dayOfWeek: 0, startTime: '00:00', endTime: '23:59', timezone: 'UTC' },\n          { dayOfWeek: 1, startTime: '00:00', endTime: '23:59', timezone: 'UTC' },\n          { dayOfWeek: 2, startTime: '00:00', endTime: '23:59', timezone: 'UTC' },\n          { dayOfWeek: 3, startTime: '00:00', endTime: '23:59', timezone: 'UTC' },\n          { dayOfWeek: 4, startTime: '00:00', endTime: '23:59', timezone: 'UTC' },\n          { dayOfWeek: 5, startTime: '00:00', endTime: '23:59', timezone: 'UTC' },\n          { dayOfWeek: 6, startTime: '00:00', endTime: '23:59', timezone: 'UTC' }\n        ]\n      }\n    ]",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/oncall.service.ts",
        "start": 336,
        "end": 347,
        "startLoc": {
          "line": 336,
          "column": 26,
          "position": 2736
        },
        "endLoc": {
          "line": 347,
          "column": 2,
          "position": 2954
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/oncall.service.ts",
        "start": 319,
        "end": 329,
        "startLoc": {
          "line": 319,
          "column": 24,
          "position": 2471
        },
        "endLoc": {
          "line": 329,
          "column": 2,
          "position": 2687
        }
      }
    },
    {
      "format": "typescript",
      "lines": 44,
      "fragment": "private metricsInitialized: boolean = false;\n\n  constructor() {\n    this.initializeMetrics();\n  }\n\n  private initializeMetrics(): void {\n    if (this.metricsInitialized) return;\n\n    // Initialize default metrics\n    collectDefaultMetrics({ register });\n\n    // Health check metrics\n    this.healthCheckCounter = new Counter({\n      name: 'health_check_total',\n      help: 'Total number of health checks',\n      labelNames: ['type', 'status'],\n      registers: [register]\n    });\n\n    this.healthCheckDuration = new Histogram({\n      name: 'health_check_duration_seconds',\n      help: 'Health check duration in seconds',\n      labelNames: ['type', 'status'],\n      buckets: [0.1, 0.5, 1, 2, 5],\n      registers: [register]\n    });\n\n    this.metricsInitialized = true;\n  }\n\n  incrementHealthCheck(type: string, status: string = 'success'): void {\n    this.healthCheckCounter.labels(type, status).inc();\n  }\n\n  recordHealthCheckDuration(type: string, durationMs: number, status: string = 'success'): void {\n    this.healthCheckDuration.labels(type, status).observe(durationMs / 1000);\n  }\n\n  async getMetrics(): Promise<string> {\n    return register.metrics();\n  }\n\n  async",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/metrics.new.ts",
        "start": 6,
        "end": 49,
        "startLoc": {
          "line": 6,
          "column": 3,
          "position": 52
        },
        "endLoc": {
          "line": 49,
          "column": 6,
          "position": 401
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/metrics.ts",
        "start": 8,
        "end": 51,
        "startLoc": {
          "line": 8,
          "column": 3,
          "position": 58
        },
        "endLoc": {
          "line": 51,
          "column": 63,
          "position": 407
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "{\n      total: this.config.maxMemoryMB,\n      used: Math.round(memUsage.rss / 1024 / 1024),\n      free: this.config.maxMemoryMB - Math.round(memUsage.rss / 1024 / 1024),\n      heap: {\n        total: Math.round(memUsage.heapTotal / 1024 / 1024),\n        used: Math.round(memUsage.heapUsed / 1024 / 1024),\n        free: Math.round((memUsage.heapTotal - memUsage.heapUsed) / 1024 / 1024),\n        external: Math.round(memUsage.external / 1024 / 1024),\n        arrayBuffers: Math.round(memUsage.arrayBuffers / 1024 / 1024)\n      },\n      rss: Math.round(memUsage.rss / 1024 / 1024),\n      external: Math.round(memUsage.external / 1024 / 1024),\n      arrayBuffers: Math.round(memUsage.arrayBuffers / 1024 / 1024),\n      gc: {\n        major: this",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/memory-manager.service.ts",
        "start": 234,
        "end": 249,
        "startLoc": {
          "line": 234,
          "column": 2,
          "position": 1771
        },
        "endLoc": {
          "line": 249,
          "column": 5,
          "position": 2039
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/memory-manager.service.ts",
        "start": 129,
        "end": 144,
        "startLoc": {
          "line": 129,
          "column": 2,
          "position": 891
        },
        "endLoc": {
          "line": 144,
          "column": 2,
          "position": 1159
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "config = {\n      enabled: true,\n      modelVersion: 'v1.0',\n      confidenceThreshold: 0.7,\n      maxRecommendations: 5,\n      expirationHours: 24,\n      factors: {\n        dealValue: 0.15,\n        stage: 0.20,\n        timeInStage: 0.10,\n        ownerExperience: 0.12,\n        companySize: 0.08,\n        industry: 0.10,\n        seasonality: 0.05,\n        competitorActivity: 0.08,\n        lastActivity: 0.07,\n        marketConditions: 0.05\n      },\n      actions: {\n        call: { enabled: true, weight: 0.25 },\n        email: { enabled: true, weight: 0.20 },\n        meeting: { enabled: true, weight: 0.20 },\n        proposal: { enabled: true, weight: 0.15 },\n        follow_up: { enabled: true, weight: 0.10 },\n        negotiation: { enabled: true, weight: 0.05 },\n        close: { enabled: true, weight: 0.05 }\n      },",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/deals-nba.service.ts",
        "start": 112,
        "end": 138,
        "startLoc": {
          "line": 112,
          "column": 2,
          "position": 897
        },
        "endLoc": {
          "line": 138,
          "column": 2,
          "position": 1164
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/deals-nba.ts",
        "start": 327,
        "end": 354,
        "startLoc": {
          "line": 327,
          "column": 2,
          "position": 2654
        },
        "endLoc": {
          "line": 354,
          "column": 2,
          "position": 2923
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "const CreateDashboardSchema = z.object({\n  name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  layout: z.object({\n    columns: z.number().min(1).max(12).default(4),\n    rows: z.number().min(1).max(20).default(10),\n    responsive: z.boolean().default(true),\n    theme: z.enum(['light', 'dark', 'auto']).default('auto')\n  }),\n  filters: z.array(z.object({\n    field: z.string(),\n    label: z.string(),\n    type: z.enum(['select', 'multiselect', 'date', 'daterange', 'number', 'text']),\n    options: z.array(z.string()).optional(),\n    defaultValue: z.any().optional(),\n    isRequired: z.boolean().default(false),\n    validation: z.object({\n      min: z.number().optional(),\n      max: z.number().optional(),\n      pattern: z.string().optional()\n    }).optional()\n  })).default([]),\n  permissions: z.object({\n    isPublic: z.boolean().default(false),\n    allowedUsers: z.array(z.string()).default([]),\n    allowedRoles: z.array(z.string()).default([])\n  }),\n  tags: z.array(z.string()).default([])\n});\n\nconst CreateWidgetSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/data-analytics-dashboard.service.ts",
        "start": 190,
        "end": 220,
        "startLoc": {
          "line": 190,
          "column": 1,
          "position": 1356
        },
        "endLoc": {
          "line": 220,
          "column": 19,
          "position": 1808
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/data-analytics-dashboard.ts",
        "start": 16,
        "end": 46,
        "startLoc": {
          "line": 16,
          "column": 5,
          "position": 123
        },
        "endLoc": {
          "line": 46,
          "column": 14,
          "position": 577
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": ";\n\nconst CreateWidgetSchema = z.object({\n  type: z.enum(['chart', 'metric', 'table', 'gauge', 'map', 'heatmap', 'trend']),\n  title: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  dataSource: z.string(),\n  configuration: z.object({\n    chartType: z.enum(['line', 'bar', 'pie', 'area', 'scatter', 'doughnut']).optional(),\n    metrics: z.array(z.string()),\n    dimensions: z.array(z.string()).optional(),\n    filters: z.record(z.any()).optional(),\n    timeRange: z.string().optional(),\n    refreshInterval: z.number().optional(),\n    colors: z.array(z.string()).optional(),\n    showLegend: z.boolean().optional(),\n    showDataLabels: z.boolean().optional(),\n    yAxisLabel: z.string().optional(),\n    xAxisLabel: z.string().optional()\n  }),\n  position: z.object({\n    x: z.number().min(0),\n    y: z.number().min(0),\n    width: z.number().min(1).max(12),\n    height: z.number().min(1).max(20)\n  }),\n  isVisible: z.boolean().default(true),\n  isEditable: z.boolean().default(true)\n});\n\nconst CreateAlertSchema",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/data-analytics-dashboard.service.ts",
        "start": 218,
        "end": 248,
        "startLoc": {
          "line": 218,
          "column": 2,
          "position": 1803
        },
        "endLoc": {
          "line": 248,
          "column": 18,
          "position": 2241
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/data-analytics-dashboard.ts",
        "start": 200,
        "end": 229,
        "startLoc": {
          "line": 200,
          "column": 3,
          "position": 1842
        },
        "endLoc": {
          "line": 229,
          "column": 11,
          "position": 2282
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ";\n\nconst CreateAlertSchema = z.object({\n  name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  metric: z.string(),\n  condition: z.object({\n    operator: z.enum(['greater_than', 'less_than', 'equals', 'not_equals', 'contains']),\n    value: z.union([z.number(), z.string()]),\n    threshold: z.number()\n  }),\n  severity: z.enum(['low', 'medium', 'high', 'critical']),\n  recipients: z.array(z.string())\n});\n\n// ============================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/data-analytics-dashboard.service.ts",
        "start": 246,
        "end": 261,
        "startLoc": {
          "line": 246,
          "column": 2,
          "position": 2236
        },
        "endLoc": {
          "line": 261,
          "column": 80,
          "position": 2422
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/data-analytics-dashboard.ts",
        "start": 507,
        "end": 521,
        "startLoc": {
          "line": 507,
          "column": 11,
          "position": 4563
        },
        "endLoc": {
          "line": 521,
          "column": 6,
          "position": 4751
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "= z.object({\n  'csp-report': z.object({\n    'document-uri': z.string(),\n    'referrer': z.string().optional(),\n    'violated-directive': z.string(),\n    'effective-directive': z.string().optional(),\n    'original-policy': z.string(),\n    'disposition': z.enum(['enforce', 'report']),\n    'blocked-uri': z.string().optional(),\n    'line-number': z.number().optional(),\n    'column-number': z.number().optional(),\n    'source-file': z.string().optional(),\n    'status-code': z.number().optional(),\n    'script-sample': z.string().optional(),\n  })\n});\n\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/csp-sri-banking.service.ts",
        "start": 5,
        "end": 22,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 33
        },
        "endLoc": {
          "line": 22,
          "column": 6,
          "position": 230
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/csp-sri-banking.ts",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 2,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 274
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "= z.object({\n  'sri-report': z.object({\n    'document-uri': z.string(),\n    'referrer': z.string().optional(),\n    'blocked-uri': z.string(),\n    'violation-type': z.enum(['integrity-mismatch', 'missing-integrity', 'invalid-integrity']),\n    'expected-hash': z.string().optional(),\n    'actual-hash': z.string().optional(),\n    'algorithm': z.enum(['sha256', 'sha384', 'sha512']).optional(),\n  })\n});\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/csp-sri-banking.service.ts",
        "start": 22,
        "end": 34,
        "startLoc": {
          "line": 22,
          "column": 2,
          "position": 234
        },
        "endLoc": {
          "line": 34,
          "column": 7,
          "position": 372
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/csp-sri-banking.ts",
        "start": 27,
        "end": 39,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 280
        },
        "endLoc": {
          "line": 39,
          "column": 35,
          "position": 418
        }
      }
    },
    {
      "format": "typescript",
      "lines": 27,
      "fragment": "),\n  context: z.record(z.any()).optional(),\n  metadata: z.record(z.any()).optional(),\n  userId: z.string().optional(),\n  organizationId: z.string().optional(),\n  requestId: z.string().optional(),\n  sessionId: z.string().optional(),\n  correlationId: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  source: z.string().optional(),\n  hostname: z.string().optional(),\n  pid: z.number().optional(),\n  version: z.string().optional()\n});\n\nconst LogQuerySchema = z.object({\n  level: z.enum(['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']).optional(),\n  service: z.string().optional(),\n  environment: z.string().optional(),\n  userId: z.string().optional(),\n  organizationId: z.string().optional(),\n  requestId: z.string().optional(),\n  sessionId: z.string().optional(),\n  correlationId: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  source: z.string().optional(),\n  startTime: z.coerce",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/centralized-logging.service.ts",
        "start": 37,
        "end": 63,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 424
        },
        "endLoc": {
          "line": 63,
          "column": 7,
          "position": 814
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 41,
        "end": 67,
        "startLoc": {
          "line": 41,
          "column": 2,
          "position": 333
        },
        "endLoc": {
          "line": 67,
          "column": 7,
          "position": 723
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "().optional(),\n  message: z.string().optional(),\n  limit: z.number().min(1).max(10000).optional(),\n  offset: z.number().min(0).optional(),\n  sort: z.enum(['timestamp', 'level', 'service']).optional(),\n  order: z.enum(['asc', 'desc']).optional()\n});\n\nconst LogAggregationSchema = z.object({\n  groupBy: z.array(z.enum(['level', 'service', 'environment', 'userId', 'organizationId', 'source', 'tags'])),\n  timeRange: z.object({\n    start: z.coerce",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/centralized-logging.service.ts",
        "start": 64,
        "end": 75,
        "startLoc": {
          "line": 64,
          "column": 5,
          "position": 834
        },
        "endLoc": {
          "line": 75,
          "column": 7,
          "position": 1016
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/centralized-logging.ts",
        "start": 68,
        "end": 79,
        "startLoc": {
          "line": 68,
          "column": 7,
          "position": 739
        },
        "endLoc": {
          "line": 79,
          "column": 7,
          "position": 921
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "{\n        '@timestamp': logEntry.timestamp.toISOString(),\n        level: logEntry.level,\n        message: logEntry.message,\n        service: logEntry.service,\n        environment: logEntry.environment,\n        context: logEntry.context,\n        metadata: logEntry.metadata,\n        userId: logEntry.userId,\n        organizationId: logEntry.organizationId,\n        requestId: logEntry.requestId,\n        sessionId: logEntry.sessionId,\n        correlationId: logEntry.correlationId,\n        tags: logEntry.tags,\n        source: logEntry.source,\n        hostname: logEntry.hostname,\n        pid: logEntry.pid,\n        version: logEntry.version\n      })",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/centralized-logging.service.ts",
        "start": 657,
        "end": 675,
        "startLoc": {
          "line": 657,
          "column": 2,
          "position": 6798
        },
        "endLoc": {
          "line": 675,
          "column": 2,
          "position": 6958
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/centralized-logging.service.ts",
        "start": 623,
        "end": 642,
        "startLoc": {
          "line": 623,
          "column": 2,
          "position": 6475
        },
        "endLoc": {
          "line": 642,
          "column": 2,
          "position": 6637
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ".reduce((acc, log) => {\n        const existing = acc.find(item => item.message === log.message);\n        if (existing) {\n          existing.count++;\n        } else {\n          acc.push({ message: log.message, count: 1 });\n        }\n        return acc;\n      }, [] as Array<{ message: string; count: number }>)\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    const serviceBreakdown",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/centralized-logging.service.ts",
        "start": 799,
        "end": 811,
        "startLoc": {
          "line": 799,
          "column": 7,
          "position": 8441
        },
        "endLoc": {
          "line": 811,
          "column": 17,
          "position": 8605
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/centralized-logging.service.ts",
        "start": 741,
        "end": 753,
        "startLoc": {
          "line": 741,
          "column": 10,
          "position": 7695
        },
        "endLoc": {
          "line": 753,
          "column": 10,
          "position": 7859
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  type: z.enum(['database', 'files', 'configuration', 'full', 'incremental']),\n  source: z.object({\n    type: z.enum(['database', 'filesystem', 'api', 'config']),\n    path: z.string().optional(),\n    connectionString: z.string().optional(),\n    tables: z.array(z.string()).optional(),\n    includeData: z.boolean().default(true),\n    includeSchema: z.boolean().default(true)\n  }),\n  destination: z.object({\n    type: z.enum(['local', 'azure_blob', 's3', 'ftp', 'sftp']),\n    path: z.string(),\n    credentials: z.record(z.string(), z.string()).optional(),\n    compression: z.boolean().default(true),\n    encryption: z.boolean().default(true)\n  }),\n  schedule: z.object({\n    enabled: z.boolean().default(false),\n    cron: z.string().optional(),\n    timezone: z.string().default('UTC'),\n    retention: z.object({\n      days: z.number().min(1).max(365).default(30),\n      maxBackups: z.number().min(1).max(1000).default(100)\n    })\n  }),\n  filters: z.object({\n    include: z.array(z.string()).default([]),\n    exclude: z.array(z.string()).default([]),\n    maxFileSize: z.number().optional(),\n    fileTypes: z.array(z.string()).optional()\n  }).optional(),\n  isActive: z.boolean().default(true),\n  createdAt",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/backup-recovery.service.ts",
        "start": 10,
        "end": 44,
        "startLoc": {
          "line": 10,
          "column": 3,
          "position": 100
        },
        "endLoc": {
          "line": 44,
          "column": 10,
          "position": 636
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/backup-recovery.ts",
        "start": 10,
        "end": 44,
        "startLoc": {
          "line": 10,
          "column": 3,
          "position": 80
        },
        "endLoc": {
          "line": 44,
          "column": 10,
          "position": 616
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ": z.string(),\n  target: z.object({\n    type: z.enum(['database', 'filesystem', 'api']),\n    path: z.string().optional(),\n    connectionString: z.string().optional(),\n    tables: z.array(z.string()).optional()\n  }),\n  options: z.object({\n    overwrite: z.boolean().default(false),\n    verify: z.boolean().default(true),\n    restoreSchema: z.boolean().default(true),\n    restoreData: z.boolean().default(true)\n  }),\n  status",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/backup-recovery.service.ts",
        "start": 68,
        "end": 81,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 975
        },
        "endLoc": {
          "line": 81,
          "column": 7,
          "position": 1147
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/backup-recovery.ts",
        "start": 92,
        "end": 105,
        "startLoc": {
          "line": 92,
          "column": 12,
          "position": 1298
        },
        "endLoc": {
          "line": 105,
          "column": 7,
          "position": 1470
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "{\n        id: dbTask.id,\n        agentId: dbTask.agentId,\n        inputs: JSON.parse(dbTask.inputs),\n        context: JSON.parse(dbTask.context),\n        status: dbTask.status as any,\n        priority: dbTask.priority as any,\n        retryCount: dbTask.retryCount,\n        maxRetries: dbTask.maxRetries,\n        timeoutMs: dbTask.timeoutMs,\n        dependencies: dbTask.dependencies ? JSON.parse(dbTask.dependencies) : undefined,\n        outputs: dbTask.outputs ? JSON.parse(dbTask.outputs) : undefined,\n        error: dbTask.error || undefined,\n        costEur: dbTask.costEur || undefined,\n        executionTimeMs: dbTask.executionTimeMs || undefined,\n        createdAt: dbTask.createdAt,\n        updatedAt: dbTask.updatedAt\n      };\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/agent-runtime.service.ts",
        "start": 702,
        "end": 720,
        "startLoc": {
          "line": 702,
          "column": 2,
          "position": 5849
        },
        "endLoc": {
          "line": 720,
          "column": 2,
          "position": 6059
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/agent-runtime.service.ts",
        "start": 602,
        "end": 621,
        "startLoc": {
          "line": 602,
          "column": 2,
          "position": 4921
        },
        "endLoc": {
          "line": 621,
          "column": 5,
          "position": 5132
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  category: z.enum(['system', 'feature', 'integration', 'security', 'performance', 'monitoring']),\n  type: z.enum(['string', 'number', 'boolean', 'object', 'array', 'json']),\n  value: z.any(),\n  defaultValue: z.any(),\n  environment: z.enum(['development', 'staging', 'production', 'all']),\n  isSecret: z.boolean().default(false),\n  isRequired: z.boolean().default(false),\n  validation: z.object({\n    min: z.number().optional(),\n    max: z.number().optional(),\n    pattern: z.string().optional(),\n    enum: z.array(z.any()).optional(),\n    custom: z.string().optional()\n  }).optional(),\n  dependencies: z.array(z.string()).default([]),\n  tags: z.array(z.string()).default([]),\n  version: z.string().default('1.0.0'),\n  isActive: z.boolean().default(true),\n  createdAt",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/advanced-configuration-management.service.ts",
        "start": 7,
        "end": 27,
        "startLoc": {
          "line": 7,
          "column": 3,
          "position": 63
        },
        "endLoc": {
          "line": 27,
          "column": 10,
          "position": 413
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/advanced-configuration-management.ts",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 3,
          "position": 80
        },
        "endLoc": {
          "line": 30,
          "column": 10,
          "position": 430
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  category: z.enum(['system', 'feature', 'integration', 'security', 'performance', 'monitoring']),\n  template: z.record(z.string(), z.any()),\n  variables: z.array(z.object({\n    name: z.string(),\n    type: z.enum(['string', 'number', 'boolean', 'object', 'array']),\n    required: z.boolean().default(false),\n    defaultValue: z.any().optional(),\n    description: z.string().optional()\n  })).default([]),\n  isActive: z.boolean().default(true),",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/advanced-configuration-management.service.ts",
        "start": 35,
        "end": 46,
        "startLoc": {
          "line": 35,
          "column": 3,
          "position": 510
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 724
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/advanced-configuration-management.ts",
        "start": 60,
        "end": 72,
        "startLoc": {
          "line": 60,
          "column": 3,
          "position": 888
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 1103
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "deploymentStrategy: z.enum(['immediate', 'gradual', 'canary', 'blue_green']),\n  rolloutPercentage: z.number().min(0).max(100).default(100),\n  schedule: z.object({\n    enabled: z.boolean().default(false),\n    cron: z.string().optional(),\n    timezone: z.string().default('UTC')\n  }).optional(),\n  rollbackConfig: z.object({\n    enabled: z.boolean().default(true),\n    autoRollback: z.boolean().default(false),\n    rollbackConditions: z.array(z.string()).default([])\n  }).optional(),",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/advanced-configuration-management.service.ts",
        "start": 57,
        "end": 68,
        "startLoc": {
          "line": 57,
          "column": 3,
          "position": 873
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 1056
        }
      },
      "secondFile": {
        "name": "apps/api/src/routes/advanced-configuration-management.ts",
        "start": 79,
        "end": 91,
        "startLoc": {
          "line": 79,
          "column": 3,
          "position": 1198
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 1382
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "[]): Array<{ action: string; count: number }> {\n    const actionCounts = events.reduce((acc, event) => {\n      acc[event.action] = (acc[event.action] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    return Object.entries(actionCounts)\n      .map(([action, count]) => ({ action, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n  }\n\n  private getTopEntities",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/lib/advanced-analytics.ts",
        "start": 251,
        "end": 263,
        "startLoc": {
          "line": 251,
          "column": 15,
          "position": 2425
        },
        "endLoc": {
          "line": 263,
          "column": 15,
          "position": 2606
        }
      },
      "secondFile": {
        "name": "apps/api/src/lib/advanced-audit-compliance.service.ts",
        "start": 566,
        "end": 578,
        "startLoc": {
          "line": 566,
          "column": 11,
          "position": 5116
        },
        "endLoc": {
          "line": 578,
          "column": 16,
          "position": 5296
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ", async () => {\n      const webhookData = {\n        type: 'email.processed',\n        data: {\n          messageId: 'email_123',\n          result: { processed: true }\n        }\n      };\n\n      const response = await request(app)\n        .post('/v1/workers/webhooks/workers')\n        .set('X-Webhook-Signature', 'sha256=test-signature')\n        .set('X-Webhook-Event', 'email.processed')\n        .set('X-Webhook-Delivery', 'del_123')\n        .send(webhookData)\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        message: 'Webhook received successfully',\n        eventType: 'email.processed',\n        deliveryId: 'del_123'\n      });\n    });\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/__tests__/end-to-end.test.ts",
        "start": 513,
        "end": 537,
        "startLoc": {
          "line": 513,
          "column": 38,
          "position": 3731
        },
        "endLoc": {
          "line": 537,
          "column": 2,
          "position": 3909
        }
      },
      "secondFile": {
        "name": "apps/api/src/__tests__/workers-integration.test.ts",
        "start": 491,
        "end": 516,
        "startLoc": {
          "line": 491,
          "column": 37,
          "position": 3507
        },
        "endLoc": {
          "line": 516,
          "column": 3,
          "position": 3686
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "();\n    const statusCode = result.status === 'ok' ? 200 : 503;\n    res.set('X-System-Mode', result.mode);\n    res.status(statusCode).json(result);\n  } catch (error) {\n    res.status(503).json({\n      status: \"error\",\n      mode: \"degraded\",\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '1.0.0',\n      error: (error as Error).message\n    });\n  }\n});\n\n// =============================================================================",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/index.final.ts",
        "start": 170,
        "end": 185,
        "startLoc": {
          "line": 170,
          "column": 18,
          "position": 1543
        },
        "endLoc": {
          "line": 185,
          "column": 81,
          "position": 1693
        }
      },
      "secondFile": {
        "name": "apps/api/src/index.final.ts",
        "start": 153,
        "end": 168,
        "startLoc": {
          "line": 153,
          "column": 17,
          "position": 1356
        },
        "endLoc": {
          "line": 168,
          "column": 4,
          "position": 1506
        }
      }
    },
    {
      "format": "typescript",
      "lines": 40,
      "fragment": "();\n\n// Security middleware (PR-28)\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"https:\"],\n    },\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration (PR-28)\napp.use(cors({\n  origin: ['http://localhost:3000', 'http://localhost:3001'],\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Org-ID', 'X-User-ID', 'X-Correlation-ID'],\n  exposedHeaders: ['X-System-Mode', 'X-Est-Cost-EUR', 'X-Budget-Pct', 'X-Latency-ms', 'X-Route']\n}));\n\n// Basic middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// Apply observability middleware (PR-23)\napp.use(observabilityMiddleware);\n\n// Apply FinOps middleware (PR-29)\napp.use(finOpsMiddleware);\n\n// Apply rate limiting middleware (PR-29)",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/index.expanded.ts",
        "start": 33,
        "end": 72,
        "startLoc": {
          "line": 33,
          "column": 13,
          "position": 300
        },
        "endLoc": {
          "line": 72,
          "column": 42,
          "position": 592
        }
      },
      "secondFile": {
        "name": "apps/api/src/index.final.ts",
        "start": 38,
        "end": 77,
        "startLoc": {
          "line": 38,
          "column": 18,
          "position": 330
        },
        "endLoc": {
          "line": 77,
          "column": 36,
          "position": 622
        }
      }
    },
    {
      "format": "typescript",
      "lines": 35,
      "fragment": "app.get(\"/health/live\", async (req, res) => {\n  try {\n    const result = await healthModeManager.getLivenessProbe();\n    const statusCode = result.status === 'ok' ? 200 : 503;\n    res.set('X-System-Mode', result.mode);\n    res.status(statusCode).json(result);\n  } catch (error) {\n    res.status(503).json({\n      status: \"error\",\n      mode: \"degraded\",\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '1.0.0',\n      error: (error as Error).message\n    });\n  }\n});\n\napp.get(\"/health/ready\", async (req, res) => {\n  try {\n    const result = await healthModeManager.getReadinessProbe();\n    const statusCode = result.status === 'ok' ? 200 : 503;\n    res.set('X-System-Mode', result.mode);\n    res.status(statusCode).json(result);\n  } catch (error) {\n    res.status(503).json({\n      status: \"error\",\n      mode: \"degraded\",\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '1.0.0',\n      error: (error as Error).message\n    });\n  }\n});\n\n// System metrics endpoint",
      "tokens": 0,
      "firstFile": {
        "name": "apps/api/src/index.expanded.ts",
        "start": 100,
        "end": 134,
        "startLoc": {
          "line": 100,
          "column": 1,
          "position": 799
        },
        "endLoc": {
          "line": 134,
          "column": 27,
          "position": 1173
        }
      },
      "secondFile": {
        "name": "apps/api/src/index.final.ts",
        "start": 151,
        "end": 168,
        "startLoc": {
          "line": 151,
          "column": 1,
          "position": 1319
        },
        "endLoc": {
          "line": 168,
          "column": 4,
          "position": 1506
        }
      }
    }
  ]
}