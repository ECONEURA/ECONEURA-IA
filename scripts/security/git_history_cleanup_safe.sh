#!/usr/bin/env bash
set -euo pipefail

# üö® SCRIPT DE LIMPIEZA DE HISTORIAL GIT - SOLO PARA EMERGENCIAS DE SEGURIDAD
# üö® ADVERTENCIA: Este script REESCRIBE el historial de Git permanentemente
# üö® REQUISITOS: Coordinaci√≥n con todo el equipo, backup completo, comunicaci√≥n clara

echo "üö® ADVERTENCIA CR√çTICA üö®"
echo "Este script reescribir√° permanentemente el historial de Git"
echo "Aseg√∫rate de tener:"
echo "‚Ä¢ Backup completo del repositorio"
echo "‚Ä¢ Coordinaci√≥n con TODO el equipo"
echo "‚Ä¢ Comunicaci√≥n clara sobre el push forzado"
echo "‚Ä¢ Pruebas exhaustivas antes del push"
echo ""

# Configuraci√≥n del repositorio
OWNER="ECONEURA"
REPO="ECONEURA-IA"
BRANCH="econeura/audit/hmac-canary/20250920T154117Z-13586"

# CLAVE COMPROMETIDA - REEMPLAZAR CON LA CLAVE REAL (NO COMPARTIR)
EXPOSED_KEY="<CLAVE_COMPROMETIDA_AQUI>"

# Verificaciones de seguridad
if [[ "$EXPOSED_KEY" == "<CLAVE_COMPROMETIDA_AQUI>" ]]; then
    echo "‚ùå ERROR: Debes reemplazar <CLAVE_COMPROMETIDA_AQUI> con la clave real comprometida"
    echo "üîí Por seguridad, NO pegues la clave en chats o logs"
    exit 1
fi

echo "üîê CLAVE A LIMPIAR: ${EXPOSED_KEY:0:8}...${EXPOSED_KEY: -8}"
echo ""

# Paso 1: Crear mirror del repositorio
echo "üìã PASO 1: Creando mirror del repositorio..."
TIMESTAMP=$(date --utc +%Y%m%dT%H%M%SZ)
MIRROR_DIR="repo-mirror-${TIMESTAMP}"

if [ -d "$MIRROR_DIR" ]; then
    echo "‚ùå El directorio $MIRROR_DIR ya existe. Eliminalo o usa otro nombre."
    exit 1
fi

git clone --mirror "https://github.com/${OWNER}/${REPO}.git" "$MIRROR_DIR"
cd "$MIRROR_DIR"

echo "‚úÖ Mirror creado en: $MIRROR_DIR"
echo ""

# Paso 2: Verificar que git-filter-repo est√© disponible
echo "üìã PASO 2: Verificando git-filter-repo..."
if ! command -v git-filter-repo >/dev/null 2>&1; then
    echo "‚ùå git-filter-repo no est√° instalado"
    echo "üì¶ Instalar con: pip install git-filter-repo"
    exit 1
fi

echo "‚úÖ git-filter-repo disponible"
echo ""

# Paso 3: Crear archivo de reemplazo seguro
echo "üìã PASO 3: Preparando reemplazo seguro..."
REPLACE_FILE=$(mktemp)
printf "s/%s/REDACTED/g\n" "$EXPOSED_KEY" > "$REPLACE_FILE"

echo "‚úÖ Archivo de reemplazo creado: $REPLACE_FILE"
echo "üìù Contenido: $(cat $REPLACE_FILE)"
echo ""

# Paso 4: Ejecutar limpieza (DRY RUN primero)
echo "üìã PASO 4: Ejecutando limpieza del historial..."
echo "üîç Ejecutando dry-run primero..."

if git filter-repo --replace-text "$REPLACE_FILE" --dry-run; then
    echo "‚úÖ Dry-run completado exitosamente"
    echo ""

    # Preguntar confirmaci√≥n antes del cambio real
    echo "‚ö†Ô∏è  ¬øProceder con la limpieza REAL del historial?"
    echo "Esto reescribir√° permanentemente el historial de Git"
    read -p "Escribe 'YES' para confirmar: " CONFIRM

    if [[ "$CONFIRM" != "YES" ]]; then
        echo "‚ùå Operaci√≥n cancelada por el usuario"
        exit 1
    fi

    echo ""
    echo "üîÑ Ejecutando limpieza REAL..."
    git filter-repo --replace-text "$REPLACE_FILE"

    echo "‚úÖ Limpieza completada"
    echo ""

    # Paso 5: Verificaciones post-limpieza
    echo "üìã PASO 5: Verificaciones post-limpieza..."

    # Verificar que la clave ya no aparezca
    if git log --all --full-history -- "$EXPOSED_KEY" | grep -q "$EXPOSED_KEY"; then
        echo "‚ùå ERROR: La clave a√∫n aparece en el historial"
        exit 1
    else
        echo "‚úÖ Verificaci√≥n: Clave no encontrada en historial"
    fi

    # Verificar que REDACTED aparezca donde deber√≠a
    REDACTED_COUNT=$(git log --all --full-history | grep -c "REDACTED" || true)
    if [ "$REDACTED_COUNT" -gt 0 ]; then
        echo "‚úÖ Verificaci√≥n: $REDACTED_COUNT ocurrencias reemplazadas"
    else
        echo "‚ö†Ô∏è  Advertencia: No se encontraron reemplazos (posiblemente la clave no estaba en el historial)"
    fi

    echo ""

    # Paso 6: Instrucciones para push forzado
    echo "üìã PASO 6: INSTRUCCIONES PARA PUSH FORZADO"
    echo ""
    echo "üö® IMPORTANTE: Coordina con TODO el equipo antes de ejecutar"
    echo ""
    echo "1Ô∏è‚É£ Notificar al equipo sobre el push forzado inminente"
    echo "2Ô∏è‚É£ Asegurarse de que todos hayan hecho backup de sus cambios locales"
    echo "3Ô∏è‚É£ Ejecutar desde el directorio del mirror:"
    echo ""
    echo "   cd $MIRROR_DIR"
    echo "   git push --force origin --all"
    echo "   git push --force origin --tags"
    echo ""
    echo "4Ô∏è‚É£ Verificar que todos los miembros del equipo hagan:"
    echo "   git fetch --all"
    echo "   git reset --hard origin/main"
    echo ""
    echo "5Ô∏è‚É£ Monitorear issues y PRs que puedan necesitar rebase"
    echo ""

    # Crear script de push seguro
    PUSH_SCRIPT="../push_force_safe_${TIMESTAMP}.sh"
    cat > "$PUSH_SCRIPT" << 'EOF'
#!/bin/bash
echo "üö® PUSH FORZADO - CONFIRMAR CON EQUIPO üö®"
echo "Aseg√∫rate de que TODO el equipo est√© al tanto"
read -p "Escribe 'CONFIRMED' para proceder: " CONFIRM

if [[ "$CONFIRM" == "CONFIRMED" ]]; then
    echo "üîÑ Ejecutando push forzado..."
    git push --force origin --all
    git push --force origin --tags
    echo "‚úÖ Push forzado completado"
    echo ""
    echo "üìã SIGUIENTES PASOS:"
    echo "1. Notificar al equipo que el push est√° completo"
    echo "2. Pedir a todos que ejecuten: git fetch --all && git reset --hard origin/main"
    echo "3. Revisar PRs y branches que puedan necesitar atenci√≥n"
else
    echo "‚ùå Push cancelado"
fi
EOF

    chmod +x "$PUSH_SCRIPT"
    echo "üìù Script de push seguro creado: $PUSH_SCRIPT"
    echo ""

else
    echo "‚ùå Dry-run fall√≥. Revisa los errores arriba."
    exit 1
fi

# Cleanup
rm -f "$REPLACE_FILE"

echo "üéâ LIMPIEZA DE HISTORIAL COMPLETADA"
echo "üìÅ Directorio del mirror: $(pwd)"
echo "üìù Script de push: $PUSH_SCRIPT"
echo ""
echo "üîí RECUERDA: La seguridad es responsabilidad de todos"
