[{"filePath":"/workspace/ECONEURA-IA/apps/web/ecosystem.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/web/next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/web/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/web/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/scripts/monitor.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'promisify' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"no-await-in-loop","severity":1,"message":"Unexpected `await` inside a loop.","line":47,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":47,"endColumn":36},{"ruleId":"no-await-in-loop","severity":1,"message":"Unexpected `await` inside a loop.","line":50,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":50,"endColumn":40},{"ruleId":"no-await-in-loop","severity":1,"message":"Unexpected `await` inside a loop.","line":54,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":54,"endColumn":40},{"ruleId":"require-await","severity":2,"message":"Async method 'fetchEndpoint' has no 'await' expression.","line":107,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":107,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'responseTime' is assigned a value but never used.","line":120,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":29},{"ruleId":"require-unicode-regexp","severity":2,"message":"Use the 'u' flag.","line":151,"column":34,"nodeType":"Literal","messageId":"requireUFlag","endLine":151,"endColumn":82,"suggestions":[{"fix":{"range":[4214,4214],"text":"u"},"messageId":"addUFlag","desc":"Add the 'u' flag."}]},{"ruleId":"require-unicode-regexp","severity":2,"message":"Use the 'u' flag.","line":158,"column":34,"nodeType":"Literal","messageId":"requireUFlag","endLine":158,"endColumn":84,"suggestions":[{"fix":{"range":[4472,4472],"text":"u"},"messageId":"addUFlag","desc":"Add the 'u' flag."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":274,"column":60,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":274,"endColumn":86,"fix":{"range":[9166,9192],"text":"`${errorRate.toFixed(2)  }%`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":280,"column":63,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":280,"endColumn":113,"fix":{"range":[9355,9405],"text":"`${this.metrics.averageResponseTime.toFixed(2)  }ms`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":290,"column":53,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":290,"endColumn":100,"fix":{"range":[9751,9798],"text":"`${this.metrics.jobQueue.pending  } pending jobs`"}},{"ruleId":"no-promise-executor-return","severity":2,"message":"Return values from promise executor functions cannot be read.","line":335,"column":35,"nodeType":"CallExpression","messageId":"returnsValue","endLine":335,"endColumn":58,"suggestions":[{"messageId":"wrapBraces","fix":{"range":[11392,11415],"text":"{setTimeout(resolve, ms)}"},"desc":"Wrap the expression in `{}`."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":3,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Real-time Monitoring Script for ECONEURA Workers\n * \n * This script provides real-time monitoring of:\n * - System performance metrics\n * - Email processing statistics\n * - Cron job execution status\n * - Redis connection health\n * - Error rates and trends\n */\n\nimport { performance } from 'perf_hooks';\nimport http from 'http';\nimport { promisify } from 'util';\n\nclass WorkersMonitor {\n  constructor(options = {}) {\n    this.baseUrl = options.baseUrl || 'http://localhost:3001';\n    this.interval = options.interval || 5000; // 5 seconds\n    this.isRunning = false;\n    this.metrics = {\n      startTime: Date.now(),\n      requests: 0,\n      errors: 0,\n      emailProcessed: 0,\n      cronExecutions: 0,\n      averageResponseTime: 0,\n      responseTimes: []\n    };\n    this.alerts = [];\n  }\n\n  async start() {\n    console.log('🔍 Starting ECONEURA Workers Real-time Monitor...\\n');\n    console.log(`📡 Monitoring: ${this.baseUrl}`);\n    console.log(`⏱️  Interval: ${this.interval}ms`);\n    console.log('Press Ctrl+C to stop\\n');\n\n    this.isRunning = true;\n    this.displayHeader();\n\n    // Start monitoring loop\n    while (this.isRunning) {\n      try {\n        await this.collectMetrics();\n        this.displayMetrics();\n        this.checkAlerts();\n        await this.sleep(this.interval);\n      } catch (error) {\n        console.error('❌ Monitoring error:', error.message);\n        this.metrics.errors++;\n        await this.sleep(this.interval);\n      }\n    }\n  }\n\n  stop() {\n    console.log('\\n🛑 Stopping monitor...');\n    this.isRunning = false;\n    this.displaySummary();\n  }\n\n  async collectMetrics() {\n    const startTime = performance.now();\n    \n    try {\n      // Collect health metrics\n      const healthData = await this.fetchEndpoint('/health');\n      if (healthData.success) {\n        this.metrics.uptime = healthData.data.uptime;\n        this.metrics.redis = healthData.data.redis;\n        this.metrics.jobQueue = healthData.data.jobQueue;\n      }\n\n      // Collect cron job statistics\n      const cronStats = await this.fetchEndpoint('/cron/stats');\n      if (cronStats.success) {\n        this.metrics.cronStats = cronStats.data.stats;\n      }\n\n      // Collect Prometheus metrics\n      const prometheusMetrics = await this.fetchEndpoint('/metrics');\n      if (prometheusMetrics) {\n        this.parsePrometheusMetrics(prometheusMetrics);\n      }\n\n      // Calculate response time\n      const responseTime = performance.now() - startTime;\n      this.metrics.responseTimes.push(responseTime);\n      this.metrics.averageResponseTime = this.calculateAverage(this.metrics.responseTimes);\n      \n      // Keep only last 100 response times\n      if (this.metrics.responseTimes.length > 100) {\n        this.metrics.responseTimes = this.metrics.responseTimes.slice(-100);\n      }\n\n      this.metrics.requests++;\n\n    } catch (error) {\n      this.metrics.errors++;\n      throw error;\n    }\n  }\n\n  async fetchEndpoint(path) {\n    return new Promise((resolve, reject) => {\n      const url = `${this.baseUrl}${path}`;\n      const startTime = performance.now();\n\n      const req = http.get(url, (res) => {\n        let data = '';\n\n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n\n        res.on('end', () => {\n          const responseTime = performance.now() - startTime;\n          \n          try {\n            if (path === '/metrics') {\n              resolve(data);\n            } else {\n              const jsonData = JSON.parse(data);\n              resolve(jsonData);\n            }\n          } catch (error) {\n            reject(new Error(`Failed to parse response from ${path}: ${error.message}`));\n          }\n        });\n      });\n\n      req.on('error', (error) => {\n        reject(new Error(`Request failed for ${path}: ${error.message}`));\n      });\n\n      req.setTimeout(5000, () => {\n        req.destroy();\n        reject(new Error(`Request timeout for ${path}`));\n      });\n    });\n  }\n\n  parsePrometheusMetrics(metricsText) {\n    const lines = metricsText.split('\\n');\n    \n    for (const line of lines) {\n      if (line.startsWith('econeura_emails_processed_total')) {\n        const match = line.match(/econeura_emails_processed_total\\{[^}]*\\} (\\d+)/);\n        if (match) {\n          this.metrics.emailProcessed = parseInt(match[1]);\n        }\n      }\n      \n      if (line.startsWith('econeura_cron_jobs_executed_total')) {\n        const match = line.match(/econeura_cron_jobs_executed_total\\{[^}]*\\} (\\d+)/);\n        if (match) {\n          this.metrics.cronExecutions = parseInt(match[1]);\n        }\n      }\n    }\n  }\n\n  calculateAverage(numbers) {\n    if (numbers.length === 0) return 0;\n    return numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n  }\n\n  displayHeader() {\n    console.clear();\n    console.log('╔══════════════════════════════════════════════════════════════════════════════╗');\n    console.log('║                    ECONEURA WORKERS REAL-TIME MONITOR                      ║');\n    console.log('╠══════════════════════════════════════════════════════════════════════════════╣');\n    console.log('║  Status: 🟢 Running  |  Uptime: Calculating...  |  Last Update: Now        ║');\n    console.log('╚══════════════════════════════════════════════════════════════════════════════╝\\n');\n  }\n\n  displayMetrics() {\n    const now = new Date();\n    const uptime = this.metrics.uptime ? Math.floor(this.metrics.uptime) : 0;\n    const errorRate = this.metrics.requests > 0 ? (this.metrics.errors / this.metrics.requests * 100).toFixed(2) : 0;\n    \n    // Clear screen and display updated metrics\n    process.stdout.write('\\x1B[2J\\x1B[0f');\n    \n    console.log('╔══════════════════════════════════════════════════════════════════════════════╗');\n    console.log('║                    ECONEURA WORKERS REAL-TIME MONITOR                      ║');\n    console.log('╠══════════════════════════════════════════════════════════════════════════════╣');\n    console.log(`║  Status: 🟢 Running  |  Uptime: ${uptime}s  |  Last Update: ${now.toLocaleTimeString()}  ║`);\n    console.log('╚══════════════════════════════════════════════════════════════════════════════╝\\n');\n\n    // System Metrics\n    console.log('📊 SYSTEM METRICS');\n    console.log('─────────────────');\n    console.log(`Requests: ${this.metrics.requests} | Errors: ${this.metrics.errors} | Error Rate: ${errorRate}%`);\n    console.log(`Avg Response Time: ${this.metrics.averageResponseTime.toFixed(2)}ms`);\n    console.log(`Redis Status: ${this.metrics.redis || 'Unknown'}`);\n    console.log('');\n\n    // Job Queue Metrics\n    if (this.metrics.jobQueue) {\n      console.log('🔄 JOB QUEUE');\n      console.log('────────────');\n      console.log(`Total: ${this.metrics.jobQueue.total} | Pending: ${this.metrics.jobQueue.pending} | Processing: ${this.metrics.jobQueue.processing}`);\n      console.log(`Completed: ${this.metrics.jobQueue.completed} | Failed: ${this.metrics.jobQueue.failed}`);\n      console.log('');\n    }\n\n    // Cron Job Metrics\n    if (this.metrics.cronStats) {\n      console.log('⏰ CRON JOBS');\n      console.log('────────────');\n      console.log(`Total: ${this.metrics.cronStats.total} | Enabled: ${this.metrics.cronStats.enabled} | Disabled: ${this.metrics.cronStats.disabled}`);\n      console.log(`Total Runs: ${this.metrics.cronStats.totalRuns} | Total Errors: ${this.metrics.cronStats.totalErrors}`);\n      console.log('');\n    }\n\n    // Email Processing Metrics\n    console.log('📧 EMAIL PROCESSING');\n    console.log('───────────────────');\n    console.log(`Emails Processed: ${this.metrics.emailProcessed}`);\n    console.log(`Cron Executions: ${this.metrics.cronExecutions}`);\n    console.log('');\n\n    // Alerts\n    if (this.alerts.length > 0) {\n      console.log('🚨 ACTIVE ALERTS');\n      console.log('────────────────');\n      this.alerts.slice(-5).forEach(alert => {\n        const timestamp = new Date(alert.timestamp).toLocaleTimeString();\n        console.log(`[${timestamp}] ${alert.message}`);\n      });\n      console.log('');\n    }\n\n    // Performance Graph (simple ASCII)\n    this.displayPerformanceGraph();\n  }\n\n  displayPerformanceGraph() {\n    console.log('📈 RESPONSE TIME TREND (last 20 samples)');\n    console.log('─────────────────────────────────────────');\n    \n    const recentTimes = this.metrics.responseTimes.slice(-20);\n    if (recentTimes.length === 0) {\n      console.log('No data available');\n      return;\n    }\n\n    const maxTime = Math.max(...recentTimes);\n    const minTime = Math.min(...recentTimes);\n    const range = maxTime - minTime || 1;\n\n    const graph = recentTimes.map(time => {\n      const normalized = (time - minTime) / range;\n      const barLength = Math.floor(normalized * 20);\n      const bar = '█'.repeat(barLength) + '░'.repeat(20 - barLength);\n      return `${time.toFixed(1)}ms │${bar}│`;\n    });\n\n    graph.forEach(line => console.log(line));\n    console.log('');\n  }\n\n  checkAlerts() {\n    const now = Date.now();\n\n    // High error rate alert\n    if (this.metrics.requests > 10) {\n      const errorRate = (this.metrics.errors / this.metrics.requests) * 100;\n      if (errorRate > 10) {\n        this.addAlert('High error rate detected', 'error', errorRate.toFixed(2) + '%');\n      }\n    }\n\n    // High response time alert\n    if (this.metrics.averageResponseTime > 1000) {\n      this.addAlert('High response time detected', 'warning', this.metrics.averageResponseTime.toFixed(2) + 'ms');\n    }\n\n    // Redis connection alert\n    if (this.metrics.redis && this.metrics.redis !== 'connected') {\n      this.addAlert('Redis connection issue', 'error', this.metrics.redis);\n    }\n\n    // Job queue backlog alert\n    if (this.metrics.jobQueue && this.metrics.jobQueue.pending > 100) {\n      this.addAlert('Job queue backlog', 'warning', this.metrics.jobQueue.pending + ' pending jobs');\n    }\n\n    // Clean old alerts (older than 5 minutes)\n    this.alerts = this.alerts.filter(alert => now - alert.timestamp < 5 * 60 * 1000);\n  }\n\n  addAlert(message, type, value) {\n    const alert = {\n      timestamp: Date.now(),\n      message: `${type.toUpperCase()}: ${message} (${value})`,\n      type,\n      value\n    };\n\n    // Avoid duplicate alerts\n    const recentAlert = this.alerts.find(a => \n      a.message === alert.message && \n      Date.now() - a.timestamp < 30000 // 30 seconds\n    );\n\n    if (!recentAlert) {\n      this.alerts.push(alert);\n    }\n  }\n\n  displaySummary() {\n    const totalTime = Date.now() - this.metrics.startTime;\n    const totalMinutes = Math.floor(totalTime / 60000);\n    const totalSeconds = Math.floor((totalTime % 60000) / 1000);\n    \n    console.log('\\n📊 MONITORING SESSION SUMMARY');\n    console.log('═══════════════════════════════');\n    console.log(`Duration: ${totalMinutes}m ${totalSeconds}s`);\n    console.log(`Total Requests: ${this.metrics.requests}`);\n    console.log(`Total Errors: ${this.metrics.errors}`);\n    console.log(`Error Rate: ${this.metrics.requests > 0 ? (this.metrics.errors / this.metrics.requests * 100).toFixed(2) : 0}%`);\n    console.log(`Average Response Time: ${this.metrics.averageResponseTime.toFixed(2)}ms`);\n    console.log(`Emails Processed: ${this.metrics.emailProcessed}`);\n    console.log(`Cron Executions: ${this.metrics.cronExecutions}`);\n    console.log(`Alerts Generated: ${this.alerts.length}`);\n    console.log('\\n👋 Monitoring session ended. Goodbye!');\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  if (global.monitor) {\n    global.monitor.stop();\n  }\n  process.exit(0);\n});\n\n// Run monitor if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const options = {\n    baseUrl: process.env.WORKERS_URL || 'http://localhost:3001',\n    interval: parseInt(process.env.MONITOR_INTERVAL) || 5000\n  };\n\n  const monitor = new WorkersMonitor(options);\n  global.monitor = monitor;\n  monitor.start().catch(console.error);\n}\n\nexport default WorkersMonitor;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/scripts/optimize.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'execAsync' is assigned a value but never used.","line":20,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"require-await","severity":2,"message":"Async method 'analyzeMemoryUsage' has no 'await' expression.","line":49,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":49,"endColumn":27},{"ruleId":"require-await","severity":2,"message":"Async method 'analyzeRedisPerformance' has no 'await' expression.","line":89,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":89,"endColumn":32},{"ruleId":"require-await","severity":2,"message":"Async method 'analyzeCronJobs' has no 'await' expression.","line":132,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":132,"endColumn":24},{"ruleId":"require-await","severity":2,"message":"Async method 'analyzeEmailProcessing' has no 'await' expression.","line":172,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":172,"endColumn":31},{"ruleId":"require-await","severity":2,"message":"Async method 'generateRecommendations' has no 'await' expression.","line":221,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":221,"endColumn":32}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Performance Optimization Script for ECONEURA Workers\n * \n * This script analyzes and optimizes the workers performance by:\n * - Analyzing memory usage patterns\n * - Optimizing Redis connection pooling\n * - Tuning cron job schedules\n * - Analyzing email processing performance\n * - Generating optimization recommendations\n */\n\nimport { performance } from 'perf_hooks';\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nclass WorkersOptimizer {\n  constructor() {\n    this.optimizations = [];\n    this.metrics = {};\n    this.recommendations = [];\n  }\n\n  async run() {\n    console.log('🚀 Starting ECONEURA Workers Performance Optimization...\\n');\n\n    try {\n      await this.analyzeMemoryUsage();\n      await this.analyzeRedisPerformance();\n      await this.analyzeCronJobs();\n      await this.analyzeEmailProcessing();\n      await this.generateRecommendations();\n      await this.generateReport();\n\n      console.log('\\n✅ Optimization analysis completed successfully!');\n      console.log(`📊 Found ${this.optimizations.length} optimization opportunities`);\n      console.log(`💡 Generated ${this.recommendations.length} recommendations`);\n    } catch (error) {\n      console.error('❌ Optimization failed:', error.message);\n      process.exit(1);\n    }\n  }\n\n  async analyzeMemoryUsage() {\n    console.log('🔍 Analyzing memory usage patterns...');\n\n    const startTime = performance.now();\n    \n    // Simulate memory analysis\n    const memoryAnalysis = {\n      heapUsed: process.memoryUsage().heapUsed,\n      heapTotal: process.memoryUsage().heapTotal,\n      external: process.memoryUsage().external,\n      rss: process.memoryUsage().rss,\n      analysisTime: performance.now() - startTime\n    };\n\n    this.metrics.memory = memoryAnalysis;\n\n    // Check for memory optimization opportunities\n    if (memoryAnalysis.heapUsed > 100 * 1024 * 1024) { // 100MB\n      this.optimizations.push({\n        type: 'memory',\n        severity: 'high',\n        description: 'High heap memory usage detected',\n        current: `${Math.round(memoryAnalysis.heapUsed / 1024 / 1024)}MB`,\n        recommendation: 'Consider implementing memory pooling and garbage collection optimization'\n      });\n    }\n\n    if (memoryAnalysis.external > 50 * 1024 * 1024) { // 50MB\n      this.optimizations.push({\n        type: 'memory',\n        severity: 'medium',\n        description: 'High external memory usage',\n        current: `${Math.round(memoryAnalysis.external / 1024 / 1024)}MB`,\n        recommendation: 'Review external dependencies and buffer usage'\n      });\n    }\n\n    console.log(`   Memory usage: ${Math.round(memoryAnalysis.heapUsed / 1024 / 1024)}MB heap, ${Math.round(memoryAnalysis.external / 1024 / 1024)}MB external`);\n  }\n\n  async analyzeRedisPerformance() {\n    console.log('🔍 Analyzing Redis performance...');\n\n    const startTime = performance.now();\n\n    try {\n      // Simulate Redis performance analysis\n      const redisAnalysis = {\n        connectionPoolSize: 10,\n        averageResponseTime: 2.5,\n        connectionUtilization: 0.7,\n        analysisTime: performance.now() - startTime\n      };\n\n      this.metrics.redis = redisAnalysis;\n\n      // Check Redis optimization opportunities\n      if (redisAnalysis.averageResponseTime > 5) {\n        this.optimizations.push({\n          type: 'redis',\n          severity: 'high',\n          description: 'High Redis response time',\n          current: `${redisAnalysis.averageResponseTime}ms`,\n          recommendation: 'Optimize Redis queries and consider connection pooling'\n        });\n      }\n\n      if (redisAnalysis.connectionUtilization > 0.9) {\n        this.optimizations.push({\n          type: 'redis',\n          severity: 'medium',\n          description: 'High Redis connection utilization',\n          current: `${Math.round(redisAnalysis.connectionUtilization * 100)}%`,\n          recommendation: 'Increase connection pool size or implement connection sharing'\n        });\n      }\n\n      console.log(`   Redis performance: ${redisAnalysis.averageResponseTime}ms avg response, ${Math.round(redisAnalysis.connectionUtilization * 100)}% utilization`);\n    } catch (error) {\n      console.log('   ⚠️  Redis analysis skipped (Redis not available)');\n    }\n  }\n\n  async analyzeCronJobs() {\n    console.log('🔍 Analyzing cron job performance...');\n\n    const startTime = performance.now();\n\n    // Simulate cron job analysis\n    const cronAnalysis = {\n      totalJobs: 6,\n      averageExecutionTime: 150,\n      errorRate: 0.02,\n      overlapDetected: false,\n      analysisTime: performance.now() - startTime\n    };\n\n    this.metrics.cron = cronAnalysis;\n\n    // Check cron optimization opportunities\n    if (cronAnalysis.averageExecutionTime > 1000) {\n      this.optimizations.push({\n        type: 'cron',\n        severity: 'medium',\n        description: 'Slow cron job execution',\n        current: `${cronAnalysis.averageExecutionTime}ms`,\n        recommendation: 'Optimize cron job logic and consider parallel execution'\n      });\n    }\n\n    if (cronAnalysis.errorRate > 0.05) {\n      this.optimizations.push({\n        type: 'cron',\n        severity: 'high',\n        description: 'High cron job error rate',\n        current: `${Math.round(cronAnalysis.errorRate * 100)}%`,\n        recommendation: 'Review error handling and add retry mechanisms'\n      });\n    }\n\n    console.log(`   Cron jobs: ${cronAnalysis.totalJobs} jobs, ${cronAnalysis.averageExecutionTime}ms avg execution, ${Math.round(cronAnalysis.errorRate * 100)}% error rate`);\n  }\n\n  async analyzeEmailProcessing() {\n    console.log('🔍 Analyzing email processing performance...');\n\n    const startTime = performance.now();\n\n    // Simulate email processing analysis\n    const emailAnalysis = {\n      averageProcessingTime: 250,\n      categorizationAccuracy: 0.92,\n      bulkProcessingEfficiency: 0.85,\n      analysisTime: performance.now() - startTime\n    };\n\n    this.metrics.email = emailAnalysis;\n\n    // Check email processing optimization opportunities\n    if (emailAnalysis.averageProcessingTime > 500) {\n      this.optimizations.push({\n        type: 'email',\n        severity: 'medium',\n        description: 'Slow email processing',\n        current: `${emailAnalysis.averageProcessingTime}ms`,\n        recommendation: 'Optimize email analysis algorithms and implement caching'\n      });\n    }\n\n    if (emailAnalysis.categorizationAccuracy < 0.9) {\n      this.optimizations.push({\n        type: 'email',\n        severity: 'low',\n        description: 'Email categorization accuracy could be improved',\n        current: `${Math.round(emailAnalysis.categorizationAccuracy * 100)}%`,\n        recommendation: 'Enhance categorization algorithms and training data'\n      });\n    }\n\n    if (emailAnalysis.bulkProcessingEfficiency < 0.8) {\n      this.optimizations.push({\n        type: 'email',\n        severity: 'medium',\n        description: 'Bulk email processing efficiency is low',\n        current: `${Math.round(emailAnalysis.bulkProcessingEfficiency * 100)}%`,\n        recommendation: 'Optimize batch processing and concurrency limits'\n      });\n    }\n\n    console.log(`   Email processing: ${emailAnalysis.averageProcessingTime}ms avg, ${Math.round(emailAnalysis.categorizationAccuracy * 100)}% accuracy, ${Math.round(emailAnalysis.bulkProcessingEfficiency * 100)}% efficiency`);\n  }\n\n  async generateRecommendations() {\n    console.log('💡 Generating optimization recommendations...');\n\n    // High priority recommendations\n    const highPriorityOptimizations = this.optimizations.filter(opt => opt.severity === 'high');\n    if (highPriorityOptimizations.length > 0) {\n      this.recommendations.push({\n        priority: 'high',\n        title: 'Critical Performance Issues',\n        description: 'Address these issues immediately to prevent system degradation',\n        optimizations: highPriorityOptimizations,\n        estimatedImpact: 'High',\n        effort: 'Medium'\n      });\n    }\n\n    // Medium priority recommendations\n    const mediumPriorityOptimizations = this.optimizations.filter(opt => opt.severity === 'medium');\n    if (mediumPriorityOptimizations.length > 0) {\n      this.recommendations.push({\n        priority: 'medium',\n        title: 'Performance Improvements',\n        description: 'These optimizations will improve overall system performance',\n        optimizations: mediumPriorityOptimizations,\n        estimatedImpact: 'Medium',\n        effort: 'Low'\n      });\n    }\n\n    // Low priority recommendations\n    const lowPriorityOptimizations = this.optimizations.filter(opt => opt.severity === 'low');\n    if (lowPriorityOptimizations.length > 0) {\n      this.recommendations.push({\n        priority: 'low',\n        title: 'Quality Improvements',\n        description: 'These optimizations will enhance system quality and maintainability',\n        optimizations: lowPriorityOptimizations,\n        estimatedImpact: 'Low',\n        effort: 'Low'\n      });\n    }\n\n    // General recommendations\n    this.recommendations.push({\n      priority: 'general',\n      title: 'General Best Practices',\n      description: 'Recommended practices for maintaining optimal performance',\n      optimizations: [\n        {\n          type: 'general',\n          severity: 'info',\n          description: 'Implement monitoring and alerting',\n          recommendation: 'Set up comprehensive monitoring with Prometheus and Grafana'\n        },\n        {\n          type: 'general',\n          severity: 'info',\n          description: 'Regular performance testing',\n          recommendation: 'Run load tests weekly to identify performance regressions'\n        },\n        {\n          type: 'general',\n          severity: 'info',\n          description: 'Database optimization',\n          recommendation: 'Regularly analyze and optimize database queries and indexes'\n        }\n      ],\n      estimatedImpact: 'Medium',\n      effort: 'Medium'\n    });\n\n    console.log(`   Generated ${this.recommendations.length} recommendation categories`);\n  }\n\n  async generateReport() {\n    console.log('📊 Generating optimization report...');\n\n    const report = {\n      timestamp: new Date().toISOString(),\n      summary: {\n        totalOptimizations: this.optimizations.length,\n        highPriority: this.optimizations.filter(opt => opt.severity === 'high').length,\n        mediumPriority: this.optimizations.filter(opt => opt.severity === 'medium').length,\n        lowPriority: this.optimizations.filter(opt => opt.severity === 'low').length,\n        recommendations: this.recommendations.length\n      },\n      metrics: this.metrics,\n      optimizations: this.optimizations,\n      recommendations: this.recommendations\n    };\n\n    // Save report to file\n    const reportPath = path.join(process.cwd(), 'optimization-report.json');\n    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\n\n    // Generate console summary\n    console.log('\\n📋 OPTIMIZATION SUMMARY');\n    console.log('========================');\n    console.log(`Total optimizations found: ${report.summary.totalOptimizations}`);\n    console.log(`High priority: ${report.summary.highPriority}`);\n    console.log(`Medium priority: ${report.summary.mediumPriority}`);\n    console.log(`Low priority: ${report.summary.lowPriority}`);\n    console.log(`Recommendations: ${report.summary.recommendations}`);\n    console.log(`\\nReport saved to: ${reportPath}`);\n\n    // Display high priority issues\n    const highPriorityIssues = this.optimizations.filter(opt => opt.severity === 'high');\n    if (highPriorityIssues.length > 0) {\n      console.log('\\n🚨 HIGH PRIORITY ISSUES:');\n      highPriorityIssues.forEach((issue, index) => {\n        console.log(`${index + 1}. ${issue.description}`);\n        console.log(`   Current: ${issue.current}`);\n        console.log(`   Recommendation: ${issue.recommendation}\\n`);\n      });\n    }\n\n    // Display recommendations\n    console.log('\\n💡 RECOMMENDATIONS:');\n    this.recommendations.forEach((rec, index) => {\n      console.log(`${index + 1}. ${rec.title} (${rec.priority} priority)`);\n      console.log(`   Impact: ${rec.estimatedImpact} | Effort: ${rec.effort}`);\n      console.log(`   ${rec.description}\\n`);\n    });\n  }\n}\n\n// Run optimization if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const optimizer = new WorkersOptimizer();\n  optimizer.run().catch(console.error);\n}\n\nexport default WorkersOptimizer;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/src/__tests__/cron-service.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":54,"column":18,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { CronService } from '../services/cron-service.js';\n\n// Mock dependencies\nvi.mock('../queues/job-queue.js', () => ({\n  JobQueue: vi.fn().mockImplementation(() => ({\n    getStats: vi.fn(),\n    dequeue: vi.fn(),\n    completeJob: vi.fn(),\n    failJob: vi.fn(),\n    clearCompletedJobs: vi.fn(),\n    enqueue: vi.fn()\n  }))\n}));\n\nvi.mock('../processors/email-processor.js', () => ({\n  EmailProcessor: vi.fn().mockImplementation(() => ({\n    processEmail: vi.fn()\n  }))\n}));\n\nvi.mock('../services/graph-service.js', () => ({\n  GraphService: vi.fn().mockImplementation(() => ({}))\n}));\n\nvi.mock('../utils/logger.js', () => ({\n  logger: {\n    info: vi.fn(),\n    error: vi.fn(),\n    warn: vi.fn()\n  }\n}));\n\nvi.mock('../utils/metrics.js', () => ({\n  prometheusMetrics: {\n    counter: vi.fn().mockReturnValue({\n      inc: vi.fn()\n    }),\n    histogram: vi.fn().mockReturnValue({\n      observe: vi.fn()\n    })\n  }\n}));\n\n// Mock node-cron\nvi.mock('node-cron', () => ({\n  default: {\n    schedule: vi.fn(),\n    validate: vi.fn().mockReturnValue(true)\n  }\n}));\n\ndescribe('CronService', () => {\n  let cronService: CronService;\n\n  beforeEach(() => {\n    cronService = new CronService();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('initialization', () => {\n    it('should initialize with default jobs', () => {\n      const jobs = cronService.getAllJobs();\n      \n      expect(jobs).toHaveLength(6);\n      expect(jobs.map(j => j.id)).toEqual([\n        'email_processing',\n        'graph_sync',\n        'cleanup',\n        'health_check',\n        'daily_reports',\n        'weekly_export'\n      ]);\n    });\n\n    it('should have all jobs enabled by default', () => {\n      const jobs = cronService.getAllJobs();\n      \n      expect(jobs.every(job => job.enabled)).toBe(true);\n    });\n\n    it('should have correct schedules for default jobs', () => {\n      const jobs = cronService.getAllJobs();\n      const jobMap = new Map(jobs.map(job => [job.id, job.schedule]));\n      \n      expect(jobMap.get('email_processing')).toBe('*/5 * * * *');\n      expect(jobMap.get('graph_sync')).toBe('*/15 * * * *');\n      expect(jobMap.get('cleanup')).toBe('0 * * * *');\n      expect(jobMap.get('health_check')).toBe('* * * * *');\n      expect(jobMap.get('daily_reports')).toBe('0 6 * * *');\n      expect(jobMap.get('weekly_export')).toBe('0 2 * * 0');\n    });\n  });\n\n  describe('job management', () => {\n    it('should add a new job', () => {\n      const newJob = {\n        id: 'test_job',\n        name: 'Test Job',\n        schedule: '0 0 * * *',\n        task: vi.fn(),\n        enabled: true,\n        runCount: 0,\n        errorCount: 0\n      };\n\n      cronService.addJob(newJob);\n      \n      const job = cronService.getJobStatus('test_job');\n      expect(job).toMatchObject({\n        id: 'test_job',\n        name: 'Test Job',\n        schedule: '0 0 * * *',\n        enabled: true\n      });\n    });\n\n    it('should remove a job', () => {\n      cronService.removeJob('email_processing');\n      \n      const job = cronService.getJobStatus('email_processing');\n      expect(job).toBeNull();\n    });\n\n    it('should enable a job', () => {\n      cronService.disableJob('email_processing');\n      cronService.enableJob('email_processing');\n      \n      const job = cronService.getJobStatus('email_processing');\n      expect(job?.enabled).toBe(true);\n    });\n\n    it('should disable a job', () => {\n      cronService.disableJob('email_processing');\n      \n      const job = cronService.getJobStatus('email_processing');\n      expect(job?.enabled).toBe(false);\n    });\n  });\n\n  describe('job execution', () => {\n    it('should execute job successfully', async () => {\n      const mockTask = vi.fn().mockResolvedValue(undefined);\n      const job = {\n        id: 'test_job',\n        name: 'Test Job',\n        schedule: '0 0 * * *',\n        task: mockTask,\n        enabled: true,\n        runCount: 0,\n        errorCount: 0\n      };\n\n      cronService.addJob(job);\n      \n      // Simulate job execution\n      const jobStatus = cronService.getJobStatus('test_job');\n      if (jobStatus) {\n        jobStatus.lastRun = new Date();\n        jobStatus.runCount++;\n      }\n\n      expect(jobStatus?.runCount).toBe(1);\n    });\n\n    it('should handle job execution errors', async () => {\n      const mockTask = vi.fn().mockRejectedValue(new Error('Task failed'));\n      const job = {\n        id: 'failing_job',\n        name: 'Failing Job',\n        schedule: '0 0 * * *',\n        task: mockTask,\n        enabled: true,\n        runCount: 0,\n        errorCount: 0\n      };\n\n      cronService.addJob(job);\n      \n      // Simulate job execution with error\n      const jobStatus = cronService.getJobStatus('failing_job');\n      if (jobStatus) {\n        jobStatus.lastRun = new Date();\n        jobStatus.runCount++;\n        jobStatus.errorCount++;\n      }\n\n      expect(jobStatus?.errorCount).toBe(1);\n    });\n  });\n\n  describe('job statistics', () => {\n    it('should return correct job statistics', () => {\n      const stats = cronService.getJobStats();\n      \n      expect(stats).toMatchObject({\n        total: 6,\n        enabled: 6,\n        disabled: 0,\n        totalRuns: 0,\n        totalErrors: 0\n      });\n    });\n\n    it('should update statistics after job execution', () => {\n      // Simulate some job runs\n      const emailJob = cronService.getJobStatus('email_processing');\n      if (emailJob) {\n        emailJob.runCount = 5;\n        emailJob.errorCount = 1;\n      }\n\n      const stats = cronService.getJobStats();\n      \n      expect(stats.totalRuns).toBe(5);\n      expect(stats.totalErrors).toBe(1);\n    });\n  });\n\n  describe('specific job implementations', () => {\n    it('should process pending emails job', async () => {\n      const { JobQueue } = await import('../queues/job-queue.js');\n      const mockJobQueue = new JobQueue();\n      \n      (mockJobQueue.getStats as any).mockResolvedValue({\n        pending: 2,\n        processing: 0,\n        completed: 10,\n        failed: 1\n      });\n\n      (mockJobQueue.dequeue as any)\n        .mockResolvedValueOnce({\n          id: 'job_1',\n          payload: { messageId: 'email_1' },\n          organizationId: 'org_1'\n        })\n        .mockResolvedValueOnce({\n          id: 'job_2',\n          payload: { messageId: 'email_2' },\n          organizationId: 'org_1'\n        })\n        .mockResolvedValueOnce(null);\n\n      const { EmailProcessor } = await import('../processors/email-processor.js');\n      const mockEmailProcessor = new EmailProcessor();\n      (mockEmailProcessor.processEmail as any).mockResolvedValue({\n        messageId: 'email_1',\n        processed: true\n      });\n\n      // This would be called internally by the cron job\n      // We're testing the logic indirectly through the job structure\n      const emailJob = cronService.getJobStatus('email_processing');\n      expect(emailJob?.id).toBe('email_processing');\n    });\n\n    it('should perform cleanup job', async () => {\n      const { JobQueue } = await import('../queues/job-queue.js');\n      const mockJobQueue = new JobQueue();\n      \n      (mockJobQueue.clearCompletedJobs as any).mockResolvedValue(5);\n\n      const cleanupJob = cronService.getJobStatus('cleanup');\n      expect(cleanupJob?.id).toBe('cleanup');\n    });\n\n    it('should generate daily reports job', async () => {\n      const { JobQueue } = await import('../queues/job-queue.js');\n      const mockJobQueue = new JobQueue();\n      \n      (mockJobQueue.enqueue as any).mockResolvedValue('job_id');\n\n      const reportsJob = cronService.getJobStatus('daily_reports');\n      expect(reportsJob?.id).toBe('daily_reports');\n    });\n\n    it('should perform weekly export job', async () => {\n      const { JobQueue } = await import('../queues/job-queue.js');\n      const mockJobQueue = new JobQueue();\n      \n      (mockJobQueue.enqueue as any).mockResolvedValue('export_job_id');\n\n      const exportJob = cronService.getJobStatus('weekly_export');\n      expect(exportJob?.id).toBe('weekly_export');\n    });\n  });\n\n  describe('health check job', () => {\n    it('should perform health check', async () => {\n      const { JobQueue } = await import('../queues/job-queue.js');\n      const mockJobQueue = new JobQueue();\n      \n      (mockJobQueue.getStats as any).mockResolvedValue({\n        pending: 0,\n        processing: 0,\n        completed: 100,\n        failed: 5\n      });\n\n      const healthJob = cronService.getJobStatus('health_check');\n      expect(healthJob?.id).toBe('health_check');\n    });\n  });\n\n  describe('graph sync job', () => {\n    it('should sync graph data', async () => {\n      const graphJob = cronService.getJobStatus('graph_sync');\n      expect(graphJob?.id).toBe('graph_sync');\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle invalid cron schedule', () => {\n      const { default: cron } = await import('node-cron');\n      (cron.validate as any).mockReturnValue(false);\n\n      const invalidJob = {\n        id: 'invalid_job',\n        name: 'Invalid Job',\n        schedule: 'invalid schedule',\n        task: vi.fn(),\n        enabled: true,\n        runCount: 0,\n        errorCount: 0\n      };\n\n      // Should not throw error, but should log warning\n      expect(() => cronService.addJob(invalidJob)).not.toThrow();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/src/__tests__/email-processor.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":35,"column":21,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';\nimport { EmailProcessor, EmailMessage } from '../processors/email-processor.js';\n\n// Mock dependencies\nvi.mock('../services/graph-service.js', () => ({\n  GraphService: vi.fn().mockImplementation(() => ({\n    getEmail: vi.fn()\n  }))\n}));\n\nvi.mock('../queues/job-queue.js', () => ({\n  JobQueue: vi.fn().mockImplementation(() => ({}))\n}));\n\nvi.mock('../utils/logger.js', () => ({\n  logger: {\n    info: vi.fn(),\n    error: vi.fn(),\n    warn: vi.fn()\n  }\n}));\n\nvi.mock('../utils/metrics.js', () => ({\n  prometheusMetrics: {\n    counter: vi.fn().mockReturnValue({\n      inc: vi.fn()\n    }),\n    histogram: vi.fn().mockReturnValue({\n      observe: vi.fn()\n    })\n  }\n}));\n\ndescribe('EmailProcessor', () => {\n  let emailProcessor: EmailProcessor;\n  let mockEmail: EmailMessage;\n\n  beforeEach(() => {\n    emailProcessor = new EmailProcessor();\n    \n    mockEmail = {\n      id: 'email_123',\n      subject: 'Invoice Payment Required',\n      from: {\n        emailAddress: {\n          address: 'billing@company.com',\n          name: 'Billing Department'\n        }\n      },\n      toRecipients: [{\n        emailAddress: {\n          address: 'user@example.com',\n          name: 'User'\n        }\n      }],\n      body: {\n        content: 'Please pay your invoice of €1,500.00 by the due date.',\n        contentType: 'text'\n      },\n      receivedDateTime: '2024-01-15T10:00:00Z',\n      isRead: false,\n      importance: 'high',\n      hasAttachments: true,\n      internetMessageId: 'msg_123',\n      conversationId: 'conv_123'\n    };\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('processEmail', () => {\n    it('should process email successfully and categorize as finance', async () => {\n      // Mock GraphService.getEmail\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(mockEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result).toMatchObject({\n        messageId: 'email_123',\n        processed: true,\n        action: 'categorize',\n        confidence: 0.9,\n        metadata: {\n          category: 'finance',\n          sentiment: 'neutral',\n          urgency: 'high',\n          language: 'es'\n        }\n      });\n      expect(result.processingTime).toBeGreaterThan(0);\n    });\n\n    it('should categorize meeting emails as calendar', async () => {\n      const meetingEmail = {\n        ...mockEmail,\n        subject: 'Meeting scheduled for tomorrow',\n        body: {\n          content: 'We have a meeting scheduled for tomorrow at 2 PM.',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(meetingEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.category).toBe('calendar');\n      expect(result.action).toBe('categorize');\n      expect(result.confidence).toBe(0.8);\n    });\n\n    it('should categorize support emails and forward them', async () => {\n      const supportEmail = {\n        ...mockEmail,\n        subject: 'Support request - urgent issue',\n        body: {\n          content: 'I need help with my account. Please assist me.',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(supportEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.category).toBe('support');\n      expect(result.action).toBe('forward');\n      expect(result.confidence).toBe(0.85);\n    });\n\n    it('should detect positive sentiment', async () => {\n      const positiveEmail = {\n        ...mockEmail,\n        subject: 'Thank you for your service',\n        body: {\n          content: 'Thank you so much! Great work, excellent service!',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(positiveEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.sentiment).toBe('positive');\n    });\n\n    it('should detect negative sentiment', async () => {\n      const negativeEmail = {\n        ...mockEmail,\n        subject: 'Problem with service',\n        body: {\n          content: 'I am disappointed with the service. There is a problem.',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(negativeEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.sentiment).toBe('negative');\n    });\n\n    it('should extract entities from email content', async () => {\n      const emailWithEntities = {\n        ...mockEmail,\n        body: {\n          content: 'Contact us at support@company.com or call +34612345678. Amount: €2,500.00',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(emailWithEntities);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.entities).toContain('support@company.com');\n      expect(result.metadata.entities).toContain('+34612345678');\n      expect(result.metadata.entities).toContain('€2,500.00');\n    });\n\n    it('should handle email not found error', async () => {\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(null);\n\n      await expect(\n        emailProcessor.processEmail('nonexistent_email', 'org_456')\n      ).rejects.toThrow('Email nonexistent_email not found');\n    });\n\n    it('should handle processing errors gracefully', async () => {\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockRejectedValue(new Error('Graph API error'));\n\n      await expect(\n        emailProcessor.processEmail('email_123', 'org_456')\n      ).rejects.toThrow('Graph API error');\n    });\n  });\n\n  describe('processBulkEmails', () => {\n    it('should process multiple emails successfully', async () => {\n      const messageIds = ['email_1', 'email_2', 'email_3'];\n      \n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(mockEmail);\n\n      const results = await emailProcessor.processBulkEmails(messageIds, 'org_456');\n\n      expect(results).toHaveLength(3);\n      expect(results.every(r => r.processed)).toBe(true);\n      expect(results.every(r => r.messageId)).toBe(true);\n    });\n\n    it('should handle partial failures in bulk processing', async () => {\n      const messageIds = ['email_1', 'email_2', 'email_3'];\n      \n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any)\n        .mockResolvedValueOnce(mockEmail)\n        .mockRejectedValueOnce(new Error('Processing error'))\n        .mockResolvedValueOnce(mockEmail);\n\n      const results = await emailProcessor.processBulkEmails(messageIds, 'org_456');\n\n      expect(results).toHaveLength(3);\n      expect(results[0].processed).toBe(true);\n      expect(results[1].processed).toBe(false);\n      expect(results[2].processed).toBe(true);\n    });\n\n    it('should respect concurrency limit', async () => {\n      const messageIds = Array.from({ length: 10 }, (_, i) => `email_${i}`);\n      \n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(mockEmail);\n\n      const startTime = Date.now();\n      const results = await emailProcessor.processBulkEmails(messageIds, 'org_456');\n      const endTime = Date.now();\n\n      expect(results).toHaveLength(10);\n      // Should take some time due to concurrency limit of 5\n      expect(endTime - startTime).toBeGreaterThan(100);\n    });\n  });\n\n  describe('email categorization logic', () => {\n    it('should categorize spam emails correctly', async () => {\n      const spamEmail = {\n        ...mockEmail,\n        subject: 'Unsubscribe from our newsletter',\n        body: {\n          content: 'Click here to unsubscribe from our marketing emails.',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(spamEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.category).toBe('spam');\n      expect(result.action).toBe('archive');\n      expect(result.confidence).toBe(0.95);\n    });\n\n    it('should handle urgent emails', async () => {\n      const urgentEmail = {\n        ...mockEmail,\n        subject: 'URGENT: Action required',\n        importance: 'high' as const\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(urgentEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.category).toBe('urgent');\n      expect(result.metadata.urgency).toBe('high');\n      expect(result.action).toBe('categorize');\n    });\n\n    it('should default to general category for unknown emails', async () => {\n      const generalEmail = {\n        ...mockEmail,\n        subject: 'Random email',\n        body: {\n          content: 'This is just a random email with no specific category.',\n          contentType: 'text'\n        }\n      };\n\n      const { GraphService } = await import('../services/graph-service.js');\n      const mockGraphService = new GraphService();\n      (mockGraphService.getEmail as any).mockResolvedValue(generalEmail);\n\n      const result = await emailProcessor.processEmail('email_123', 'org_456');\n\n      expect(result.metadata.category).toBe('general');\n      expect(result.action).toBe('none');\n      expect(result.confidence).toBe(0.5);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/src/__tests__/integration.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":111,"column":41,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeAll, afterAll, beforeEach } from 'vitest';\nimport request from 'supertest';\nimport express from 'express';\n\n// Mock the entire workers app\nvi.mock('../index.js', () => ({\n  default: express()\n    .get('/health', (req, res) => {\n      res.json({\n        success: true,\n        data: {\n          status: 'healthy',\n          service: 'workers',\n          version: '1.0.0',\n          uptime: 100,\n          redis: 'connected',\n          jobQueue: {\n            total: 0,\n            pending: 0,\n            processing: 0,\n            completed: 0,\n            failed: 0\n          },\n          features: ['outlook-integration', 'graph-subscriptions', 'job-processing']\n        }\n      });\n    })\n    .get('/metrics', (req, res) => {\n      res.set('Content-Type', 'text/plain');\n      res.send('# HELP econeura_http_requests_total Total number of HTTP requests\\n# TYPE econeura_http_requests_total counter\\neconeura_http_requests_total{method=\"GET\",route=\"/health\",status_code=\"200\"} 1\\n');\n    })\n    .get('/cron/jobs', (req, res) => {\n      res.json({\n        success: true,\n        data: {\n          jobs: [\n            {\n              id: 'email_processing',\n              name: 'Email Processing',\n              schedule: '*/5 * * * *',\n              enabled: true,\n              runCount: 10,\n              errorCount: 0\n            },\n            {\n              id: 'graph_sync',\n              name: 'Microsoft Graph Sync',\n              schedule: '*/15 * * * *',\n              enabled: true,\n              runCount: 5,\n              errorCount: 1\n            }\n          ]\n        }\n      });\n    })\n    .get('/cron/stats', (req, res) => {\n      res.json({\n        success: true,\n        data: {\n          stats: {\n            total: 6,\n            enabled: 6,\n            disabled: 0,\n            totalRuns: 50,\n            totalErrors: 2\n          }\n        }\n      });\n    })\n    .post('/emails/process', (req, res) => {\n      const { messageId, organizationId } = req.body;\n      \n      if (!messageId || !organizationId) {\n        return res.status(400).json({\n          success: false,\n          error: 'messageId and organizationId are required'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: {\n          result: {\n            messageId,\n            processed: true,\n            action: 'categorize',\n            confidence: 0.9,\n            metadata: {\n              category: 'finance',\n              sentiment: 'neutral',\n              urgency: 'high',\n              language: 'es',\n              entities: ['€1,500.00']\n            },\n            processingTime: 150\n          }\n        }\n      });\n    })\n    .post('/emails/process/bulk', (req, res) => {\n      const { messageIds, organizationId } = req.body;\n      \n      if (!messageIds || !Array.isArray(messageIds) || !organizationId) {\n        return res.status(400).json({\n          success: false,\n          error: 'messageIds array and organizationId are required'\n        });\n      }\n\n      const results = messageIds.map((id: string) => ({\n        messageId: id,\n        processed: true,\n        action: 'categorize',\n        confidence: 0.8,\n        metadata: {\n          category: 'general',\n          sentiment: 'neutral',\n          urgency: 'low'\n        },\n        processingTime: 100\n      }));\n\n      res.json({\n        success: true,\n        data: { results }\n      });\n    })\n    .post('/cron/jobs/:jobId/enable', (req, res) => {\n      const { jobId } = req.params;\n      res.json({\n        success: true,\n        data: { message: 'Cron job enabled' }\n      });\n    })\n    .post('/cron/jobs/:jobId/disable', (req, res) => {\n      const { jobId } = req.params;\n      res.json({\n        success: true,\n        data: { message: 'Cron job disabled' }\n      });\n    })\n}));\n\ndescribe('Workers API Integration Tests', () => {\n  let app: express.Application;\n\n  beforeAll(async () => {\n    const { default: workersApp } = await import('../index.js');\n    app = workersApp;\n  });\n\n  describe('Health Endpoints', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          status: 'healthy',\n          service: 'workers',\n          version: '1.0.0',\n          features: expect.arrayContaining([\n            'outlook-integration',\n            'graph-subscriptions',\n            'job-processing'\n          ])\n        }\n      });\n    });\n\n    it('should return Prometheus metrics', async () => {\n      const response = await request(app)\n        .get('/metrics')\n        .expect(200);\n\n      expect(response.headers['content-type']).toContain('text/plain');\n      expect(response.text).toContain('econeura_http_requests_total');\n    });\n  });\n\n  describe('Cron Job Management', () => {\n    it('should list all cron jobs', async () => {\n      const response = await request(app)\n        .get('/cron/jobs')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          jobs: expect.arrayContaining([\n            expect.objectContaining({\n              id: 'email_processing',\n              name: 'Email Processing',\n              schedule: '*/5 * * * *',\n              enabled: true\n            })\n          ])\n        }\n      });\n    });\n\n    it('should return cron job statistics', async () => {\n      const response = await request(app)\n        .get('/cron/stats')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          stats: {\n            total: 6,\n            enabled: 6,\n            disabled: 0,\n            totalRuns: expect.any(Number),\n            totalErrors: expect.any(Number)\n          }\n        }\n      });\n    });\n\n    it('should enable a cron job', async () => {\n      const response = await request(app)\n        .post('/cron/jobs/email_processing/enable')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: { message: 'Cron job enabled' }\n      });\n    });\n\n    it('should disable a cron job', async () => {\n      const response = await request(app)\n        .post('/cron/jobs/email_processing/disable')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: { message: 'Cron job disabled' }\n      });\n    });\n  });\n\n  describe('Email Processing', () => {\n    it('should process a single email', async () => {\n      const emailData = {\n        messageId: 'email_123',\n        organizationId: 'org_456'\n      };\n\n      const response = await request(app)\n        .post('/emails/process')\n        .send(emailData)\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          result: {\n            messageId: 'email_123',\n            processed: true,\n            action: 'categorize',\n            confidence: 0.9,\n            metadata: {\n              category: 'finance',\n              sentiment: 'neutral',\n              urgency: 'high',\n              language: 'es'\n            },\n            processingTime: expect.any(Number)\n          }\n        }\n      });\n    });\n\n    it('should reject email processing without required fields', async () => {\n      const response = await request(app)\n        .post('/emails/process')\n        .send({ messageId: 'email_123' }) // Missing organizationId\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: 'messageId and organizationId are required'\n      });\n    });\n\n    it('should process multiple emails in bulk', async () => {\n      const bulkData = {\n        messageIds: ['email_1', 'email_2', 'email_3'],\n        organizationId: 'org_456'\n      };\n\n      const response = await request(app)\n        .post('/emails/process/bulk')\n        .send(bulkData)\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          results: expect.arrayContaining([\n            expect.objectContaining({\n              messageId: 'email_1',\n              processed: true,\n              action: 'categorize'\n            }),\n            expect.objectContaining({\n              messageId: 'email_2',\n              processed: true,\n              action: 'categorize'\n            }),\n            expect.objectContaining({\n              messageId: 'email_3',\n              processed: true,\n              action: 'categorize'\n            })\n          ])\n        }\n      });\n    });\n\n    it('should reject bulk processing without required fields', async () => {\n      const response = await request(app)\n        .post('/emails/process/bulk')\n        .send({ messageIds: ['email_1'] }) // Missing organizationId\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: 'messageIds array and organizationId are required'\n      });\n    });\n\n    it('should reject bulk processing with invalid messageIds', async () => {\n      const response = await request(app)\n        .post('/emails/process/bulk')\n        .send({ \n          messageIds: 'not_an_array', // Should be array\n          organizationId: 'org_456'\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: 'messageIds array and organizationId are required'\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle 404 for unknown endpoints', async () => {\n      const response = await request(app)\n        .get('/unknown/endpoint')\n        .expect(404);\n    });\n\n    it('should handle malformed JSON', async () => {\n      const response = await request(app)\n        .post('/emails/process')\n        .set('Content-Type', 'application/json')\n        .send('invalid json')\n        .expect(400);\n    });\n  });\n\n  describe('Response Format Consistency', () => {\n    it('should return consistent response format for all endpoints', async () => {\n      const endpoints = [\n        { method: 'get', path: '/health' },\n        { method: 'get', path: '/cron/jobs' },\n        { method: 'get', path: '/cron/stats' }\n      ];\n\n      for (const endpoint of endpoints) {\n        const response = await request(app)[endpoint.method](endpoint.path);\n        \n        expect(response.body).toHaveProperty('success');\n        expect(response.body).toHaveProperty('data');\n        expect(response.body).toHaveProperty('timestamp');\n        expect(typeof response.body.success).toBe('boolean');\n      }\n    });\n\n    it('should return error format for failed requests', async () => {\n      const response = await request(app)\n        .post('/emails/process')\n        .send({}) // Missing required fields\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body).toHaveProperty('error');\n      expect(response.body).toHaveProperty('timestamp');\n    });\n  });\n\n  describe('Performance', () => {\n    it('should respond to health check within acceptable time', async () => {\n      const startTime = Date.now();\n      \n      await request(app)\n        .get('/health')\n        .expect(200);\n      \n      const responseTime = Date.now() - startTime;\n      expect(responseTime).toBeLessThan(1000); // Should respond within 1 second\n    });\n\n    it('should handle concurrent requests', async () => {\n      const requests = Array.from({ length: 10 }, () =>\n        request(app).get('/health')\n      );\n\n      const responses = await Promise.all(requests);\n      \n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.body.success).toBe(true);\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/src/__tests__/job-queue.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":43,"column":15,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { JobQueue, Job } from '../queues/job-queue.js';\n\n// Mock Redis\nconst mockRedis = {\n  hset: vi.fn(),\n  hgetall: vi.fn(),\n  zadd: vi.fn(),\n  zpopmax: vi.fn(),\n  del: vi.fn(),\n  keys: vi.fn()\n};\n\nvi.mock('ioredis', () => ({\n  default: vi.fn().mockImplementation(() => mockRedis)\n}));\n\nvi.mock('../utils/logger.js', () => ({\n  logger: {\n    info: vi.fn(),\n    error: vi.fn(),\n    warn: vi.fn()\n  }\n}));\n\nvi.mock('../utils/metrics.js', () => ({\n  prometheusMetrics: {\n    counter: vi.fn().mockReturnValue({\n      inc: vi.fn()\n    }),\n    histogram: vi.fn().mockReturnValue({\n      observe: vi.fn()\n    }),\n    gauge: vi.fn().mockReturnValue({\n      inc: vi.fn(),\n      dec: vi.fn(),\n      set: vi.fn()\n    })\n  }\n}));\n\ndescribe('JobQueue', () => {\n  let jobQueue: JobQueue;\n\n  beforeEach(() => {\n    jobQueue = new JobQueue();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('enqueue', () => {\n    it('should enqueue a job successfully', async () => {\n      const jobData = {\n        type: 'email_processing' as const,\n        payload: { messageId: 'email_123' },\n        organizationId: 'org_456',\n        priority: 'high' as const,\n        maxRetries: 3\n      };\n\n      mockRedis.hset.mockResolvedValue(1);\n      mockRedis.zadd.mockResolvedValue(1);\n\n      const jobId = await jobQueue.enqueue(jobData);\n\n      expect(jobId).toMatch(/^job_\\d+_[a-z0-9]+$/);\n      expect(mockRedis.hset).toHaveBeenCalledWith(\n        `job:${jobId}`,\n        expect.objectContaining({\n          id: jobId,\n          type: 'email_processing',\n          status: 'pending',\n          priority: 'high',\n          organizationId: 'org_456'\n        })\n      );\n      expect(mockRedis.zadd).toHaveBeenCalledWith(\n        'queue:email_processing',\n        800, // high priority score\n        jobId\n      );\n    });\n\n    it('should handle enqueue errors', async () => {\n      const jobData = {\n        type: 'email_processing' as const,\n        payload: { messageId: 'email_123' },\n        organizationId: 'org_456',\n        priority: 'high' as const,\n        maxRetries: 3\n      };\n\n      mockRedis.hset.mockRejectedValue(new Error('Redis error'));\n\n      await expect(jobQueue.enqueue(jobData)).rejects.toThrow('Redis error');\n    });\n  });\n\n  describe('dequeue', () => {\n    it('should dequeue a job successfully', async () => {\n      const jobId = 'job_123';\n      const jobData = {\n        id: jobId,\n        type: 'email_processing',\n        payload: JSON.stringify({ messageId: 'email_123' }),\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'pending',\n        createdAt: '2024-01-15T10:00:00Z',\n        retryCount: '0',\n        maxRetries: '3'\n      };\n\n      mockRedis.zpopmax.mockResolvedValue([jobId]);\n      mockRedis.hgetall.mockResolvedValue(jobData);\n      mockRedis.hset.mockResolvedValue(1);\n\n      const job = await jobQueue.dequeue('email_processing');\n\n      expect(job).toMatchObject({\n        id: jobId,\n        type: 'email_processing',\n        payload: { messageId: 'email_123' },\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'processing'\n      });\n      expect(mockRedis.hset).toHaveBeenCalledWith(\n        `job:${jobId}`,\n        {\n          status: 'processing',\n          startedAt: expect.any(String)\n        }\n      );\n    });\n\n    it('should return null when no jobs available', async () => {\n      mockRedis.zpopmax.mockResolvedValue([]);\n\n      const job = await jobQueue.dequeue('email_processing');\n\n      expect(job).toBeNull();\n    });\n\n    it('should return null when job data not found', async () => {\n      const jobId = 'job_123';\n      mockRedis.zpopmax.mockResolvedValue([jobId]);\n      mockRedis.hgetall.mockResolvedValue({});\n\n      const job = await jobQueue.dequeue('email_processing');\n\n      expect(job).toBeNull();\n    });\n  });\n\n  describe('completeJob', () => {\n    it('should complete a job successfully', async () => {\n      const jobId = 'job_123';\n      const jobData = {\n        id: jobId,\n        type: 'email_processing',\n        payload: JSON.stringify({ messageId: 'email_123' }),\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'processing',\n        createdAt: '2024-01-15T10:00:00Z',\n        startedAt: '2024-01-15T10:01:00Z',\n        retryCount: '0',\n        maxRetries: '3'\n      };\n\n      mockRedis.hgetall.mockResolvedValue(jobData);\n      mockRedis.hset.mockResolvedValue(1);\n\n      await jobQueue.completeJob(jobId, { result: 'success' });\n\n      expect(mockRedis.hset).toHaveBeenCalledWith(\n        `job:${jobId}`,\n        {\n          status: 'completed',\n          completedAt: expect.any(String),\n          result: JSON.stringify({ result: 'success' })\n        }\n      );\n    });\n\n    it('should throw error when job not found', async () => {\n      const jobId = 'job_123';\n      mockRedis.hgetall.mockResolvedValue({});\n\n      await expect(jobQueue.completeJob(jobId)).rejects.toThrow('Job job_123 not found');\n    });\n  });\n\n  describe('failJob', () => {\n    it('should retry job when retry count is below max', async () => {\n      const jobId = 'job_123';\n      const jobData = {\n        id: jobId,\n        type: 'email_processing',\n        payload: JSON.stringify({ messageId: 'email_123' }),\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'processing',\n        createdAt: '2024-01-15T10:00:00Z',\n        startedAt: '2024-01-15T10:01:00Z',\n        retryCount: '1',\n        maxRetries: '3'\n      };\n\n      mockRedis.hgetall.mockResolvedValue(jobData);\n      mockRedis.hset.mockResolvedValue(1);\n      mockRedis.zadd.mockResolvedValue(1);\n\n      await jobQueue.failJob(jobId, 'Processing error');\n\n      expect(mockRedis.hset).toHaveBeenCalledWith(\n        `job:${jobId}`,\n        {\n          status: 'retrying',\n          retryCount: 2,\n          error: 'Processing error'\n        }\n      );\n      expect(mockRedis.zadd).toHaveBeenCalledWith(\n        'queue:email_processing',\n        1800, // high priority + 1000 for retry\n        jobId\n      );\n    });\n\n    it('should mark job as failed when max retries exceeded', async () => {\n      const jobId = 'job_123';\n      const jobData = {\n        id: jobId,\n        type: 'email_processing',\n        payload: JSON.stringify({ messageId: 'email_123' }),\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'processing',\n        createdAt: '2024-01-15T10:00:00Z',\n        startedAt: '2024-01-15T10:01:00Z',\n        retryCount: '3',\n        maxRetries: '3'\n      };\n\n      mockRedis.hgetall.mockResolvedValue(jobData);\n      mockRedis.hset.mockResolvedValue(1);\n\n      await jobQueue.failJob(jobId, 'Final error');\n\n      expect(mockRedis.hset).toHaveBeenCalledWith(\n        `job:${jobId}`,\n        {\n          status: 'failed',\n          completedAt: expect.any(String),\n          error: 'Final error'\n        }\n      );\n    });\n  });\n\n  describe('getJob', () => {\n    it('should get job successfully', async () => {\n      const jobId = 'job_123';\n      const jobData = {\n        id: jobId,\n        type: 'email_processing',\n        payload: JSON.stringify({ messageId: 'email_123' }),\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'pending',\n        createdAt: '2024-01-15T10:00:00Z',\n        retryCount: '0',\n        maxRetries: '3'\n      };\n\n      mockRedis.hgetall.mockResolvedValue(jobData);\n\n      const job = await jobQueue.getJob(jobId);\n\n      expect(job).toMatchObject({\n        id: jobId,\n        type: 'email_processing',\n        payload: { messageId: 'email_123' },\n        organizationId: 'org_456',\n        priority: 'high',\n        status: 'pending'\n      });\n    });\n\n    it('should return null when job not found', async () => {\n      const jobId = 'job_123';\n      mockRedis.hgetall.mockResolvedValue({});\n\n      const job = await jobQueue.getJob(jobId);\n\n      expect(job).toBeNull();\n    });\n  });\n\n  describe('getStats', () => {\n    it('should return job statistics', async () => {\n      const jobKeys = ['job:job_1', 'job:job_2', 'job:job_3'];\n      const jobData1 = {\n        id: 'job_1',\n        type: 'email_processing',\n        status: 'pending',\n        priority: 'high'\n      };\n      const jobData2 = {\n        id: 'job_2',\n        type: 'email_processing',\n        status: 'processing',\n        priority: 'normal'\n      };\n      const jobData3 = {\n        id: 'job_3',\n        type: 'graph_sync',\n        status: 'completed',\n        priority: 'low'\n      };\n\n      mockRedis.keys.mockResolvedValue(jobKeys);\n      mockRedis.hgetall\n        .mockResolvedValueOnce(jobData1)\n        .mockResolvedValueOnce(jobData2)\n        .mockResolvedValueOnce(jobData3);\n\n      const stats = await jobQueue.getStats();\n\n      expect(stats).toMatchObject({\n        total: 3,\n        pending: 1,\n        processing: 1,\n        completed: 1,\n        failed: 0,\n        retrying: 0,\n        byType: {\n          'email_processing': 2,\n          'graph_sync': 1\n        },\n        byPriority: {\n          'high': 1,\n          'normal': 1,\n          'low': 1\n        }\n      });\n    });\n  });\n\n  describe('clearCompletedJobs', () => {\n    it('should clear old completed jobs', async () => {\n      const jobKeys = ['job:job_1', 'job:job_2'];\n      const oldJobData = {\n        id: 'job_1',\n        status: 'completed',\n        completedAt: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString() // 25 hours ago\n      };\n      const recentJobData = {\n        id: 'job_2',\n        status: 'completed',\n        completedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString() // 12 hours ago\n      };\n\n      mockRedis.keys.mockResolvedValue(jobKeys);\n      mockRedis.hgetall\n        .mockResolvedValueOnce(oldJobData)\n        .mockResolvedValueOnce(recentJobData);\n      mockRedis.del.mockResolvedValue(1);\n\n      const clearedCount = await jobQueue.clearCompletedJobs(24);\n\n      expect(clearedCount).toBe(1);\n      expect(mockRedis.del).toHaveBeenCalledWith('job:job_1');\n      expect(mockRedis.del).not.toHaveBeenCalledWith('job:job_2');\n    });\n  });\n\n  describe('priority scoring', () => {\n    it('should assign correct priority scores', async () => {\n      const testCases = [\n        { priority: 'urgent' as const, expectedScore: 1000 },\n        { priority: 'high' as const, expectedScore: 800 },\n        { priority: 'normal' as const, expectedScore: 500 },\n        { priority: 'low' as const, expectedScore: 200 }\n      ];\n\n      for (const testCase of testCases) {\n        const jobData = {\n          type: 'email_processing' as const,\n          payload: { messageId: 'email_123' },\n          organizationId: 'org_456',\n          priority: testCase.priority,\n          maxRetries: 3\n        };\n\n        mockRedis.hset.mockResolvedValue(1);\n        mockRedis.zadd.mockResolvedValue(1);\n\n        await jobQueue.enqueue(jobData);\n\n        expect(mockRedis.zadd).toHaveBeenCalledWith(\n          'queue:email_processing',\n          testCase.expectedScore,\n          expect.any(String)\n        );\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/tests/load-test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":24,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":83,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":83,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":84,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":110,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":110,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":111,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":111,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":112,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":112,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":114,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":32}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate, Trend } from 'k6/metrics';\n\n// Custom metrics\nconst errorRate = new Rate('errors');\nconst responseTime = new Trend('response_time');\n\nexport const options = {\n  stages: [\n    { duration: '2m', target: 10 }, // Ramp up to 10 users\n    { duration: '5m', target: 10 }, // Stay at 10 users\n    { duration: '2m', target: 20 }, // Ramp up to 20 users\n    { duration: '5m', target: 20 }, // Stay at 20 users\n    { duration: '2m', target: 0 },  // Ramp down to 0 users\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)<2000'], // 95% of requests must complete below 2s\n    http_req_failed: ['rate<0.1'],     // Error rate must be below 10%\n    errors: ['rate<0.1'],              // Custom error rate below 10%\n  },\n};\n\nconst BASE_URL = __ENV.BASE_URL || 'http://localhost:3001';\n\nexport default function () {\n  // Test health endpoint\n  const healthResponse = http.get(`${BASE_URL}/health`);\n  check(healthResponse, {\n    'health check status is 200': (r) => r.status === 200,\n    'health check response time < 500ms': (r) => r.timings.duration < 500,\n    'health check has success field': (r) => JSON.parse(r.body).success === true,\n  });\n  errorRate.add(healthResponse.status !== 200);\n  responseTime.add(healthResponse.timings.duration);\n\n  sleep(1);\n\n  // Test metrics endpoint\n  const metricsResponse = http.get(`${BASE_URL}/metrics`);\n  check(metricsResponse, {\n    'metrics status is 200': (r) => r.status === 200,\n    'metrics response time < 1000ms': (r) => r.timings.duration < 1000,\n    'metrics content type is text/plain': (r) => r.headers['Content-Type'].includes('text/plain'),\n  });\n  errorRate.add(metricsResponse.status !== 200);\n  responseTime.add(metricsResponse.timings.duration);\n\n  sleep(1);\n\n  // Test cron jobs endpoint\n  const cronJobsResponse = http.get(`${BASE_URL}/cron/jobs`);\n  check(cronJobsResponse, {\n    'cron jobs status is 200': (r) => r.status === 200,\n    'cron jobs response time < 1000ms': (r) => r.timings.duration < 1000,\n    'cron jobs has jobs array': (r) => {\n      const body = JSON.parse(r.body);\n      return body.success && Array.isArray(body.data.jobs);\n    },\n  });\n  errorRate.add(cronJobsResponse.status !== 200);\n  responseTime.add(cronJobsResponse.timings.duration);\n\n  sleep(1);\n\n  // Test cron stats endpoint\n  const cronStatsResponse = http.get(`${BASE_URL}/cron/stats`);\n  check(cronStatsResponse, {\n    'cron stats status is 200': (r) => r.status === 200,\n    'cron stats response time < 1000ms': (r) => r.timings.duration < 1000,\n    'cron stats has stats object': (r) => {\n      const body = JSON.parse(r.body);\n      return body.success && typeof body.data.stats === 'object';\n    },\n  });\n  errorRate.add(cronStatsResponse.status !== 200);\n  responseTime.add(cronStatsResponse.timings.duration);\n\n  sleep(1);\n\n  // Test email processing endpoint\n  const emailData = {\n    messageId: `email_${__VU}_${__ITER}`,\n    organizationId: `org_${__VU}`\n  };\n\n  const emailResponse = http.post(\n    `${BASE_URL}/emails/process`,\n    JSON.stringify(emailData),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n  check(emailResponse, {\n    'email processing status is 200': (r) => r.status === 200,\n    'email processing response time < 2000ms': (r) => r.timings.duration < 2000,\n    'email processing has result': (r) => {\n      const body = JSON.parse(r.body);\n      return body.success && body.data.result;\n    },\n  });\n  errorRate.add(emailResponse.status !== 200);\n  responseTime.add(emailResponse.timings.duration);\n\n  sleep(2);\n\n  // Test bulk email processing endpoint\n  const bulkEmailData = {\n    messageIds: [\n      `bulk_email_${__VU}_${__ITER}_1`,\n      `bulk_email_${__VU}_${__ITER}_2`,\n      `bulk_email_${__VU}_${__ITER}_3`\n    ],\n    organizationId: `org_${__VU}`\n  };\n\n  const bulkEmailResponse = http.post(\n    `${BASE_URL}/emails/process/bulk`,\n    JSON.stringify(bulkEmailData),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n  check(bulkEmailResponse, {\n    'bulk email processing status is 200': (r) => r.status === 200,\n    'bulk email processing response time < 3000ms': (r) => r.timings.duration < 3000,\n    'bulk email processing has results array': (r) => {\n      const body = JSON.parse(r.body);\n      return body.success && Array.isArray(body.data.results);\n    },\n  });\n  errorRate.add(bulkEmailResponse.status !== 200);\n  responseTime.add(bulkEmailResponse.timings.duration);\n\n  sleep(2);\n}\n\nexport function handleSummary(data) {\n  return {\n    'load-test-results.json': JSON.stringify(data, null, 2),\n    stdout: `\nLoad Test Results:\n==================\nTotal Requests: ${data.metrics.http_reqs.values.count}\nFailed Requests: ${data.metrics.http_req_failed.values.count}\nError Rate: ${(data.metrics.http_req_failed.values.rate * 100).toFixed(2)}%\nAverage Response Time: ${data.metrics.http_req_duration.values.avg.toFixed(2)}ms\n95th Percentile: ${data.metrics.http_req_duration.values['p(95)'].toFixed(2)}ms\nMax Response Time: ${data.metrics.http_req_duration.values.max.toFixed(2)}ms\n\nThresholds:\n- 95th percentile < 2000ms: ${data.metrics.http_req_duration.values['p(95)'] < 2000 ? 'PASS' : 'FAIL'}\n- Error rate < 10%: ${data.metrics.http_req_failed.values.rate < 0.1 ? 'PASS' : 'FAIL'}\n\nTest Duration: ${data.state.testRunDurationMs / 1000}s\n    `,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/apps/workers/tests/stress-test.js","messages":[{"ruleId":"sort-imports","severity":2,"message":"Member 'Counter' of the import declaration should be sorted alphabetically.","line":3,"column":23,"nodeType":"ImportSpecifier","messageId":"sortMembersAlphabetically","endLine":3,"endColumn":30,"fix":{"range":[72,92],"text":"Counter, Rate, Trend"}},{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":31,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":47,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":47,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":48,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":76,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":76,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":78,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":78,"endColumn":39}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate, Trend, Counter } from 'k6/metrics';\n\n// Custom metrics\nconst errorRate = new Rate('errors');\nconst responseTime = new Trend('response_time');\nconst emailProcessed = new Counter('emails_processed');\nconst bulkEmailsProcessed = new Counter('bulk_emails_processed');\n\nexport const options = {\n  stages: [\n    { duration: '1m', target: 5 },   // Ramp up to 5 users\n    { duration: '2m', target: 5 },   // Stay at 5 users\n    { duration: '1m', target: 15 },  // Ramp up to 15 users\n    { duration: '3m', target: 15 },  // Stay at 15 users\n    { duration: '1m', target: 30 },  // Ramp up to 30 users\n    { duration: '3m', target: 30 },  // Stay at 30 users\n    { duration: '1m', target: 50 },  // Ramp up to 50 users\n    { duration: '2m', target: 50 },  // Stay at 50 users\n    { duration: '2m', target: 0 },   // Ramp down to 0 users\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)<5000'], // 95% of requests must complete below 5s\n    http_req_failed: ['rate<0.2'],     // Error rate must be below 20%\n    errors: ['rate<0.2'],              // Custom error rate below 20%\n    emails_processed: ['count>100'],   // Process at least 100 emails\n  },\n};\n\nconst BASE_URL = __ENV.BASE_URL || 'http://localhost:3001';\n\nexport default function () {\n  // Stress test health endpoint\n  const healthResponse = http.get(`${BASE_URL}/health`);\n  check(healthResponse, {\n    'health check status is 200': (r) => r.status === 200,\n    'health check response time < 1000ms': (r) => r.timings.duration < 1000,\n  });\n  errorRate.add(healthResponse.status !== 200);\n  responseTime.add(healthResponse.timings.duration);\n\n  sleep(0.5);\n\n  // Stress test email processing with high concurrency\n  const emailData = {\n    messageId: `stress_email_${__VU}_${__ITER}_${Date.now()}`,\n    organizationId: `stress_org_${__VU % 10}` // Limit to 10 orgs to simulate realistic load\n  };\n\n  const emailResponse = http.post(\n    `${BASE_URL}/emails/process`,\n    JSON.stringify(emailData),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n  \n  const emailSuccess = check(emailResponse, {\n    'email processing status is 200': (r) => r.status === 200,\n    'email processing response time < 3000ms': (r) => r.timings.duration < 3000,\n  });\n  \n  if (emailSuccess) {\n    emailProcessed.add(1);\n  }\n  \n  errorRate.add(emailResponse.status !== 200);\n  responseTime.add(emailResponse.timings.duration);\n\n  sleep(0.3);\n\n  // Stress test bulk email processing\n  const bulkEmailData = {\n    messageIds: Array.from({ length: 5 }, (_, i) => \n      `stress_bulk_${__VU}_${__ITER}_${i}_${Date.now()}`\n    ),\n    organizationId: `stress_org_${__VU % 10}`\n  };\n\n  const bulkEmailResponse = http.post(\n    `${BASE_URL}/emails/process/bulk`,\n    JSON.stringify(bulkEmailData),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n  \n  const bulkSuccess = check(bulkEmailResponse, {\n    'bulk email processing status is 200': (r) => r.status === 200,\n    'bulk email processing response time < 5000ms': (r) => r.timings.duration < 5000,\n  });\n  \n  if (bulkSuccess) {\n    bulkEmailsProcessed.add(bulkEmailData.messageIds.length);\n  }\n  \n  errorRate.add(bulkEmailResponse.status !== 200);\n  responseTime.add(bulkEmailResponse.timings.duration);\n\n  sleep(0.2);\n\n  // Stress test cron endpoints\n  const cronJobsResponse = http.get(`${BASE_URL}/cron/jobs`);\n  check(cronJobsResponse, {\n    'cron jobs status is 200': (r) => r.status === 200,\n    'cron jobs response time < 2000ms': (r) => r.timings.duration < 2000,\n  });\n  errorRate.add(cronJobsResponse.status !== 200);\n  responseTime.add(cronJobsResponse.timings.duration);\n\n  sleep(0.1);\n\n  // Stress test cron stats\n  const cronStatsResponse = http.get(`${BASE_URL}/cron/stats`);\n  check(cronStatsResponse, {\n    'cron stats status is 200': (r) => r.status === 200,\n    'cron stats response time < 2000ms': (r) => r.timings.duration < 2000,\n  });\n  errorRate.add(cronStatsResponse.status !== 200);\n  responseTime.add(cronStatsResponse.timings.duration);\n\n  sleep(0.1);\n\n  // Stress test metrics endpoint\n  const metricsResponse = http.get(`${BASE_URL}/metrics`);\n  check(metricsResponse, {\n    'metrics status is 200': (r) => r.status === 200,\n    'metrics response time < 2000ms': (r) => r.timings.duration < 2000,\n  });\n  errorRate.add(metricsResponse.status !== 200);\n  responseTime.add(metricsResponse.timings.duration);\n\n  sleep(0.1);\n}\n\nexport function handleSummary(data) {\n  const totalEmails = data.metrics.emails_processed ? data.metrics.emails_processed.values.count : 0;\n  const totalBulkEmails = data.metrics.bulk_emails_processed ? data.metrics.bulk_emails_processed.values.count : 0;\n  const totalEmailOperations = totalEmails + totalBulkEmails;\n\n  return {\n    'stress-test-results.json': JSON.stringify(data, null, 2),\n    stdout: `\nStress Test Results:\n====================\nTest Duration: ${(data.state.testRunDurationMs / 1000).toFixed(2)}s\nMax VUs: ${data.state.maxVUs}\n\nPerformance Metrics:\n- Total Requests: ${data.metrics.http_reqs.values.count}\n- Failed Requests: ${data.metrics.http_req_failed.values.count}\n- Error Rate: ${(data.metrics.http_req_failed.values.rate * 100).toFixed(2)}%\n- Average Response Time: ${data.metrics.http_req_duration.values.avg.toFixed(2)}ms\n- 95th Percentile: ${data.metrics.http_req_duration.values['p(95)'].toFixed(2)}ms\n- Max Response Time: ${data.metrics.http_req_duration.values.max.toFixed(2)}ms\n\nEmail Processing:\n- Individual Emails Processed: ${totalEmails}\n- Bulk Emails Processed: ${totalBulkEmails}\n- Total Email Operations: ${totalEmailOperations}\n- Emails per Second: ${(totalEmailOperations / (data.state.testRunDurationMs / 1000)).toFixed(2)}\n\nThresholds:\n- 95th percentile < 5000ms: ${data.metrics.http_req_duration.values['p(95)'] < 5000 ? 'PASS' : 'FAIL'}\n- Error rate < 20%: ${data.metrics.http_req_failed.values.rate < 0.2 ? 'PASS' : 'FAIL'}\n- Emails processed > 100: ${totalEmailOperations > 100 ? 'PASS' : 'FAIL'}\n\nSystem Health:\n- Memory Usage: ${data.metrics.vus_max.values.max} max VUs\n- Request Rate: ${(data.metrics.http_reqs.values.count / (data.state.testRunDurationMs / 1000)).toFixed(2)} req/s\n    `,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]},{"ruleId":"wrap-regex","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/e2e/k6/smoke-chaos.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":5,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":6,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":13,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":24,"column":64,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":68}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from 'k6/http';\nimport { check, sleep } from 'k6';\n\nexport const options = {\n  vus: Number(__ENV.VUS || 10),\n  duration: __ENV.DURATION || '30s',\n  thresholds: {\n    http_req_failed: ['rate<0.2'], // tolerate some failures under chaos\n    http_req_duration: ['p(95)<800'],\n  },\n};\n\nconst BASE_URL = __ENV.BASE_URL || 'http://localhost:4000';\n\nexport default function () {\n  const endpoints = [\n    '/health',\n    '/v1/demo/health',\n    '/v1/observability/metrics',\n    '/v1/gateway/stats',\n  ];\n\n  const url = `${BASE_URL}${endpoints[Math.floor(Math.random() * endpoints.length)]}`;\n  const res = http.get(url, { headers: { 'x-request-id': `k6_${__VU}_${Date.now()}` } });\n  check(res, {\n    'status is 2xx/3xx/4xx/5xx': (r) => [200,201,204,400,401,403,404,429,500,502,503,504].includes(r.status),\n  });\n  sleep(0.2);\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/econeura-cockpit/playwright.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/ai/cost-guardrails.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/ai/enhanced-router.js","messages":[{"ruleId":"prefer-const","severity":2,"message":"'headers' is never reassigned. Use 'const' instead.","line":327,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":327,"endColumn":20,"fix":{"range":[14074,14119],"text":"const headers = { ...provider.config.headers };"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { logger } from '../logging/index.js';\nimport { prometheus } from '../metrics/index.js';\nimport { redactPII } from '../security/index.js';\nimport { CostGuardrails } from './cost-guardrails.js';\nimport { LLMProviderManager } from './providers.js';\nexport class EnhancedAIRouter {\n    costGuardrails;\n    providerManager;\n    config;\n    activeRequests = new Map();\n    constructor(config = {}) {\n        this.config = {\n            costGuardrailsEnabled: true,\n            telemetryEnabled: true,\n            defaultMaxCostEUR: 1.0,\n            emergencyStopEnabled: true,\n            healthCheckInterval: 30000,\n            ...config,\n        };\n        this.costGuardrails = new CostGuardrails();\n        this.providerManager = new LLMProviderManager();\n        // Set up alert handlers\n        if (this.config.costGuardrailsEnabled) {\n            this.costGuardrails.onAlert((alert) => this.handleCostAlert(alert));\n        }\n        // Set up default cost limits for organizations\n        this.setupDefaultCostLimits();\n        logger.info('Enhanced AI Router initialized', {\n            cost_guardrails_enabled: this.config.costGuardrailsEnabled,\n            telemetry: this.config.telemetryEnabled,\n            emergency_stop: this.config.emergencyStopEnabled,\n        });\n    }\n    /**\n     * Routes AI request with enhanced decision making\n     */\n    async routeRequest(request) {\n        const startTime = Date.now();\n        const requestId = this.generateRequestId();\n        logger.info('Enhanced AI routing started', {\n            x_x_request_id: requestId,\n            org_id: request.org_id,\n            tokens_est: request.tokens_est,\n            priority: request.priority || 'medium',\n        });\n        try {\n            // Step 1: Find suitable providers\n            const suitableProviders = this.findSuitableProviders(request);\n            if (suitableProviders.length === 0) {\n                throw new Error('No suitable providers found for request requirements');\n            }\n            // Step 2: Cost validation\n            let selectedProvider = null;\n            let estimatedCost = 0;\n            let rateLimitOk = false;\n            for (const provider of suitableProviders) {\n                const model = this.selectBestModel(provider, request);\n                if (!model)\n                    continue;\n                // Estimate cost\n                estimatedCost = this.providerManager.estimateCost(provider.id, model.id, request.tokens_est || 1000, Math.floor((request.tokens_est || 1000) * 0.3), // Assume 30% output ratio\n                {\n                    images: request.content?.includes('image') ? 1 : 0,\n                    functionCalls: request.tools_needed.includes('function_calling') ? 1 : 0,\n                });\n                // Check cost guardrails\n                if (this.config.costGuardrailsEnabled) {\n                    const costValidation = await this.costGuardrails.validateRequest(request.org_id, estimatedCost, provider.id, model.id);\n                    if (!costValidation.allowed) {\n                        logger.warn('Request blocked by cost guardrails', {\n                            x_request_id: requestId,\n                            org_id: request.org_id,\n                            provider_id: provider.id,\n                            estimated_cost: estimatedCost,\n                            reason: costValidation.reason,\n                        });\n                        continue;\n                    }\n                }\n                // Check rate limits\n                const rateLimitCheck = this.providerManager.checkRateLimit(provider.id, request.tokens_est || 1000);\n                if (!rateLimitCheck.allowed) {\n                    logger.warn('Request blocked by rate limits', {\n                        x_request_id: requestId,\n                        org_id: request.org_id,\n                        provider_id: provider.id,\n                        reason: rateLimitCheck.reason,\n                    });\n                    continue;\n                }\n                // Provider selected!\n                selectedProvider = provider;\n                rateLimitOk = rateLimitCheck.allowed;\n                break;\n            }\n            if (!selectedProvider) {\n                throw new Error('All providers rejected the request due to cost or rate limits');\n            }\n            // Step 3: Build routing decision\n            const model = this.selectBestModel(selectedProvider, request);\n            const decision = this.buildRoutingDecision(selectedProvider, model, request, estimatedCost, rateLimitOk, suitableProviders.filter(p => p.id !== selectedProvider.id).map(p => p.id));\n            // Step 4: Track active request\n            this.activeRequests.set(requestId, {\n                providerId: selectedProvider.id,\n                startTime,\n            });\n            // Step 5: Update metrics\n            prometheus.aiRoutingDecisions.labels({\n                org_id: request.org_id,\n                provider: selectedProvider.id,\n                model: model.id,\n                routing_reason: decision.routingReason,\n            }).inc();\n            logger.info('AI routing decision completed', {\n                x_request_id: requestId,\n                org_id: request.org_id,\n                selected_provider: selectedProvider.id,\n                selected_model: model.id,\n                estimated_cost: estimatedCost,\n                routing_reason: decision.routingReason,\n                decision_time_ms: Date.now() - startTime,\n            });\n            return decision;\n        }\n        catch (error) {\n            logger.error('AI routing failed', error instanceof Error ? error : new Error(String(error)), {\n                x_request_id: requestId,\n                org_id: request.org_id,\n                decision_time_ms: Date.now() - startTime,\n            });\n            prometheus.aiRoutingErrors.labels({\n                org_id: request.org_id,\n                error_type: 'routing_failure',\n            }).inc();\n            throw error;\n        }\n    }\n    /**\n     * Records request completion and updates metrics\n     */\n    async recordRequestCompletion(requestId, success, actualCost, tokensInput, tokensOutput, errorType) {\n        const activeRequest = this.activeRequests.get(requestId);\n        if (!activeRequest) {\n            logger.warn('Request completion recorded for unknown request', { x_request_id: requestId });\n            return;\n        }\n        const latency = Date.now() - activeRequest.startTime;\n        const provider = this.providerManager.getProvider(activeRequest.providerId);\n        if (!provider) {\n            logger.error('Provider not found for completed request', undefined, {\n                x_request_id: requestId,\n                provider_id: activeRequest.providerId,\n            });\n            return;\n        }\n        // Record usage in cost guardrails\n        if (this.config.costGuardrailsEnabled) {\n            const usage = {\n                orgId: requestId.split('-')[0], // Extract org ID from request ID\n                provider: provider.id,\n                model: 'unknown', // TODO: Extract from request context\n                tokensInput,\n                tokensOutput,\n                costEUR: actualCost,\n                latencyMs: latency,\n                timestamp: new Date(),\n                success,\n                errorType,\n            };\n            this.costGuardrails.recordUsage(usage);\n        }\n        // Update Prometheus metrics\n        prometheus.aiRequestDuration.labels({\n            provider: provider.id,\n            status: success ? 'success' : 'error',\n        }).observe(latency / 1000);\n        if (!success && errorType) {\n            prometheus.aiErrorsTotal.labels({\n                org_id: requestId.split('-')[0],\n                provider: provider.id,\n                error_type: errorType,\n            }).inc();\n        }\n        // Clean up active request tracking\n        this.activeRequests.delete(requestId);\n        logger.info('Request completion recorded', {\n            x_request_id: requestId,\n            provider_id: provider.id,\n            success,\n            actual_cost: actualCost,\n            tokens_input: tokensInput,\n            tokens_output: tokensOutput,\n            latency_ms: latency,\n        });\n    }\n    /**\n     * Processes request content with redaction if needed\n     */\n    async processRequestContent(content, decision, request) {\n        if (decision.shouldRedact) {\n            const { redacted, tokens } = redactPII(content);\n            logger.info('PII redacted for cloud processing', {\n                org_id: request.org_id,\n                provider: decision.provider.id,\n                redaction_tokens: Object.keys(tokens).length,\n            });\n            return { processedContent: redacted, redactionTokens: tokens };\n        }\n        return { processedContent: content };\n    }\n    /**\n     * Gets current usage and cost information for an organization\n     */\n    getOrganizationUsage(orgId) {\n        const usage = this.costGuardrails.getUsage(orgId);\n        const recentHistory = this.costGuardrails.getUsageHistory(orgId, 50);\n        const providerHealth = this.providerManager.getAllProviderHealth();\n        return {\n            costs: {\n                daily: usage.daily,\n                monthly: usage.monthly,\n                limits: usage.limits,\n                utilization: {\n                    daily: usage.utilizationDaily,\n                    monthly: usage.utilizationMonthly,\n                },\n            },\n            recentRequests: recentHistory,\n            providerStatus: providerHealth,\n            activeRequests: Array.from(this.activeRequests.entries()).length,\n        };\n    }\n    /**\n     * Gets system-wide statistics\n     */\n    getSystemStats() {\n        const aggregateStats = this.costGuardrails.getAggregateStats();\n        const allProviders = this.providerManager.getAllProviders();\n        const healthyProviders = this.providerManager.getAllProviderHealth()\n            .filter(h => h.status === 'healthy').length;\n        return {\n            ...aggregateStats,\n            providers: {\n                total: allProviders.length,\n                healthy: healthyProviders,\n                degraded: this.providerManager.getAllProviderHealth()\n                    .filter(h => h.status === 'degraded').length,\n                down: this.providerManager.getAllProviderHealth()\n                    .filter(h => h.status === 'down').length,\n            },\n            activeRequests: this.activeRequests.size,\n        };\n    }\n    /**\n     * Updates cost limits for an organization\n     */\n    updateOrganizationLimits(orgId, limits) {\n        const currentLimits = this.costGuardrails.getCostLimits(orgId);\n        const newLimits = { ...currentLimits, ...limits };\n        this.costGuardrails.setCostLimits(orgId, newLimits);\n    }\n    // Private methods\n    findSuitableProviders(request) {\n        const requirements = {\n            capabilities: request.requiresCapabilities || [],\n            languages: request.languages || ['en'],\n            maxCost: request.maxCostEUR || this.config.defaultMaxCostEUR,\n            preferEdge: request.preferEdge !== false, // Default to preferring edge\n        };\n        // Add implicit capabilities based on request\n        if (request.tools_needed.includes('function_calling')) {\n            requirements.capabilities.push('function_calling');\n        }\n        if (request.tools_needed.includes('vision')) {\n            requirements.capabilities.push('vision');\n        }\n        if (request.tools_needed.includes('code_interpreter')) {\n            requirements.capabilities.push('code_interpreter');\n        }\n        const providers = [];\n        // Try to get best provider\n        const bestProvider = this.providerManager.getBestProvider(requirements);\n        if (bestProvider) {\n            providers.push(bestProvider);\n        }\n        // Add fallback providers\n        const allSuitable = this.providerManager.getEnabledProviders().filter(provider => {\n            if (provider.id === bestProvider?.id)\n                return false;\n            // Basic capability check for fallbacks\n            return requirements.capabilities.every(cap => provider.models.some(model => model.capabilities.includes(cap)));\n        });\n        providers.push(...allSuitable);\n        return providers;\n    }\n    selectBestModel(provider, request) {\n        let suitableModels = provider.models;\n        // Filter by capabilities\n        if (request.requiresCapabilities) {\n            suitableModels = suitableModels.filter(model => request.requiresCapabilities.every(cap => model.capabilities.includes(cap)));\n        }\n        // Filter by context window if needed\n        const contextRequired = request.tokens_est || 1000;\n        suitableModels = suitableModels.filter(model => model.contextWindow >= contextRequired);\n        if (suitableModels.length === 0)\n            return null;\n        // Prefer requested model if specified and available\n        if (request.model) {\n            const requestedModel = suitableModels.find(m => m.id === request.model);\n            if (requestedModel)\n                return requestedModel;\n        }\n        // Sort by cost and capability\n        return suitableModels.sort((a, b) => {\n            // Prefer models with more capabilities\n            const capabilityDiff = b.capabilities.length - a.capabilities.length;\n            if (capabilityDiff !== 0)\n                return capabilityDiff;\n            // Then by cost (lower is better)\n            return a.inputCostPer1KTokens - b.inputCostPer1KTokens;\n        })[0];\n    }\n    buildRoutingDecision(provider, model, request, estimatedCost, rateLimitOk, fallbackProviders) {\n        const shouldRedact = provider.type === 'cloud' &&\n            (request.sensitivity === 'pii' || request.sensitivity === 'confidential');\n        let endpoint = provider.config.baseUrl;\n        let headers = { ...provider.config.headers };\n        // Build provider-specific endpoint\n        switch (provider.id) {\n            case 'openai-gpt4':\n            case 'azure-openai':\n                endpoint += '/chat/completions';\n                if (provider.config.apiKey) {\n                    headers['Authorization'] = `Bearer ${provider.config.apiKey}`;\n                }\n                break;\n            case 'anthropic-claude':\n                endpoint += '/messages';\n                if (provider.config.apiKey) {\n                    headers['x-api-key'] = provider.config.apiKey;\n                }\n                break;\n            case 'google-gemini':\n                endpoint += `/models/${model.id}:generateContent`;\n                if (provider.config.apiKey) {\n                    endpoint += `?key=${provider.config.apiKey}`;\n                }\n                break;\n            case 'mistral-edge':\n                endpoint += '/v1/chat/completions';\n                break;\n        }\n        // Determine routing reason\n        let routingReason = 'best_match';\n        if (request.preferEdge && provider.type === 'edge') {\n            routingReason = 'edge_preferred';\n        }\n        else if (shouldRedact) {\n            routingReason = 'pii_cloud_routing';\n        }\n        else if (request.requiresCapabilities?.length) {\n            routingReason = 'capability_requirement';\n        }\n        return {\n            provider,\n            model: model.id,\n            endpoint,\n            headers,\n            shouldRedact,\n            maxRetries: provider.config.retryAttempts,\n            timeoutMs: provider.config.timeout,\n            estimatedCost,\n            rateLimitOk,\n            fallbackProviders,\n            routingReason,\n        };\n    }\n    handleCostAlert(alert) {\n        logger.warn('Cost alert received', {\n            alert_type: alert.type,\n            org_id: alert.orgId,\n            current_cost: alert.currentCost,\n            limit: alert.limit,\n            period: alert.period,\n            message: alert.message,\n        });\n        // Send webhook notifications if configured\n        if (this.config.alertWebhooks) {\n            this.config.alertWebhooks.forEach(webhookUrl => {\n                this.sendWebhookAlert(webhookUrl, alert);\n            });\n        }\n        // Update metrics\n        prometheus.aiCostAlerts.labels({\n            org_id: alert.orgId,\n            type: alert.type,\n            period: alert.period,\n        }).inc();\n    }\n    async sendWebhookAlert(webhookUrl, alert) {\n        try {\n            const response = await fetch(webhookUrl, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    alert_type: alert.type,\n                    organization_id: alert.orgId,\n                    current_cost_eur: alert.currentCost,\n                    limit_eur: alert.limit,\n                    period: alert.period,\n                    message: alert.message,\n                    timestamp: alert.timestamp.toISOString(),\n                }),\n            });\n            if (!response.ok) {\n                throw new Error(`Webhook returned ${response.status}`);\n            }\n        }\n        catch (error) {\n            logger.error('Failed to send webhook alert', error instanceof Error ? error : new Error(String(error)), {\n                webhook_url: webhookUrl,\n                alert_type: alert.type,\n                org_id: alert.orgId,\n            });\n        }\n    }\n    setupDefaultCostLimits() {\n        // Set up default limits for demo organization\n        this.costGuardrails.setCostLimits('org-001', {\n            dailyLimitEUR: 25.0,\n            monthlyLimitEUR: 500.0,\n            perRequestLimitEUR: 2.0,\n            warningThresholds: {\n                daily: 75,\n                monthly: 80,\n            },\n            emergencyStop: {\n                enabled: true,\n                thresholdEUR: 750.0,\n            },\n        });\n    }\n    generateRequestId() {\n        return `req-${Date.now()}-${Math.random().toString(36).substring(2)}`;\n    }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/ai/providers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/logging/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/metrics/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/security/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/packages/shared/src/types/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/scripts/init-advanced-features.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'__dirname' is assigned a value but never used.","line":13,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[369,442],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1470,1539],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1582,1632],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1644,1718],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1873,1934],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1950,2018],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2337,2381],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5232,5295],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5297,5358],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5359,5395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5396,5462],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5463,5521],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5522,5606],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5607,5689],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Script de inicialización para las funcionalidades avanzadas del PR-13\n * Configura todas las nuevas características del sistema de inteligencia de negocios\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log('🚀 Inicializando funcionalidades avanzadas del PR-13...\\n');\n\n// Configuración de variables de entorno\nconst envConfig = `\n# ========================================\n# CONFIGURACIÓN AVANZADA - PR-13\n# ========================================\n\n# APIs Externas\nSHIPPING_API_URL=https://api.shipping-provider.com\nSHIPPING_API_KEY=your_shipping_api_key_here\nPAYMENT_API_URL=https://api.payment-provider.com\nPAYMENT_API_KEY=your_payment_api_key_here\nMARKET_DATA_API_URL=https://api.market-data.com\nMARKET_DATA_API_KEY=your_market_data_api_key_here\nWEATHER_API_URL=https://api.weather.com\nWEATHER_API_KEY=your_weather_api_key_here\n\n# Configuración del Sistema Avanzado\nORG_ID=org-123\nAUDIT_ENABLED=true\nNOTIFICATIONS_ENABLED=true\nAI_PREDICTIONS_ENABLED=true\nMETRICS_ENABLED=true\nEXTERNAL_INTEGRATIONS_ENABLED=true\n\n# Configuración de Performance\nCACHE_TTL=3600\nRATE_LIMIT_WINDOW=900000\nRATE_LIMIT_MAX_REQUESTS=100\n\n# Configuración de Logging\nLOG_LEVEL=info\nAUDIT_LOG_LEVEL=debug\n`;\n\n// Verificar si existe .env\nconst envPath = path.join(process.cwd(), '.env');\nif (!fs.existsSync(envPath)) {\n  console.log('📝 Creando archivo .env con configuración avanzada...');\n  fs.writeFileSync(envPath, envConfig);\n  console.log('✅ Archivo .env creado exitosamente');\n} else {\n  console.log('📝 Actualizando archivo .env con nuevas configuraciones...');\n  const existingEnv = fs.readFileSync(envPath, 'utf8');\n  if (!existingEnv.includes('SHIPPING_API_URL')) {\n    fs.appendFileSync(envPath, envConfig);\n    console.log('✅ Configuraciones avanzadas agregadas al .env');\n  } else {\n    console.log('ℹ️  Las configuraciones avanzadas ya están presentes');\n  }\n}\n\n// Crear directorios necesarios\nconst directories = [\n  'logs',\n  'logs/audit',\n  'logs/metrics',\n  'logs/ai',\n  'data/exports',\n  'data/cache'\n];\n\ndirectories.forEach(dir => {\n  const dirPath = path.join(process.cwd(), dir);\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath, { recursive: true });\n    console.log(`📁 Directorio creado: ${dir}`);\n  }\n});\n\n// Crear archivo de configuración de servicios\nconst servicesConfig = {\n  ai: {\n    enabled: true,\n    predictionModels: ['demand', 'inventory', 'seasonality'],\n    confidenceThreshold: 0.85,\n    updateInterval: 3600000 // 1 hora\n  },\n  metrics: {\n    enabled: true,\n    kpiCategories: ['inventory', 'financial', 'supplier', 'operational'],\n    calculationInterval: 300000, // 5 minutos\n    retentionDays: 90\n  },\n  integrations: {\n    enabled: true,\n    providers: {\n      shipping: ['fedex', 'ups', 'dhl'],\n      payment: ['stripe', 'paypal', 'bank_transfer'],\n      market: ['competitor_prices', 'market_trends'],\n      weather: ['forecast', 'current']\n    },\n    rateLimits: {\n      shipping: { requests: 100, window: 60000 },\n      payment: { requests: 50, window: 60000 },\n      market: { requests: 200, window: 60000 },\n      weather: { requests: 1000, window: 60000 }\n    }\n  },\n  audit: {\n    enabled: true,\n    logLevels: ['data_access', 'data_modification', 'system_change', 'security'],\n    retentionDays: 365,\n    complianceRules: [\n      {\n        id: 'rule_001',\n        name: 'Sensitive Data Access',\n        type: 'data_access',\n        severity: 'high',\n        enabled: true\n      },\n      {\n        id: 'rule_002',\n        name: 'Bulk Data Export',\n        type: 'data_access',\n        severity: 'medium',\n        enabled: true\n      },\n      {\n        id: 'rule_003',\n        name: 'System Configuration Changes',\n        type: 'system_change',\n        severity: 'critical',\n        enabled: true\n      }\n    ]\n  },\n  notifications: {\n    enabled: true,\n    channels: ['email', 'sms', 'push', 'in_app'],\n    templates: [\n      {\n        id: 'inventory_low_stock',\n        name: 'Low Stock Alert',\n        type: 'in_app',\n        priority: 'high'\n      },\n      {\n        id: 'inventory_stockout',\n        name: 'Stockout Alert',\n        type: 'in_app',\n        priority: 'urgent'\n      },\n      {\n        id: 'financial_low_margin',\n        name: 'Low Profit Margin Alert',\n        type: 'in_app',\n        priority: 'medium'\n      }\n    ],\n    rules: [\n      {\n        id: 'rule_stockout',\n        name: 'Stockout Detection',\n        conditions: [{ metric: 'stockout_rate', operator: 'gt', value: 0 }],\n        actions: [{ template_id: 'inventory_stockout', channels: ['in_app', 'email'] }]\n      },\n      {\n        id: 'rule_low_margin',\n        name: 'Low Profit Margin',\n        conditions: [{ metric: 'profit_margin', operator: 'lt', value: 15 }],\n        actions: [{ template_id: 'financial_low_margin', channels: ['in_app'] }]\n      }\n    ]\n  }\n};\n\nconst configPath = path.join(process.cwd(), 'config', 'advanced-services.json');\nif (!fs.existsSync(path.dirname(configPath))) {\n  fs.mkdirSync(path.dirname(configPath), { recursive: true });\n}\nfs.writeFileSync(configPath, JSON.stringify(servicesConfig, null, 2));\nconsole.log('⚙️  Configuración de servicios avanzados creada');\n\nconsole.log('\\n🎉 ¡Inicialización completada exitosamente!');\nconsole.log('\\n📋 Próximos pasos:');\nconsole.log('1. Configurar las claves de API en el archivo .env');\nconsole.log('2. Ejecutar: npm run dev (para desarrollo)');\nconsole.log('3. Acceder al dashboard en: http://localhost:3000/dashboard-advanced');\nconsole.log('\\n🚀 ¡El sistema de inteligencia de negocios está listo para usar!');\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/scripts/monitor-performance.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":4,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1225,1300],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2146,2202],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      memory: [],\n      cpu: [],\n      responseTime: [],\n      timestamp: Date.now()\n    };\n  }\n\n  collectMetrics() {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n    \n    this.metrics.memory.push({\n      rss: memUsage.rss,\n      heapTotal: memUsage.heapTotal,\n      heapUsed: memUsage.heapUsed,\n      external: memUsage.external,\n      timestamp: Date.now()\n    });\n\n    this.metrics.cpu.push({\n      user: cpuUsage.user,\n      system: cpuUsage.system,\n      timestamp: Date.now()\n    });\n  }\n\n  generateReport() {\n    const report = {\n      timestamp: new Date().toISOString(),\n      summary: {\n        memoryPeak: Math.max(...this.metrics.memory.map(m => m.heapUsed)),\n        memoryAverage: this.metrics.memory.reduce((sum, m) => sum + m.heapUsed, 0) / this.metrics.memory.length,\n        cpuAverage: this.metrics.cpu.reduce((sum, c) => sum + c.user, 0) / this.metrics.cpu.length\n      },\n      recommendations: this.generateRecommendations()\n    };\n\n    fs.writeFileSync('performance-report.json', JSON.stringify(report, null, 2));\n    console.log('📊 Reporte de rendimiento generado: performance-report.json');\n  }\n\n  generateRecommendations() {\n    const recommendations = [];\n    \n    if (this.metrics.memory.length > 0) {\n      const avgMemory = this.metrics.memory.reduce((sum, m) => sum + m.heapUsed, 0) / this.metrics.memory.length;\n      \n      if (avgMemory > 100 * 1024 * 1024) { // 100MB\n        recommendations.push({\n          type: 'memory',\n          message: 'Alto uso de memoria detectado. Considerar optimización de caché.',\n          priority: 'high'\n        });\n      }\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push({\n        type: 'general',\n        message: 'Rendimiento dentro de parámetros normales.',\n        priority: 'low'\n      });\n    }\n\n    return recommendations;\n  }\n}\n\n// Ejecutar monitoreo si se llama directamente\nif (require.main === module) {\n  const monitor = new PerformanceMonitor();\n  \n  console.log('🔍 Iniciando monitoreo de rendimiento...');\n  \n  // Recolectar métricas cada 5 segundos\n  const interval = setInterval(() => {\n    monitor.collectMetrics();\n  }, 5000);\n\n  // Generar reporte después de 30 segundos\n  setTimeout(() => {\n    clearInterval(interval);\n    monitor.generateReport();\n    process.exit(0);\n  }, 30000);\n}\n\nmodule.exports = PerformanceMonitor;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/scripts/test-advanced-features.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[541,570],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[628,704],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[796,847],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[938,1008],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-const","severity":2,"message":"'totalTests' is never reassigned. Use 'const' instead.","line":118,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":118,"endColumn":17,"fix":{"range":[3092,3122],"text":"const totalTests = tests.length;"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3398,3445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3448,3512],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3515,3592],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3595,3678],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3720,3798],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3803,3890],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3906,3971],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3976,4042],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4050,4135],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4138,4206],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4261,4318],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":1,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Script de prueba para verificar funcionalidades avanzadas del PR-13\n */\n\nconst BASE_URL = 'http://localhost:3001';\n\nasync function testEndpoint(name, url, method = 'GET', body = null) {\n  try {\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(`${BASE_URL}${url}`, options);\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log(`✅ ${name}: OK`);\n      return { success: true, data };\n    } else {\n      console.log(`❌ ${name}: ERROR - ${response.status} ${response.statusText}`);\n      return { success: false, error: response.statusText };\n    }\n  } catch (error) {\n    console.log(`❌ ${name}: ERROR - ${error.message}`);\n    return { success: false, error: error.message };\n  }\n}\n\nasync function runTests() {\n  console.log('🧪 Iniciando pruebas de funcionalidades avanzadas...\\n');\n\n  const tests = [\n    {\n      name: 'Sistema Principal',\n      url: '/health',\n      method: 'GET'\n    },\n    {\n      name: 'IA - Predicción de Demanda',\n      url: '/api/advanced/ai/predict-demand/org-123',\n      method: 'POST',\n      body: { productIds: ['product-1', 'product-2'] }\n    },\n    {\n      name: 'IA - Optimización de Inventario',\n      url: '/api/advanced/ai/optimize-inventory/org-123',\n      method: 'POST'\n    },\n    {\n      name: 'IA - Análisis de Estacionalidad',\n      url: '/api/advanced/ai/analyze-seasonality/org-123',\n      method: 'POST'\n    },\n    {\n      name: 'IA - Recomendaciones',\n      url: '/api/advanced/ai/recommendations/org-123',\n      method: 'POST'\n    },\n    {\n      name: 'Métricas - Scorecard KPIs',\n      url: '/api/advanced/metrics/kpi-scorecard/org-123?period=30d',\n      method: 'GET'\n    },\n    {\n      name: 'Integraciones - Estado de Salud',\n      url: '/api/advanced/integrations/health',\n      method: 'GET'\n    },\n    {\n      name: 'Integraciones - Proveedores de Envío',\n      url: '/api/advanced/integrations/shipping/providers',\n      method: 'POST',\n      body: { origin: 'Madrid', destination: 'Barcelona', weight: 5 }\n    },\n    {\n      name: 'Integraciones - Datos de Mercado',\n      url: '/api/advanced/integrations/market-data',\n      method: 'POST',\n      body: { productIds: ['product-1', 'product-2'] }\n    },\n    {\n      name: 'Integraciones - Pronóstico Meteorológico',\n      url: '/api/advanced/integrations/weather/forecast?location=Madrid&days=7',\n      method: 'GET'\n    },\n    {\n      name: 'Auditoría - Eventos',\n      url: '/api/advanced/audit/events/org-123?limit=10',\n      method: 'GET'\n    },\n    {\n      name: 'Auditoría - Reporte',\n      url: '/api/advanced/audit/report/org-123?period=30d',\n      method: 'GET'\n    },\n    {\n      name: 'Dashboard - Datos Completos',\n      url: '/api/advanced/dashboard/data/org-123?period=30d',\n      method: 'GET'\n    },\n    {\n      name: 'Sistema - Estado General',\n      url: '/api/advanced/system/status',\n      method: 'GET'\n    }\n  ];\n\n  let passedTests = 0;\n  let totalTests = tests.length;\n\n  for (const test of tests) {\n    const result = await testEndpoint(test.name, test.url, test.method, test.body);\n    if (result.success) {\n      passedTests++;\n    }\n    \n    // Pequeña pausa entre pruebas\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n\n  console.log('\\n📊 Resultados de las Pruebas:');\n  console.log(`✅ Pruebas exitosas: ${passedTests}/${totalTests}`);\n  console.log(`❌ Pruebas fallidas: ${totalTests - passedTests}/${totalTests}`);\n  console.log(`📈 Tasa de éxito: ${((passedTests / totalTests) * 100).toFixed(1)}%`);\n\n  if (passedTests === totalTests) {\n    console.log('\\n🎉 ¡Todas las funcionalidades avanzadas están operacionales!');\n    console.log('\\n🚀 El sistema de inteligencia de negocios está listo para producción.');\n  } else {\n    console.log('\\n⚠️  Algunas funcionalidades necesitan atención.');\n    console.log('📋 Revisa los logs del servidor para más detalles.');\n  }\n\n  console.log('\\n📱 Accede al dashboard en: http://localhost:3000/dashboard-advanced');\n  console.log('📚 Documentación disponible en: docs/advanced-api.md');\n}\n\n// Esperar un poco para que el servidor esté listo\nconsole.log('⏳ Esperando que el servidor esté listo...');\nsetTimeout(runTests, 3000);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/scripts/test-consolidated-services.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[377,464],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6896,6931],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6934,6971],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6974,7002],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7008,7101],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7104,7198],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7201,7252],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7258,7288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7291,7367],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7370,7447],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7450,7526],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7529,7603],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7645,7706],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7711,7747],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7752,7807],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7812,7876],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7881,7950],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7966,8041],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n// Script de prueba para servicios consolidados\n// Verifica que todos los servicios consolidados funcionen correctamente\n\nimport fs from 'fs';\nimport path from 'path';\n\n// Colores para output\nconst colors = {\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  reset: '\\x1b[0m'\n};\n\nfunction log(message, color = 'blue') {\n  console.log(`${colors[color]}[${new Date().toISOString()}]${colors.reset} ${message}`);\n}\n\nfunction success(message) {\n  log(`✅ ${message}`, 'green');\n}\n\nfunction error(message) {\n  log(`❌ ${message}`, 'red');\n}\n\nfunction warning(message) {\n  log(`⚠️  ${message}`, 'yellow');\n}\n\n// Verificar que los archivos de servicios consolidados existen\nfunction verifyConsolidatedServices() {\n  log('Verificando servicios consolidados...');\n  \n  const services = [\n    {\n      name: 'FinOps Consolidated Service',\n      path: 'apps/api/src/lib/finops-consolidated.service.ts',\n      exportName: 'finOpsConsolidatedService'\n    },\n    {\n      name: 'Analytics Consolidated Service',\n      path: 'apps/api/src/lib/analytics-consolidated.service.ts',\n      exportName: 'analyticsConsolidated'\n    },\n    {\n      name: 'Security Consolidated Service',\n      path: 'apps/api/src/lib/security-consolidated.service.ts',\n      exportName: 'securityConsolidated'\n    },\n    {\n      name: 'Quiet Hours & Oncall Consolidated Service',\n      path: 'apps/api/src/lib/quiet-hours-oncall-consolidated.service.ts',\n      exportName: 'quietHoursOncallConsolidated'\n    },\n    {\n      name: 'GDPR Consolidated Service',\n      path: 'apps/api/src/lib/gdpr-consolidated.service.ts',\n      exportName: 'gdprConsolidated'\n    }\n  ];\n\n  let allServicesExist = true;\n\n  for (const service of services) {\n    if (fs.existsSync(service.path)) {\n      success(`${service.name} encontrado`);\n      \n      // Verificar que el archivo tiene contenido\n      const content = fs.readFileSync(service.path, 'utf8');\n      if (content.length < 1000) {\n        warning(`${service.name} parece tener poco contenido (${content.length} caracteres)`);\n      }\n      \n      // Verificar que tiene la exportación correcta\n      if (content.includes(`export const ${service.exportName}`) || \n          content.includes(`export { ${service.exportName}`)) {\n        success(`${service.name} tiene exportación correcta`);\n      } else {\n        error(`${service.name} no tiene exportación correcta`);\n        allServicesExist = false;\n      }\n    } else {\n      error(`${service.name} no encontrado en ${service.path}`);\n      allServicesExist = false;\n    }\n  }\n\n  return allServicesExist;\n}\n\n// Verificar configuración optimizada\nfunction verifyOptimizedConfiguration() {\n  log('Verificando configuración optimizada...');\n  \n  const configs = [\n    {\n      name: 'TypeScript Config',\n      path: 'tsconfig.json',\n      required: ['incremental', 'tsBuildInfoFile']\n    },\n    {\n      name: 'ESLint Config',\n      path: '.eslintrc.cjs',\n      required: ['env', 'extends', 'rules']\n    },\n    {\n      name: 'Cache Config',\n      path: '.cache/config.json',\n      required: ['cache', 'services']\n    },\n    {\n      name: 'Dockerfile Optimized',\n      path: 'Dockerfile.optimized',\n      required: ['FROM node:18-alpine', 'Multi-stage build']\n    }\n  ];\n\n  let allConfigsExist = true;\n\n  for (const config of configs) {\n    if (fs.existsSync(config.path)) {\n      success(`${config.name} encontrado`);\n      \n      const content = fs.readFileSync(config.path, 'utf8');\n      for (const required of config.required) {\n        if (content.includes(required)) {\n          success(`${config.name} contiene: ${required}`);\n        } else {\n          warning(`${config.name} no contiene: ${required}`);\n        }\n      }\n    } else {\n      error(`${config.name} no encontrado`);\n      allConfigsExist = false;\n    }\n  }\n\n  return allConfigsExist;\n}\n\n// Verificar scripts de optimización\nfunction verifyOptimizationScripts() {\n  log('Verificando scripts de optimización...');\n  \n  const scripts = [\n    'scripts/optimize-consolidated-services.sh',\n    'scripts/monitor-performance.js',\n    'scripts/clean-cache.sh'\n  ];\n\n  let allScriptsExist = true;\n\n  for (const script of scripts) {\n    if (fs.existsSync(script)) {\n      success(`Script encontrado: ${script}`);\n      \n      // Verificar que es ejecutable\n      const stats = fs.statSync(script);\n      if (stats.mode & parseInt('111', 8)) {\n        success(`${script} es ejecutable`);\n      } else {\n        warning(`${script} no es ejecutable`);\n      }\n    } else {\n      error(`Script no encontrado: ${script}`);\n      allScriptsExist = false;\n    }\n  }\n\n  return allScriptsExist;\n}\n\n// Verificar integración en index.ts\nfunction verifyIndexIntegration() {\n  log('Verificando integración en index.ts...');\n  \n  const indexPath = 'apps/api/src/index.ts';\n  \n  if (!fs.existsSync(indexPath)) {\n    error('index.ts no encontrado');\n    return false;\n  }\n\n  const content = fs.readFileSync(indexPath, 'utf8');\n  \n  const requiredImports = [\n    'finOpsConsolidatedService',\n    'analyticsConsolidated',\n    'securityConsolidated',\n    'quietHoursOncallConsolidated',\n    'gdprConsolidated'\n  ];\n\n  let allImportsFound = true;\n\n  for (const importName of requiredImports) {\n    if (content.includes(importName)) {\n      success(`Import encontrado: ${importName}`);\n    } else {\n      error(`Import no encontrado: ${importName}`);\n      allImportsFound = false;\n    }\n  }\n\n  // Verificar endpoint de estado consolidado\n  if (content.includes('/v1/system/consolidated-status')) {\n    success('Endpoint de estado consolidado encontrado');\n  } else {\n    error('Endpoint de estado consolidado no encontrado');\n    allImportsFound = false;\n  }\n\n  return allImportsFound;\n}\n\n// Generar reporte de prueba\nfunction generateTestReport(results) {\n  const report = {\n    timestamp: new Date().toISOString(),\n    tests: {\n      consolidatedServices: results.services,\n      optimizedConfiguration: results.configs,\n      optimizationScripts: results.scripts,\n      indexIntegration: results.index\n    },\n    summary: {\n      totalTests: 4,\n      passedTests: Object.values(results).filter(Boolean).length,\n      failedTests: Object.values(results).filter(r => !r).length\n    },\n    status: Object.values(results).every(Boolean) ? 'PASSED' : 'FAILED'\n  };\n\n  fs.writeFileSync('consolidated-services-test-report.json', JSON.stringify(report, null, 2));\n  \n  log('📊 Reporte de prueba generado: consolidated-services-test-report.json');\n  \n  return report;\n}\n\n// Función principal\nasync function main() {\n  log('🚀 Iniciando pruebas de servicios consolidados...');\n  \n  const results = {\n    services: verifyConsolidatedServices(),\n    configs: verifyOptimizedConfiguration(),\n    scripts: verifyOptimizationScripts(),\n    index: verifyIndexIntegration()\n  };\n\n  log('Generando reporte final...');\n  const report = generateTestReport(results);\n\n  console.log('\\n' + '='.repeat(60));\n  console.log('📊 RESUMEN DE PRUEBAS');\n  console.log('='.repeat(60));\n  \n  console.log(`✅ Pruebas pasadas: ${report.summary.passedTests}/${report.summary.totalTests}`);\n  console.log(`❌ Pruebas fallidas: ${report.summary.failedTests}/${report.summary.totalTests}`);\n  console.log(`📈 Estado general: ${report.status}`);\n  \n  console.log('\\n📋 Detalles:');\n  console.log(`   • Servicios consolidados: ${results.services ? '✅' : '❌'}`);\n  console.log(`   • Configuración optimizada: ${results.configs ? '✅' : '❌'}`);\n  console.log(`   • Scripts de optimización: ${results.scripts ? '✅' : '❌'}`);\n  console.log(`   • Integración en index.ts: ${results.index ? '✅' : '❌'}`);\n\n  if (report.status === 'PASSED') {\n    console.log('\\n🎉 ¡Todas las pruebas pasaron exitosamente!');\n    console.log('\\n🔧 Próximos pasos:');\n    console.log('   1. Ejecutar: npm run build:optimized');\n    console.log('   2. Probar: GET /v1/system/consolidated-status');\n    console.log('   3. Monitorear: node scripts/monitor-performance.js');\n  } else {\n    console.log('\\n⚠️  Algunas pruebas fallaron. Revisar los errores arriba.');\n    process.exit(1);\n  }\n}\n\n// Ejecutar si se llama directamente\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(error => {\n    error(`Error ejecutando pruebas: ${error.message}`);\n    process.exit(1);\n  });\n}\n\nexport {\n  verifyConsolidatedServices,\n  verifyOptimizedConfiguration,\n  verifyOptimizationScripts,\n  verifyIndexIntegration,\n  generateTestReport\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/test-security-simple.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[835,875],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1044,1086],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1267,1315],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1448,1494],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2076,2137],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2467,2506],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2868,2913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4105,4158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4430,4485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5154,5224],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6225,6274],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6277,6330],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6419,6461],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6601,6649],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6848,6886],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6955,7002],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7007,7051],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":243,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":243,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7084,7126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'role' is assigned a value but never used.","line":244,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7282,7330],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'permission' is assigned a value but never used.","line":248,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":248,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7489,7534],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7623,7687],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7724,7766],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7986,8037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8230,8278],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8352,8433],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8474,8523],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8581,8644],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8650,8710],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8715,8741],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8746,8791],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8796,8852],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8857,8901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":289,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":289,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8906,8962],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8967,9017],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9022,9087],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9092,9155],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9181,9228],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\n\n// Simple Security System Test\nclass SimpleSecuritySystem {\n  constructor() {\n    this.users = new Map();\n    this.roles = new Map();\n    this.permissions = new Map();\n    this.auditLogs = [];\n    this.securityEvents = [];\n    this.threatIntelligence = new Map();\n  }\n\n  async createUser(email, username, password, roles = []) {\n    const salt = crypto.randomBytes(16).toString('hex');\n    const passwordHash = crypto.pbkdf2Sync(password, salt, 10000, 64, 'sha512').toString('hex');\n\n    const user = {\n      id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      email,\n      username,\n      passwordHash,\n      salt,\n      roles,\n      permissions: [],\n      mfaEnabled: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(user.id, user);\n    console.log(`✅ User created: ${email}`);\n    return user;\n  }\n\n  async authenticateUser(email, password) {\n    const user = Array.from(this.users.values()).find(u => u.email === email);\n    if (!user) {\n      console.log(`❌ User not found: ${email}`);\n      return null;\n    }\n\n    const passwordHash = crypto.pbkdf2Sync(password, user.salt, 10000, 64, 'sha512').toString('hex');\n    if (passwordHash !== user.passwordHash) {\n      console.log(`❌ Invalid password for: ${email}`);\n      return null;\n    }\n\n    // Simple token generation without JWT\n    const token = crypto.randomBytes(32).toString('hex');\n\n    console.log(`✅ User authenticated: ${email}`);\n    return { user, token };\n  }\n\n  async setupMFA(userId, method) {\n    const user = this.users.get(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const secret = crypto.randomBytes(20).toString('hex');\n    const qrCode = method === 'totp' ? `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(`otpauth://totp/ECONEURA-IA:${user.email}?secret=${secret}&issuer=ECONEURA-IA`)}` : undefined;\n\n    user.mfaEnabled = true;\n    user.mfaSecret = secret;\n    user.updatedAt = new Date();\n\n    this.users.set(userId, user);\n    console.log(`✅ MFA setup completed for user: ${user.email}`);\n    return { secret, qrCode };\n  }\n\n  async createRole(name, description, permissions, orgId) {\n    const role = {\n      id: `role_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name,\n      description,\n      permissions,\n      orgId,\n      createdAt: new Date(),\n    };\n\n    this.roles.set(role.id, role);\n    console.log(`✅ Role created: ${name}`);\n    return role;\n  }\n\n  async createPermission(name, description, resource, action, orgId) {\n    const permission = {\n      id: `perm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name,\n      description,\n      resource,\n      action,\n      orgId,\n      createdAt: new Date(),\n    };\n\n    this.permissions.set(permission.id, permission);\n    console.log(`✅ Permission created: ${name}`);\n    return permission;\n  }\n\n  async checkPermission(userId, resource, action) {\n    const user = this.users.get(userId);\n    if (!user) {\n      return false;\n    }\n\n    // Check user's direct permissions\n    const hasDirectPermission = user.permissions.some(permId => {\n      const permission = this.permissions.get(permId);\n      return permission && permission.resource === resource && permission.action === action;\n    });\n\n    if (hasDirectPermission) {\n      return true;\n    }\n\n    // Check role-based permissions\n    for (const roleId of user.roles) {\n      const role = this.roles.get(roleId);\n      if (role) {\n        const hasRolePermission = role.permissions.some(permId => {\n          const permission = this.permissions.get(permId);\n          return permission && permission.resource === resource && permission.action === action;\n        });\n        \n        if (hasRolePermission) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  async logAuditEvent(event) {\n    const auditLog = {\n      id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...event,\n      timestamp: new Date(),\n    };\n\n    this.auditLogs.push(auditLog);\n    console.log(`📝 Audit log created: ${event.action}`);\n  }\n\n  async logSecurityEvent(event) {\n    const securityEvent = {\n      id: `security_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...event,\n      timestamp: new Date(),\n      resolved: false,\n    };\n\n    this.securityEvents.push(securityEvent);\n    console.log(`🚨 Security event logged: ${event.type}`);\n  }\n\n  async checkIPReputation(ipAddress) {\n    // Simulate IP reputation check\n    const reputation = Math.random() > 0.9 ? 'malicious' : Math.random() > 0.7 ? 'suspicious' : 'good';\n    const country = ['US', 'CA', 'GB', 'DE', 'FR', 'JP', 'AU'][Math.floor(Math.random() * 7)];\n    const threatTypes = reputation === 'malicious' ? ['botnet', 'spam'] : [];\n    const confidence = reputation === 'malicious' ? 0.9 : reputation === 'suspicious' ? 0.6 : 0.95;\n\n    const threatIntel = {\n      ipAddress,\n      reputation,\n      country,\n      threatTypes,\n      lastSeen: new Date(),\n      confidence,\n    };\n\n    this.threatIntelligence.set(ipAddress, threatIntel);\n    console.log(`🔍 IP reputation checked: ${ipAddress} - ${reputation}`);\n    return threatIntel;\n  }\n\n  async getSecurityStats() {\n    const totalUsers = this.users.size;\n    const totalRoles = this.roles.size;\n    const totalPermissions = this.permissions.size;\n    const totalAuditLogs = this.auditLogs.length;\n    const totalSecurityEvents = this.securityEvents.length;\n    const mfaEnabledUsers = Array.from(this.users.values()).filter(u => u.mfaEnabled).length;\n\n    return {\n      users: {\n        total: totalUsers,\n        mfaEnabled: mfaEnabledUsers,\n        mfaPercentage: totalUsers > 0 ? (mfaEnabledUsers / totalUsers) * 100 : 0,\n      },\n      rbac: {\n        roles: totalRoles,\n        permissions: totalPermissions,\n      },\n      audit: {\n        total: totalAuditLogs,\n      },\n      security: {\n        events: {\n          total: totalSecurityEvents,\n        },\n      },\n      threats: {\n        tracked: this.threatIntelligence.size,\n      },\n      timestamp: new Date(),\n    };\n  }\n}\n\n// Test the security system\nasync function testSecuritySystem() {\n  console.log('🔒 Testing Simple Security System');\n  console.log('=====================================');\n\n  const security = new SimpleSecuritySystem();\n\n  try {\n    // Test 1: Create user\n    console.log('\\n1. Testing User Creation');\n    const user = await security.createUser('test@example.com', 'testuser', 'password123', ['user']);\n\n    // Test 2: Authenticate user\n    console.log('\\n2. Testing User Authentication');\n    const authResult = await security.authenticateUser('test@example.com', 'password123');\n    if (!authResult) {\n      throw new Error('Authentication failed');\n    }\n\n    // Test 3: Setup MFA\n    console.log('\\n3. Testing MFA Setup');\n    const mfaResult = await security.setupMFA(user.id, 'totp');\n    console.log(`MFA Secret: ${mfaResult.secret}`);\n    console.log(`QR Code: ${mfaResult.qrCode}`);\n\n    // Test 4: Create role\n    console.log('\\n4. Testing Role Creation');\n    const role = await security.createRole('admin', 'Administrator role', ['read:users', 'write:users'], 'default');\n\n    // Test 5: Create permission\n    console.log('\\n5. Testing Permission Creation');\n    const permission = await security.createPermission('read:users', 'Read user data', 'users', 'read', 'default');\n\n    // Test 6: Test permission check\n    console.log('\\n6. Testing Permission Check');\n    const hasPermission = await security.checkPermission(user.id, 'users', 'read');\n    console.log(`User has read:users permission: ${hasPermission}`);\n\n    // Test 7: Log audit event\n    console.log('\\n7. Testing Audit Logging');\n    await security.logAuditEvent({\n      userId: user.id,\n      action: 'test_action',\n      resource: 'test_resource',\n      details: { test: true },\n      success: true,\n    });\n\n    // Test 8: Log security event\n    console.log('\\n8. Testing Security Event Logging');\n    await security.logSecurityEvent({\n      type: 'test_event',\n      severity: 'medium',\n      userId: user.id,\n      details: { test: true },\n    });\n\n    // Test 9: Check IP reputation\n    console.log('\\n9. Testing IP Reputation Check');\n    const threatIntel = await security.checkIPReputation('8.8.8.8');\n    console.log(`IP Reputation: ${threatIntel.reputation} (${threatIntel.country})`);\n\n    // Test 10: Get security stats\n    console.log('\\n10. Testing Security Statistics');\n    const stats = await security.getSecurityStats();\n    console.log('Security Stats:', JSON.stringify(stats, null, 2));\n\n    console.log('\\n🎉 All security tests passed successfully!');\n    console.log('\\nSummary:');\n    console.log(`- Users: ${stats.users.total}`);\n    console.log(`- MFA Enabled: ${stats.users.mfaEnabled}`);\n    console.log(`- Roles: ${stats.rbac.roles}`);\n    console.log(`- Permissions: ${stats.rbac.permissions}`);\n    console.log(`- Audit Logs: ${stats.audit.total}`);\n    console.log(`- Security Events: ${stats.security.events.total}`);\n    console.log(`- Threat Intelligence: ${stats.threats.tracked}`);\n\n  } catch (error) {\n    console.error('❌ Test failed:', error.message);\n  }\n}\n\n// Run the test\ntestSecuritySystem();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/test-security.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[867,907],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1076,1118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1299,1347],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1512,1558],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2140,2201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2531,2570],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2932,2977],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3977,4026],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4029,4082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4171,4213],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4353,4401],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4600,4638],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4707,4754],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4759,4803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4836,4878],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'role' is assigned a value but never used.","line":170,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":170,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5034,5082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'permission' is assigned a value but never used.","line":174,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5238,5286],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5344,5407],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5413,5473],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5478,5504],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5509,5554],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5559,5615],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5620,5664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5669,5725],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5730,5780],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5785,5850],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5876,5923],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\n// Simple Security System Test\nclass SimpleSecuritySystem {\n  constructor() {\n    this.users = new Map();\n    this.roles = new Map();\n    this.permissions = new Map();\n    this.auditLogs = [];\n    this.securityEvents = [];\n    this.threatIntelligence = new Map();\n  }\n\n  async createUser(email, username, password, roles = []) {\n    const salt = crypto.randomBytes(16).toString('hex');\n    const passwordHash = crypto.pbkdf2Sync(password, salt, 10000, 64, 'sha512').toString('hex');\n\n    const user = {\n      id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      email,\n      username,\n      passwordHash,\n      salt,\n      roles,\n      permissions: [],\n      mfaEnabled: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(user.id, user);\n    console.log(`✅ User created: ${email}`);\n    return user;\n  }\n\n  async authenticateUser(email, password) {\n    const user = Array.from(this.users.values()).find(u => u.email === email);\n    if (!user) {\n      console.log(`❌ User not found: ${email}`);\n      return null;\n    }\n\n    const passwordHash = crypto.pbkdf2Sync(password, user.salt, 10000, 64, 'sha512').toString('hex');\n    if (passwordHash !== user.passwordHash) {\n      console.log(`❌ Invalid password for: ${email}`);\n      return null;\n    }\n\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      'your-secret-key',\n      { expiresIn: '24h' }\n    );\n\n    console.log(`✅ User authenticated: ${email}`);\n    return { user, token };\n  }\n\n  async setupMFA(userId, method) {\n    const user = this.users.get(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const secret = crypto.randomBytes(20).toString('hex');\n    const qrCode = method === 'totp' ? `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(`otpauth://totp/ECONEURA-IA:${user.email}?secret=${secret}&issuer=ECONEURA-IA`)}` : undefined;\n\n    user.mfaEnabled = true;\n    user.mfaSecret = secret;\n    user.updatedAt = new Date();\n\n    this.users.set(userId, user);\n    console.log(`✅ MFA setup completed for user: ${user.email}`);\n    return { secret, qrCode };\n  }\n\n  async createRole(name, description, permissions, orgId) {\n    const role = {\n      id: `role_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name,\n      description,\n      permissions,\n      orgId,\n      createdAt: new Date(),\n    };\n\n    this.roles.set(role.id, role);\n    console.log(`✅ Role created: ${name}`);\n    return role;\n  }\n\n  async createPermission(name, description, resource, action, orgId) {\n    const permission = {\n      id: `perm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name,\n      description,\n      resource,\n      action,\n      orgId,\n      createdAt: new Date(),\n    };\n\n    this.permissions.set(permission.id, permission);\n    console.log(`✅ Permission created: ${name}`);\n    return permission;\n  }\n\n  async getSecurityStats() {\n    const totalUsers = this.users.size;\n    const totalRoles = this.roles.size;\n    const totalPermissions = this.permissions.size;\n    const totalAuditLogs = this.auditLogs.length;\n    const totalSecurityEvents = this.securityEvents.length;\n    const mfaEnabledUsers = Array.from(this.users.values()).filter(u => u.mfaEnabled).length;\n\n    return {\n      users: {\n        total: totalUsers,\n        mfaEnabled: mfaEnabledUsers,\n        mfaPercentage: totalUsers > 0 ? (mfaEnabledUsers / totalUsers) * 100 : 0,\n      },\n      rbac: {\n        roles: totalRoles,\n        permissions: totalPermissions,\n      },\n      audit: {\n        total: totalAuditLogs,\n      },\n      security: {\n        events: {\n          total: totalSecurityEvents,\n        },\n      },\n      threats: {\n        tracked: this.threatIntelligence.size,\n      },\n      timestamp: new Date(),\n    };\n  }\n}\n\n// Test the security system\nasync function testSecuritySystem() {\n  console.log('🔒 Testing Simple Security System');\n  console.log('=====================================');\n\n  const security = new SimpleSecuritySystem();\n\n  try {\n    // Test 1: Create user\n    console.log('\\n1. Testing User Creation');\n    const user = await security.createUser('test@example.com', 'testuser', 'password123', ['user']);\n\n    // Test 2: Authenticate user\n    console.log('\\n2. Testing User Authentication');\n    const authResult = await security.authenticateUser('test@example.com', 'password123');\n    if (!authResult) {\n      throw new Error('Authentication failed');\n    }\n\n    // Test 3: Setup MFA\n    console.log('\\n3. Testing MFA Setup');\n    const mfaResult = await security.setupMFA(user.id, 'totp');\n    console.log(`MFA Secret: ${mfaResult.secret}`);\n    console.log(`QR Code: ${mfaResult.qrCode}`);\n\n    // Test 4: Create role\n    console.log('\\n4. Testing Role Creation');\n    const role = await security.createRole('admin', 'Administrator role', ['read:users', 'write:users'], 'default');\n\n    // Test 5: Create permission\n    console.log('\\n5. Testing Permission Creation');\n    const permission = await security.createPermission('read:users', 'Read user data', 'users', 'read', 'default');\n\n    // Test 6: Get security stats\n    console.log('\\n6. Testing Security Statistics');\n    const stats = await security.getSecurityStats();\n    console.log('Security Stats:', JSON.stringify(stats, null, 2));\n\n    console.log('\\n🎉 All security tests passed successfully!');\n    console.log('\\nSummary:');\n    console.log(`- Users: ${stats.users.total}`);\n    console.log(`- MFA Enabled: ${stats.users.mfaEnabled}`);\n    console.log(`- Roles: ${stats.rbac.roles}`);\n    console.log(`- Permissions: ${stats.rbac.permissions}`);\n    console.log(`- Audit Logs: ${stats.audit.total}`);\n    console.log(`- Security Events: ${stats.security.events.total}`);\n\n  } catch (error) {\n    console.error('❌ Test failed:', error.message);\n  }\n}\n\n// Run the test\ntestSecuritySystem();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/tests/k6/chaos-test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":36,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":132,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":132,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":132,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":132,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":133,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":133,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate, Trend, Counter } from 'k6/metrics';\n\n// Custom metrics for chaos testing\nconst chaosErrorRate = new Rate('chaos_error_rate');\nconst chaosResponseTime = new Trend('chaos_response_time');\nconst chaosRequestCount = new Counter('chaos_request_count');\nconst chaosScenarios = new Counter('chaos_scenarios');\n\nexport const options = {\n  stages: [\n    { duration: '1m', target: 5 },  // Ramp up to 5 users\n    { duration: '3m', target: 5 },  // Stay at 5 users\n    { duration: '1m', target: 0 },  // Ramp down\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)<1000'], // More lenient for chaos testing\n    http_req_failed: ['rate<0.3'],     // Allow higher error rate\n    chaos_error_rate: ['rate<0.2'],    // Custom chaos error rate\n  },\n};\n\nconst BASE_URL = 'http://localhost:3001';\n\nexport default function() {\n  // Run different chaos scenarios\n  const scenarios = [\n    'invalid_requests',\n    'malicious_payloads',\n    'rate_limiting',\n    'resource_exhaustion',\n    'error_conditions'\n  ];\n  \n  const scenario = scenarios[__VU % scenarios.length];\n  \n  switch (scenario) {\n    case 'invalid_requests':\n      testInvalidRequests();\n      break;\n    case 'malicious_payloads':\n      testMaliciousPayloads();\n      break;\n    case 'rate_limiting':\n      testRateLimiting();\n      break;\n    case 'resource_exhaustion':\n      testResourceExhaustion();\n      break;\n    case 'error_conditions':\n      testErrorConditions();\n      break;\n  }\n  \n  chaosScenarios.add(1, { scenario });\n  sleep(Math.random() * 2); // Random sleep between 0-2 seconds\n}\n\nfunction testInvalidRequests() {\n  const invalidRequests = [\n    { method: 'GET', url: '/invalid-endpoint' },\n    { method: 'POST', url: '/v1/analytics/events', body: 'invalid-json' },\n    { method: 'GET', url: '/v1/advanced-analytics/dashboard?invalid=param' },\n    { method: 'POST', url: '/v1/advanced-security/events', body: '{}' },\n  ];\n  \n  invalidRequests.forEach(req => {\n    const response = http.request(req.method, `${BASE_URL}${req.url}`, req.body, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n    const success = check(response, {\n      [`${req.method} ${req.url} handled gracefully`]: (r) => r.status < 500,\n      [`${req.method} ${req.url} response time < 1000ms`]: (r) => r.timings.duration < 1000,\n    });\n    \n    chaosErrorRate.add(!success);\n    chaosResponseTime.add(response.timings.duration);\n    chaosRequestCount.add(1);\n  });\n}\n\nfunction testMaliciousPayloads() {\n  const maliciousPayloads = [\n    { endpoint: '/v1/analytics/events', payload: { eventType: '<script>alert(\"xss\")</script>' } },\n    { endpoint: '/v1/advanced-security/threats/detect', payload: { ipAddress: \"'; DROP TABLE users; --\" } },\n    { endpoint: '/v1/finops/budgets', payload: { amount: \"NaN\", currency: \"../../etc/passwd\" } },\n    { endpoint: '/v1/advanced-analytics/events', payload: { eventType: \"test\", action: \"javascript:alert(1)\" } },\n  ];\n  \n  maliciousPayloads.forEach(req => {\n    const response = http.post(`${BASE_URL}${req.endpoint}`, JSON.stringify(req.payload), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n    const success = check(response, {\n      [`malicious payload to ${req.endpoint} handled safely`]: (r) => r.status < 500,\n      [`malicious payload to ${req.endpoint} response time < 1000ms`]: (r) => r.timings.duration < 1000,\n    });\n    \n    chaosErrorRate.add(!success);\n    chaosResponseTime.add(response.timings.duration);\n    chaosRequestCount.add(1);\n  });\n}\n\nfunction testRateLimiting() {\n  // Send rapid requests to test rate limiting\n  for (let i = 0; i < 20; i++) {\n    const response = http.get(`${BASE_URL}/health`);\n    \n    const success = check(response, {\n      [`rate limit request ${i} handled`]: (r) => r.status < 500,\n      [`rate limit request ${i} response time < 2000ms`]: (r) => r.timings.duration < 2000,\n    });\n    \n    chaosErrorRate.add(!success);\n    chaosResponseTime.add(response.timings.duration);\n    chaosRequestCount.add(1);\n    \n    sleep(0.1); // 100ms between requests\n  }\n}\n\nfunction testResourceExhaustion() {\n  // Test with large payloads\n  const largePayload = {\n    eventType: 'load_test',\n    action: 'chaos_test',\n    entityType: 'test',\n    entityId: `chaos_${__VU}_${__ITER}`,\n    userId: `user_${__VU}`,\n    orgId: 'demo-org',\n    metadata: {\n      largeData: 'x'.repeat(10000), // 10KB of data\n      array: Array(1000).fill('test'),\n      nested: {\n        level1: { level2: { level3: { data: 'deep' } } }\n      }\n    }\n  };\n  \n  const response = http.post(`${BASE_URL}/v1/analytics/events`, JSON.stringify(largePayload), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n  \n  const success = check(response, {\n    'large payload handled gracefully': (r) => r.status < 500,\n    'large payload response time < 2000ms': (r) => r.timings.duration < 2000,\n  });\n  \n  chaosErrorRate.add(!success);\n  chaosResponseTime.add(response.timings.duration);\n  chaosRequestCount.add(1);\n}\n\nfunction testErrorConditions() {\n  const errorScenarios = [\n    { endpoint: '/v1/analytics/events', method: 'POST', body: null },\n    { endpoint: '/v1/advanced-security/metrics', method: 'GET', headers: { 'X-Org-ID': '' } },\n    { endpoint: '/v1/finops/budgets', method: 'POST', body: { invalid: 'data' } },\n    { endpoint: '/v1/advanced-analytics/export', method: 'GET', params: { format: 'invalid' } },\n  ];\n  \n  errorScenarios.forEach(scenario => {\n    const response = http.request(scenario.method, `${BASE_URL}${scenario.endpoint}`, scenario.body, {\n      headers: { \n        'Content-Type': 'application/json',\n        ...scenario.headers \n      }\n    });\n    \n    const success = check(response, {\n      [`error scenario ${scenario.endpoint} handled gracefully`]: (r) => r.status < 500,\n      [`error scenario ${scenario.endpoint} response time < 1000ms`]: (r) => r.timings.duration < 1000,\n    });\n    \n    chaosErrorRate.add(!success);\n    chaosResponseTime.add(response.timings.duration);\n    chaosRequestCount.add(1);\n  });\n}\n\nexport function handleSummary(data) {\n  return {\n    'chaos-test-results.json': JSON.stringify(data, null, 2),\n    stdout: `\nChaos Test Results:\n===================\nTotal Requests: ${data.metrics.chaos_request_count.values.count}\nChaos Error Rate: ${(data.metrics.chaos_error_rate.values.rate * 100).toFixed(2)}%\nAverage Response Time: ${data.metrics.chaos_response_time.values.avg.toFixed(2)}ms\n95th Percentile: ${data.metrics.chaos_response_time.values['p(95)'].toFixed(2)}ms\nMax Response Time: ${data.metrics.chaos_response_time.values.max.toFixed(2)}ms\nChaos Scenarios: ${data.metrics.chaos_scenarios.values.count}\n\nChaos Testing Summary:\n- Invalid requests handled: ${data.metrics.chaos_error_rate.values.rate < 0.2 ? 'PASS' : 'FAIL'}\n- System resilience: ${data.metrics.chaos_response_time.values.avg < 1000 ? 'GOOD' : 'NEEDS IMPROVEMENT'}\n- Error handling: ${data.metrics.chaos_error_rate.values.rate < 0.3 ? 'ROBUST' : 'WEAK'}\n    `,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/tests/k6/load-test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":70,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":70,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":71,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":73,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'__ITER' is not defined.","line":73,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'__VU' is not defined.","line":121,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":121,"endColumn":33}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate, Trend, Counter } from 'k6/metrics';\n\n// Custom metrics\nconst errorRate = new Rate('error_rate');\nconst responseTime = new Trend('response_time');\nconst requestCount = new Counter('request_count');\n\nexport const options = {\n  stages: [\n    { duration: '2m', target: 10 }, // Ramp up to 10 users\n    { duration: '5m', target: 10 }, // Stay at 10 users\n    { duration: '2m', target: 20 }, // Ramp up to 20 users\n    { duration: '5m', target: 20 }, // Stay at 20 users\n    { duration: '2m', target: 0 },  // Ramp down to 0 users\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)<500'], // 95% of requests must complete below 500ms\n    http_req_failed: ['rate<0.1'],    // Error rate must be below 10%\n    error_rate: ['rate<0.05'],        // Custom error rate below 5%\n  },\n};\n\nconst BASE_URL = 'http://localhost:3001';\n\nexport default function() {\n  // Test health endpoints\n  testHealthEndpoints();\n  \n  // Test analytics endpoints\n  testAnalyticsEndpoints();\n  \n  // Test security endpoints\n  testSecurityEndpoints();\n  \n  // Test FinOps endpoints\n  testFinOpsEndpoints();\n  \n  sleep(1);\n}\n\nfunction testHealthEndpoints() {\n  const endpoints = [\n    '/health',\n    '/health/live',\n    '/health/ready',\n    '/metrics'\n  ];\n  \n  endpoints.forEach(endpoint => {\n    const response = http.get(`${BASE_URL}${endpoint}`);\n    const success = check(response, {\n      [`${endpoint} status is 200`]: (r) => r.status === 200,\n      [`${endpoint} response time < 200ms`]: (r) => r.timings.duration < 200,\n    });\n    \n    errorRate.add(!success);\n    responseTime.add(response.timings.duration);\n    requestCount.add(1);\n  });\n}\n\nfunction testAnalyticsEndpoints() {\n  // Test analytics events\n  const eventPayload = {\n    eventType: 'load_test',\n    action: 'k6_test',\n    entityType: 'test',\n    entityId: `test_${__VU}_${__ITER}`,\n    userId: `user_${__VU}`,\n    orgId: 'demo-org',\n    metadata: { test: true, vu: __VU, iter: __ITER }\n  };\n  \n  const response = http.post(`${BASE_URL}/v1/analytics/events`, JSON.stringify(eventPayload), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n  \n  const success = check(response, {\n    'analytics event status is 201': (r) => r.status === 201,\n    'analytics event response time < 300ms': (r) => r.timings.duration < 300,\n  });\n  \n  errorRate.add(!success);\n  responseTime.add(response.timings.duration);\n  requestCount.add(1);\n  \n  // Test advanced analytics dashboard\n  const dashboardResponse = http.get(`${BASE_URL}/v1/advanced-analytics/dashboard`, {\n    headers: { 'X-Org-ID': 'demo-org' }\n  });\n  \n  const dashboardSuccess = check(dashboardResponse, {\n    'dashboard status is 200': (r) => r.status === 200,\n    'dashboard response time < 500ms': (r) => r.timings.duration < 500,\n  });\n  \n  errorRate.add(!dashboardSuccess);\n  responseTime.add(dashboardResponse.timings.duration);\n  requestCount.add(1);\n}\n\nfunction testSecurityEndpoints() {\n  // Test security metrics\n  const response = http.get(`${BASE_URL}/v1/advanced-security/metrics`, {\n    headers: { 'X-Org-ID': 'demo-org' }\n  });\n  \n  const success = check(response, {\n    'security metrics status is 200': (r) => r.status === 200,\n    'security metrics response time < 300ms': (r) => r.timings.duration < 300,\n  });\n  \n  errorRate.add(!success);\n  responseTime.add(response.timings.duration);\n  requestCount.add(1);\n  \n  // Test threat detection\n  const threatPayload = {\n    ipAddress: `192.168.1.${__VU}`,\n    userAgent: 'k6-load-test',\n    endpoint: '/test',\n    method: 'GET',\n    orgId: 'demo-org'\n  };\n  \n  const threatResponse = http.post(`${BASE_URL}/v1/advanced-security/threats/detect`, JSON.stringify(threatPayload), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n  \n  const threatSuccess = check(threatResponse, {\n    'threat detection status is 200': (r) => r.status === 200,\n    'threat detection response time < 400ms': (r) => r.timings.duration < 400,\n  });\n  \n  errorRate.add(!threatSuccess);\n  responseTime.add(threatResponse.timings.duration);\n  requestCount.add(1);\n}\n\nfunction testFinOpsEndpoints() {\n  // Test FinOps budgets\n  const response = http.get(`${BASE_URL}/v1/finops/budgets`, {\n    headers: { 'X-Org-ID': 'demo-org' }\n  });\n  \n  const success = check(response, {\n    'finops budgets status is 200': (r) => r.status === 200,\n    'finops budgets response time < 300ms': (r) => r.timings.duration < 300,\n  });\n  \n  errorRate.add(!success);\n  responseTime.add(response.timings.duration);\n  requestCount.add(1);\n  \n  // Test FinOps costs\n  const costsResponse = http.get(`${BASE_URL}/v1/finops/costs`, {\n    headers: { 'X-Org-ID': 'demo-org' }\n  });\n  \n  const costsSuccess = check(costsResponse, {\n    'finops costs status is 200': (r) => r.status === 200,\n    'finops costs response time < 300ms': (r) => r.timings.duration < 300,\n  });\n  \n  errorRate.add(!costsSuccess);\n  responseTime.add(costsResponse.timings.duration);\n  requestCount.add(1);\n}\n\nexport function handleSummary(data) {\n  return {\n    'load-test-results.json': JSON.stringify(data, null, 2),\n    stdout: `\nLoad Test Results:\n==================\nTotal Requests: ${data.metrics.request_count.values.count}\nError Rate: ${(data.metrics.error_rate.values.rate * 100).toFixed(2)}%\nAverage Response Time: ${data.metrics.response_time.values.avg.toFixed(2)}ms\n95th Percentile: ${data.metrics.response_time.values['p(95)'].toFixed(2)}ms\nMax Response Time: ${data.metrics.response_time.values.max.toFixed(2)}ms\n    `,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/tests/k6/smoke.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/ECONEURA-IA/tools/progress/audit.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[709,796],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from \"node:fs\";\n\n// Configuración hardcodeada para evitar dependencias\nconst cfg = {\n  weights: {\n    infra: 8,\n    observability: 7,\n    cicd: 7,\n    api: 10,\n    webcfg: 5,\n    security: 8,\n    data: 8,\n    typecheck: 7,\n    erp: 12,\n    crm: 8,\n    cockpit: 7,\n    agents: 5,\n    qa: 4,\n    releases: 4\n  }\n};\nconst s = JSON.parse(fs.readFileSync(\".artifacts/metrics.json\", \"utf8\"));\n\nconst weights = cfg.weights;\nconst sumW = Object.values(weights).reduce((a, b) => a + b, 0);\n\nconst areas = {};\nfor (const k of Object.keys(weights)) {\n  areas[k] = Math.max(0, Math.min(1, s[k] ?? 0));\n}\n\nconst pct = Object.entries(weights).reduce(\n  (acc, [k, w]) => acc + (areas[k] * w),\n  0\n) / sumW * 100;\n\nconsole.log(JSON.stringify({ ok: true, pct: Number(pct.toFixed(1)), areas }, null, 2));\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
