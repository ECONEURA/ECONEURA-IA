# üö® REVISI√ìN EXHAUSTIVA DEL REPOSITORIO ECONEURA-IA
# Fecha: $(date)
# Prop√≥sito: Identificar y corregir TODOS los errores posibles

echo "üîç INICIANDO REVISI√ìN EXHAUSTIVA DEL REPOSITORIO..."
echo "=================================================="

# ============================================================================
# 1. VERIFICACI√ìN DE SINTAXIS Y TIPOS
# ============================================================================

echo ""
echo "1Ô∏è‚É£ VERIFICACI√ìN DE SINTAXIS Y TIPOS"
echo "==================================="

# Verificar sintaxis JSON en todos los archivos de configuraci√≥n
echo "üìÑ Verificando archivos JSON..."
find . -name "*.json" -not -path "./node_modules/*" -not -path "./.next/*" -not -path "./.git/*" | while read file; do
    if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
        echo "‚ùå ERROR: Sintaxis JSON inv√°lida en $file"
        exit 1
    else
        echo "‚úÖ $file - OK"
    fi
done

# Verificar sintaxis YAML
echo ""
echo "üìÑ Verificando archivos YAML..."
find . -name "*.yml" -o -name "*.yaml" | while read file; do
    if command -v yamllint > /dev/null 2>&1; then
        if ! yamllint "$file" > /dev/null 2>&1; then
            echo "‚ùå ERROR: Sintaxis YAML inv√°lida en $file"
            exit 1
        fi
    else
        echo "‚ö†Ô∏è yamllint no instalado, saltando verificaci√≥n YAML"
    fi
done

# Verificar TypeScript
echo ""
echo "üî∑ Verificando TypeScript..."
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm typecheck 2>/dev/null; then
        echo "‚ùå ERROR: Errores de TypeScript detectados"
        pnpm typecheck
        exit 1
    else
        echo "‚úÖ TypeScript - OK"
    fi
else
    echo "‚ö†Ô∏è pnpm no disponible, verificando con tsc si existe"
    if command -v tsc > /dev/null 2>&1; then
        if ! npx tsc --noEmit 2>/dev/null; then
            echo "‚ùå ERROR: Errores de TypeScript detectados"
            exit 1
        else
            echo "‚úÖ TypeScript - OK"
        fi
    else
        echo "‚ö†Ô∏è TypeScript compiler no disponible, saltando verificaci√≥n"
    fi
fi

# ============================================================================
# 2. LINTING Y FORMATEO
# ============================================================================

echo ""
echo "2Ô∏è‚É£ LINTING Y FORMATEO"
echo "====================="

# Ejecutar ESLint
echo "üîç Ejecutando ESLint..."
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm lint 2>/dev/null; then
        echo "‚ùå ERROR: Errores de ESLint detectados"
        pnpm lint
        exit 1
    else
        echo "‚úÖ ESLint - OK"
    fi
else
    echo "‚ö†Ô∏è pnpm no disponible, verificando con npx si existe"
    if command -v npx > /dev/null 2>&1; then
        if ! npx eslint . --ext .ts,.tsx,.js,.jsx 2>/dev/null; then
            echo "‚ùå ERROR: Errores de ESLint detectados"
            exit 1
        else
            echo "‚úÖ ESLint - OK"
        fi
    else
        echo "‚ö†Ô∏è ESLint no disponible, saltando verificaci√≥n"
    fi
fi

# Verificar formateo con Prettier
echo ""
echo "üé® Verificando formateo con Prettier..."
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm format:check 2>/dev/null; then
        echo "‚ùå ERROR: Archivos no formateados correctamente"
        echo "üîß Ejecutando formateo autom√°tico..."
        pnpm format
        echo "‚úÖ Formateo aplicado"
    else
        echo "‚úÖ Prettier - OK"
    fi
else
    echo "‚ö†Ô∏è pnpm no disponible, verificando con npx si existe"
    if command -v npx > /dev/null 2>&1; then
        if ! npx prettier --check . 2>/dev/null; then
            echo "‚ùå ERROR: Archivos no formateados correctamente"
            echo "üîß Ejecutando formateo autom√°tico..."
            npx prettier --write .
            echo "‚úÖ Formateo aplicado"
        else
            echo "‚úÖ Prettier - OK"
        fi
    else
        echo "‚ö†Ô∏è Prettier no disponible, saltando verificaci√≥n"
    fi
fi

# ============================================================================
# 3. TESTS
# ============================================================================

echo ""
echo "3Ô∏è‚É£ EJECUCI√ìN DE TESTS"
echo "==================="

# Ejecutar tests unitarios
echo "üß™ Ejecutando tests unitarios..."
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm test:unit 2>/dev/null; then
        echo "‚ùå ERROR: Tests unitarios fallidos"
        exit 1
    else
        echo "‚úÖ Tests unitarios - OK"
    fi
else
    echo "‚ö†Ô∏è pnpm no disponible, verificando con npx si existe"
    if command -v npx > /dev/null 2>&1; then
        if ! npx vitest run --config vitest.config.ts 2>/dev/null; then
            echo "‚ùå ERROR: Tests unitarios fallidos"
            exit 1
        else
            echo "‚úÖ Tests unitarios - OK"
        fi
    else
        echo "‚ö†Ô∏è Vitest no disponible, saltando tests unitarios"
    fi
fi

# Ejecutar tests de integraci√≥n
echo ""
echo "üîó Ejecutando tests de integraci√≥n..."
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm test:integration 2>/dev/null; then
        echo "‚ùå ERROR: Tests de integraci√≥n fallidos"
        exit 1
    else
        echo "‚úÖ Tests de integraci√≥n - OK"
    fi
else
    echo "‚ö†Ô∏è pnpm no disponible, verificando con npx si existe"
    if command -v npx > /dev/null 2>&1 && [ -f "vitest.integration.config.ts" ]; then
        if ! npx vitest run --config vitest.integration.config.ts 2>/dev/null; then
            echo "‚ùå ERROR: Tests de integraci√≥n fallidos"
            exit 1
        else
            echo "‚úÖ Tests de integraci√≥n - OK"
        fi
    else
        echo "‚ö†Ô∏è Configuraci√≥n de tests de integraci√≥n no disponible"
    fi
fi

# Ejecutar tests E2E (si est√°n configurados)
echo ""
echo "üåê Verificando tests E2E..."
if pnpm test:e2e 2>/dev/null; then
    echo "‚úÖ Tests E2E - OK"
else
    echo "‚ö†Ô∏è Tests E2E no ejecutados (posiblemente requieren configuraci√≥n adicional)"
fi

# ============================================================================
# 4. DEPENDENCIAS Y SEGURIDAD
# ============================================================================

echo ""
echo "4Ô∏è‚É£ DEPENDENCIAS Y SEGURIDAD"
echo "=========================="

# Verificar dependencias desactualizadas
echo "üì¶ Verificando dependencias desactualizadas..."
if command -v pnpm > /dev/null 2>&1; then
    pnpm outdated || true
else
    echo "‚ö†Ô∏è pnpm no disponible para verificar dependencias"
fi

# Verificar vulnerabilidades de seguridad
echo ""
echo "üîí Verificando vulnerabilidades de seguridad..."
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm audit 2>/dev/null; then
        echo "‚ùå ERROR: Vulnerabilidades de seguridad detectadas"
        exit 1
    else
        echo "‚úÖ Auditor√≠a de seguridad - OK"
    fi
elif command -v npm > /dev/null 2>&1; then
    if ! npm audit 2>/dev/null; then
        echo "‚ùå ERROR: Vulnerabilidades de seguridad detectadas"
        exit 1
    else
        echo "‚úÖ Auditor√≠a de seguridad - OK"
    fi
else
    echo "‚ö†Ô∏è Ni pnpm ni npm disponibles para auditor√≠a de seguridad"
fi

# Verificar lockfiles
echo ""
echo "üîê Verificando integridad de lockfiles..."
if [ -f "pnpm-lock.yaml" ]; then
    echo "‚úÖ pnpm-lock.yaml existe"
else
    echo "‚ùå ERROR: pnpm-lock.yaml no encontrado"
    exit 1
fi

# ============================================================================
# 5. CONFIGURACIONES
# ============================================================================

echo ""
echo "5Ô∏è‚É£ CONFIGURACIONES"
echo "================="

# Verificar archivos de configuraci√≥n cr√≠ticos
config_files=(
    ".eslintrc.js"
    ".prettierrc"
    ".editorconfig"
    "tsconfig.json"
    "tsconfig.base.json"
    "vitest.config.ts"
    "next.config.js"
    "docker-compose.dev.yml"
    ".vscode/settings.json"
    ".vscode/launch.json"
    ".vscode/tasks.json"
)

for config in "${config_files[@]}"; do
    if [ -f "$config" ]; then
        echo "‚úÖ $config existe"
    else
        echo "‚ùå ERROR: $config no encontrado"
        exit 1
    fi
done

# Verificar configuraciones de Git
echo ""
echo "üîß Verificando configuraciones de Git..."
if [ -f ".husky/pre-commit" ] && [ -f ".husky/pre-push" ]; then
    echo "‚úÖ Hooks de Husky configurados"
else
    echo "‚ùå ERROR: Hooks de Husky incompletos"
    exit 1
fi

# ============================================================================
# 6. CI/CD Y WORKFLOWS
# ============================================================================

echo ""
echo "6Ô∏è‚É£ CI/CD Y WORKFLOWS"
echo "==================="

# Verificar sintaxis de workflows de GitHub Actions
echo "üîÑ Verificando workflows de GitHub Actions..."
find .github/workflows -name "*.yml" -o -name "*.yaml" | while read workflow; do
    if command -v actionlint > /dev/null 2>&1; then
        if ! actionlint "$workflow" 2>/dev/null; then
            echo "‚ùå ERROR: Problemas en workflow $workflow"
            exit 1
        fi
    else
        echo "‚ö†Ô∏è actionlint no instalado, saltando verificaci√≥n de workflows"
    fi
done

# Verificar dependabot
if [ -f ".github/dependabot.yml" ]; then
    echo "‚úÖ Dependabot configurado"
else
    echo "‚ùå ERROR: Dependabot no configurado"
    exit 1
fi

# ============================================================================
# 7. DOCUMENTACI√ìN
# ============================================================================

echo ""
echo "7Ô∏è‚É£ DOCUMENTACI√ìN"
echo "==============="

# Verificar archivos de documentaci√≥n cr√≠ticos
docs_files=(
    "README.md"
    "README.dev.md"
    "AZURE-DEPLOYMENT.md"
    "docs/architecture.md"
)

for doc in "${docs_files[@]}"; do
    if [ -f "$doc" ]; then
        echo "‚úÖ $doc existe"
    else
        echo "‚ùå ERROR: $doc no encontrado"
        exit 1
    fi
done

# Verificar enlaces en documentaci√≥n (si markdown-link-check est√° disponible)
echo ""
echo "üîó Verificando enlaces en documentaci√≥n..."
if command -v markdown-link-check > /dev/null 2>&1; then
    find . -name "*.md" -not -path "./node_modules/*" | while read file; do
        if ! markdown-link-check "$file" 2>/dev/null; then
            echo "‚ö†Ô∏è Enlaces rotos detectados en $file"
        fi
    done
else
    echo "‚ö†Ô∏è markdown-link-check no instalado, saltando verificaci√≥n de enlaces"
fi

# ============================================================================
# 8. SEGURIDAD ADICIONAL
# ============================================================================

echo ""
echo "8Ô∏è‚É£ SEGURIDAD ADICIONAL"
echo "====================="

# Verificar secrets en c√≥digo
echo "üîê Verificando exposici√≥n de secrets..."
if command -v gitleaks > /dev/null 2>&1; then
    if ! gitleaks detect --verbose --redact 2>/dev/null; then
        echo "‚ùå ERROR: Secrets expuestos detectados"
        exit 1
    else
        echo "‚úÖ No se detectaron secrets expuestos"
    fi
else
    echo "‚ö†Ô∏è gitleaks no instalado, saltando verificaci√≥n de secrets"
fi

# Verificar permisos de archivos
echo ""
echo "üìÅ Verificando permisos de archivos..."
if find . -name "*.sh" -not -executable | grep -q .; then
    echo "‚ùå ERROR: Scripts sin permisos de ejecuci√≥n"
    exit 1
else
    echo "‚úÖ Permisos de archivos correctos"
fi

# ============================================================================
# 9. PERFORMANCE Y OPTIMIZACIONES
# ============================================================================

echo ""
echo "9Ô∏è‚É£ PERFORMANCE Y OPTIMIZACIONES"
echo "==============================="

# Verificar tama√±o del bundle (si es posible)
echo "üì¶ Verificando tama√±o del proyecto..."
project_size=$(du -sh . --exclude=node_modules --exclude=.git --exclude=.next 2>/dev/null | cut -f1)
echo "üìä Tama√±o del proyecto: $project_size"

# Verificar archivos grandes
echo ""
echo "üîç Buscando archivos grandes (>10MB)..."
find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
    echo "‚ö†Ô∏è Archivo grande encontrado: $file"
done

# ============================================================================
# 10. INTERNACIONALIZACI√ìN
# ============================================================================

echo ""
echo "üî† INTERNACIONALIZACI√ìN"
echo "======================"

# Verificar archivos de traducciones
if [ -d "apps/web/messages" ]; then
    echo "‚úÖ Directorio de traducciones existe"
    if [ -f "apps/web/messages/es.json" ] && [ -f "apps/web/messages/en.json" ]; then
        echo "‚úÖ Archivos de traducci√≥n ES/EN existen"
    else
        echo "‚ùå ERROR: Archivos de traducci√≥n incompletos"
        exit 1
    fi
else
    echo "‚ùå ERROR: Directorio de traducciones no encontrado"
    exit 1
fi

# ============================================================================
# 11. VERIFICACI√ìN FINAL
# ============================================================================

echo ""
echo "üèÅ VERIFICACI√ìN FINAL"
echo "==================="

# Verificar que no hay archivos sin commit
echo "üìù Verificando estado de Git..."
if [ -n "$(git status --porcelain)" ]; then
    echo "‚ö†Ô∏è Hay cambios sin commit:"
    git status --short
else
    echo "‚úÖ Repositorio limpio, todos los cambios commiteados"
fi

# Verificar rama actual
current_branch=$(git branch --show-current)
if [ "$current_branch" = "main" ]; then
    echo "‚úÖ En rama principal (main)"
else
    echo "‚ö†Ô∏è No est√°s en la rama main (actual: $current_branch)"
fi

echo ""
echo "üéâ REVISI√ìN EXHAUSTIVA COMPLETADA"
echo "=================================="
echo ""
echo "üìä RESUMEN:"
echo "‚Ä¢ Sintaxis y tipos: Verificado"
echo "‚Ä¢ Linting y formateo: Verificado"
echo "‚Ä¢ Tests: Ejecutados"
echo "‚Ä¢ Dependencias: Auditadas"
echo "‚Ä¢ Configuraciones: Verificadas"
echo "‚Ä¢ CI/CD: Validado"
echo "‚Ä¢ Documentaci√≥n: Comprobada"
echo "‚Ä¢ Seguridad: Auditada"
echo "‚Ä¢ Performance: Analizada"
echo "‚Ä¢ i18n: Verificada"
echo ""
echo "‚úÖ Si no hay errores arriba, el repositorio est√° LIMPIO"

# ============================================================================
# ACCIONES CORRECTIVAS AUTOM√ÅTICAS
# ============================================================================

echo ""
echo "üîß ACCIONES CORRECTIVAS"
echo "======================"

# Si hay archivos sin formatear, formatearlos
if command -v pnpm > /dev/null 2>&1; then
    if ! pnpm format:check 2>/dev/null; then
        echo "üîÑ Aplicando formateo autom√°tico..."
        pnpm format
        echo "‚úÖ Formateo aplicado"
    fi
elif command -v npx > /dev/null 2>&1; then
    if ! npx prettier --check . 2>/dev/null; then
        echo "üîÑ Aplicando formateo autom√°tico..."
        npx prettier --write .
        echo "‚úÖ Formateo aplicado"
    fi
else
    echo "‚ö†Ô∏è Herramientas de formateo no disponibles"
fi

# Si hay cambios sin commit despu√©s del formateo, mostrarlos
if [ -n "$(git status --porcelain)" ]; then
    echo ""
    echo "üìù Cambios generados por la revisi√≥n:"
    git status --short
    echo ""
    echo "üí° Recomendaci√≥n: Revisar y committear los cambios generados"
fi

echo ""
echo "üéØ REVISI√ìN COMPLETADA - REPOSITORIO LISTO PARA PRODUCCI√ìN"
