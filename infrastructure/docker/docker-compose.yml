# ECONEURA Docker Compose - Development Environment
# Mediterranean CRM+ERP+AI System

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: econeura-postgres
    environment:
      POSTGRES_DB: econeura_db
      POSTGRES_USER: econeura_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-econeura_dev_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U econeura_admin -d econeura_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - econeura-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: econeura-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-econeura_redis_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - econeura-network

  # API Server
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: econeura-api
    environment:
      NODE_ENV: development
      PORT: 8080
      DATABASE_URL: postgresql://econeura_admin:${DB_PASSWORD:-econeura_dev_2024}@postgres:5432/econeura_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-econeura_redis_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-econeura_jwt_secret_dev_2024}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - econeura-network

  # Web Frontend
  web:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.web
    container_name: econeura-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-econeura_next_secret_dev_2024}
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - econeura-network

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: econeura-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    restart: unless-stopped
    networks:
      - econeura-network

volumes:
  postgres_data:
    name: econeura-postgres-data
  redis_data:
    name: econeura-redis-data
  api_logs:
    name: econeura-api-logs

networks:
  econeura-network:
    name: econeura-network
    driver: bridge