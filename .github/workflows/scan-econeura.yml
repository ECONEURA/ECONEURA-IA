name: ECONEURA Advanced Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'scripts/**'
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to perform'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - targeted
      target_paths:
        description: 'Specific paths to scan (comma-separated)'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  SCAN_DEPTH: 3
  RISK_THRESHOLD: 7.5

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  intelligence-gathering:
    name: Intelligence Gathering
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      changed-files: ${{ steps.file-changes.outputs.all_changed_files }}
      risk-score: ${{ steps.risk-assessment.outputs.score }}
      scan-targets: ${{ steps.target-selection.outputs.targets }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: file-changes
      uses: tj-actions/changed-files@v41
      with:
        files: |
          apps/**
          packages/**
          scripts/**

    - name: Analyze file changes
      id: change-analysis
      run: |
        echo "📊 Analyzing file changes..."

        CHANGED_FILES="${{ steps.file-changes.outputs.all_changed_files }}"
        CHANGED_COUNT=$(echo "$CHANGED_FILES" | wc -w)

        # Calculate change complexity
        CRITICAL_FILES=$(echo "$CHANGED_FILES" | grep -c "\.env\|config\|security\|auth\|database" || echo "0")
        API_FILES=$(echo "$CHANGED_FILES" | grep -c "routes\|api\|controllers" || echo "0")
        BUSINESS_LOGIC=$(echo "$CHANGED_FILES" | grep -c "services\|business\|core" || echo "0")

        echo "changed-count=$CHANGED_COUNT" >> $GITHUB_OUTPUT
        echo "critical-files=$CRITICAL_FILES" >> $GITHUB_OUTPUT
        echo "api-files=$API_FILES" >> $GITHUB_OUTPUT
        echo "business-logic=$BUSINESS_LOGIC" >> $GITHUB_OUTPUT

    - name: Risk Assessment
      id: risk-assessment
      run: |
        echo "🎯 Calculating risk score..."

        CHANGED_COUNT=${{ steps.change-analysis.outputs.changed-count }}
        CRITICAL_FILES=${{ steps.change-analysis.outputs.critical-files }}
        API_FILES=${{ steps.change-analysis.outputs.api-files }}
        BUSINESS_LOGIC=${{ steps.change-analysis.outputs.business-logic }}

        # Risk calculation algorithm
        BASE_RISK=1
        VOLUME_RISK=$((CHANGED_COUNT / 10))
        CRITICAL_RISK=$((CRITICAL_FILES * 3))
        API_RISK=$((API_FILES * 2))
        BUSINESS_RISK=$((BUSINESS_LOGIC * 1))

        TOTAL_RISK=$((BASE_RISK + VOLUME_RISK + CRITICAL_RISK + API_RISK + BUSINESS_RISK))

        # Cap at 10
        if [ $TOTAL_RISK -gt 10 ]; then
          TOTAL_RISK=10
        fi

        echo "risk-score=$TOTAL_RISK" >> $GITHUB_OUTPUT
        echo "Risk assessment complete: $TOTAL_RISK/10"

    - name: Target Selection
      id: target-selection
      run: |
        echo "🎯 Selecting scan targets..."

        RISK_SCORE=${{ steps.risk-assessment.outputs.score }}
        SCAN_TYPE="${{ github.event.inputs.scan_type || 'full' }}"
        TARGET_PATHS="${{ github.event.inputs.target_paths }}"

        if [ "$SCAN_TYPE" = "quick" ]; then
          TARGETS="apps/api/src,packages/shared/src"
        elif [ "$SCAN_TYPE" = "targeted" ] && [ -n "$TARGET_PATHS" ]; then
          TARGETS="$TARGET_PATHS"
        elif [ "$RISK_SCORE" -ge 7 ]; then
          TARGETS="apps,packages,scripts"
        elif [ "$RISK_SCORE" -ge 4 ]; then
          TARGETS="apps/api,apps/web,packages/shared"
        else
          TARGETS="apps/api/src/routes,packages/shared/src"
        fi

        echo "targets=$TARGETS" >> $GITHUB_OUTPUT
        echo "Selected targets: $TARGETS"

  advanced-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: intelligence-gathering
    strategy:
      fail-fast: false
      matrix:
        scan-type: [sast, dast, dependency, secrets]
        include:
          - scan-type: sast
            name: "Static Application Security Testing"
            timeout: 20
          - scan-type: dast
            name: "Dynamic Application Security Testing"
            timeout: 15
          - scan-type: dependency
            name: "Dependency Vulnerability Scan"
            timeout: 10
          - scan-type: secrets
            name: "Secrets Detection"
            timeout: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # SAST Scan
    - name: SAST Scan with Semgrep
      if: matrix.scan-type == 'sast'
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/security-audit
        output: semgrep-results.json

    - name: Process SAST Results
      if: matrix.scan-type == 'sast'
      run: |
        if [ -f semgrep-results.json ]; then
          CRITICAL=$(jq '.results | map(select(.extra.severity == "ERROR")) | length' semgrep-results.json)
          HIGH=$(jq '.results | map(select(.extra.severity == "WARNING")) | length' semgrep-results.json)

          echo "sast-critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "sast-high=$HIGH" >> $GITHUB_OUTPUT

          if [ "$CRITICAL" -gt 0 ]; then
            echo "🚨 Critical SAST issues found: $CRITICAL"
            exit 1
          fi
        fi

    # DAST Scan
    - name: DAST Scan Setup
      if: matrix.scan-type == 'dast'
      run: |
        echo "🔍 Setting up DAST environment..."
        # Build application for testing
        pnpm build

    - name: Run DAST with OWASP ZAP
      if: matrix.scan-type == 'dast'
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    # Dependency Scan
    - name: Dependency Vulnerability Scan
      if: matrix.scan-type == 'dependency'
      run: |
        echo "🔍 Scanning dependencies..."

        # Run npm audit with detailed output
        pnpm audit --audit-level moderate --json > dependency-scan.json || true

        if [ -f dependency-scan.json ]; then
          VULNERABILITIES=$(jq '.metadata.vulnerabilities // {}' dependency-scan.json)
          CRITICAL=$(echo "$VULNERABILITIES" | jq '.critical // 0')
          HIGH=$(echo "$VULNERABILITIES" | jq '.high // 0')

          echo "dep-critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "dep-high=$HIGH" >> $GITHUB_OUTPUT

          if [ "$CRITICAL" -gt 0 ]; then
            echo "🚨 Critical dependency vulnerabilities: $CRITICAL"
            exit 1
          fi
        fi

    # Secrets Detection
    - name: Secrets Detection with TruffleHog
      if: matrix.scan-type == 'secrets'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Process Scan Results
      if: always()
      run: |
        SCAN_TYPE="${{ matrix.scan-type }}"
        echo "## 🔍 $SCAN_TYPE Scan Results" >> $GITHUB_STEP_SUMMARY

        case $SCAN_TYPE in
          "sast")
            echo "- Critical Issues: ${{ steps.sast.outputs.sast-critical || 0 }}" >> $GITHUB_STEP_SUMMARY
            echo "- High Issues: ${{ steps.sast.outputs.sast-high || 0 }}" >> $GITHUB_STEP_SUMMARY
            ;;
          "dast")
            echo "- Scan completed for application endpoints" >> $GITHUB_STEP_SUMMARY
            ;;
          "dependency")
            echo "- Critical Vulnerabilities: ${{ steps.dependency.outputs.dep-critical || 0 }}" >> $GITHUB_STEP_SUMMARY
            echo "- High Vulnerabilities: ${{ steps.dependency.outputs.dep-high || 0 }}" >> $GITHUB_STEP_SUMMARY
            ;;
          "secrets")
            echo "- Secrets scan completed" >> $GITHUB_STEP_SUMMARY
            ;;
        esac

        echo "" >> $GITHUB_STEP_SUMMARY

  risk-analysis:
    name: Risk Analysis & Recommendations
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [intelligence-gathering, advanced-scan]
    if: always() && !cancelled()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Aggregate Scan Results
      id: aggregate
      run: |
        echo "📊 Aggregating scan results..."

        # This would aggregate results from all scan jobs
        # For now, we'll simulate with basic logic
        RISK_SCORE=${{ needs.intelligence-gathering.outputs.risk-score }}

        # Calculate overall security score based on scan results
        # This is a simplified version - in production you'd aggregate actual results
        OVERALL_SCORE=$((100 - (RISK_SCORE * 10)))

        if [ $OVERALL_SCORE -lt 0 ]; then
          OVERALL_SCORE=0
        fi

        echo "overall-score=$OVERALL_SCORE" >> $GITHUB_OUTPUT

        # Determine risk level
        if [ $OVERALL_SCORE -ge 90 ]; then
          RISK_LEVEL="LOW"
          STATUS="✅"
        elif [ $OVERALL_SCORE -ge 70 ]; then
          RISK_LEVEL="MEDIUM"
          STATUS="⚠️"
        else
          RISK_LEVEL="HIGH"
          STATUS="🚨"
        fi

        echo "risk-level=$RISK_LEVEL" >> $GITHUB_OUTPUT
        echo "status=$STATUS" >> $GITHUB_OUTPUT

    - name: Generate Risk Report
      run: |
        echo "## 🛡️ ECONEURA Security Risk Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Security Score: ${{ steps.aggregate.outputs.overall-score }}/100" >> $GITHUB_STEP_SUMMARY
        echo "### Risk Level: ${{ steps.aggregate.outputs.status }} ${{ steps.aggregate.outputs.risk-level }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Summary:" >> $GITHUB_STEP_SUMMARY
        echo "- **Intelligence Gathering:** Risk Score ${{ needs.intelligence-gathering.outputs.risk-score }}/10" >> $GITHUB_STEP_SUMMARY
        echo "- **Changed Files:** ${{ needs.intelligence-gathering.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Targets:** ${{ needs.intelligence-gathering.outputs.scan-targets }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scans Performed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Static Application Security Testing (SAST)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dynamic Application Security Testing (DAST)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency Vulnerability Scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secrets Detection" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendations:" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.aggregate.outputs.risk-level }}" = "HIGH" ]; then
          echo "- 🚨 **URGENT:** Address critical security issues immediately" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Implement additional security controls" >> $GITHUB_STEP_SUMMARY
          echo "- 👥 Require security team review before merge" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.aggregate.outputs.risk-level }}" = "MEDIUM" ]; then
          echo "- ⚠️ Review and address security findings" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Document any accepted risks" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Consider additional testing for high-risk areas" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ Security posture looks good" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Continue monitoring and maintaining security standards" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Consider proactive security enhancements" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create Security Issue
      if: steps.aggregate.outputs.risk-level == 'HIGH'
      uses: actions/github-script@v7
      with:
        script: |
          const riskScore = ${{ needs.intelligence-gathering.outputs.risk-score }};
          const securityScore = ${{ steps.aggregate.outputs.overall-score }};

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 High Security Risk Detected - Score: ${securityScore}/100`,
            body: `
## High Security Risk Alert

**Risk Score:** ${riskScore}/10
**Security Score:** ${securityScore}/100

### Details
- **Scan Type:** ECONEURA Advanced Scan
- **Triggered by:** ${context.eventName}
- **Branch:** ${context.ref}
- **Commit:** ${context.sha}

### Immediate Actions Required
- [ ] Security team review required
- [ ] Address critical vulnerabilities
- [ ] Implement additional security controls
- [ ] Block deployment until resolved

### Scan Results
See the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for detailed results.

*This issue was automatically created by ECONEURA Security Scan*
            `,
            labels: ['security', 'high-priority', 'auto-generated']
          });

    - name: Fail on High Risk
      if: steps.aggregate.outputs.risk-level == 'HIGH' && env.RISK_THRESHOLD == '7.5'
      run: |
        echo "🚨 High security risk detected. Failing pipeline."
        exit 1
