name: Security Scan & SBOM Generation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  DEPLOY_ENABLED: "false"
  SKIP_RELEASE: "true"

jobs:
  # =============================================================================
  # ANTI-SECRETS SCAN
  # =============================================================================
  anti-secrets-scan:
    name: Anti-Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install security tools
        run: |
          # Install detect-secrets
          pip install detect-secrets
          
          # Install TruffleHog
          wget https://github.com/trufflesecurity/trufflehog/releases/latest/download/trufflehog_3.63.1_linux_amd64.tar.gz
          tar -xzf trufflehog_3.63.1_linux_amd64.tar.gz
          sudo mv trufflehog /usr/local/bin/
          
          # Install GitLeaks
          wget https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run anti-secrets scan
        run: |
          chmod +x scripts/security/anti-secrets-scan.mjs
          node scripts/security/anti-secrets-scan.mjs

      - name: Upload anti-secrets report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: anti-secrets-report
          path: reports/anti-secrets-scan.*

      - name: Comment PR with secrets scan results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = 'reports/anti-secrets-scan.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                let comment = '## 🔐 Anti-Secrets Scan Results\n\n';
                comment += `- **Total Files Scanned**: ${report.summary.scannedFiles}\n`;
                comment += `- **Secrets Found**: ${report.summary.secretsFound}\n`;
                comment += `- **Tools Used**: ${report.summary.toolsUsed.join(', ')}\n`;
                comment += `- **Errors**: ${report.summary.errors}\n\n`;
                
                if (report.summary.secretsFound > 0) {
                  comment += '⚠️ **SECRETS DETECTED** - Please review and remove any hardcoded secrets.\n\n';
                  
                  for (const [patternType, findings] of Object.entries(report.patterns)) {
                    if (findings.length > 0) {
                      comment += `### ${patternType.toUpperCase()}\n`;
                      findings.slice(0, 5).forEach(finding => {
                        comment += `- **${finding.file}**: ${finding.matches} matches\n`;
                      });
                      if (findings.length > 5) {
                        comment += `- ... and ${findings.length - 5} more files\n`;
                      }
                      comment += '\n';
                    }
                  }
                } else {
                  comment += '✅ **No secrets detected** - Code is clean!\n';
                }
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error creating comment:', error);
            }

  # =============================================================================
  # SBOM GENERATION
  # =============================================================================
  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install SBOM tools
        run: |
          # Install CycloneDX
          npm install -g @cyclonedx/cyclonedx-npm
          
          # Install SPDX tools
          npm install -g spdx-sbom-generator
          
          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          chmod +x scripts/security/sbom-generator.mjs
          node scripts/security/sbom-generator.mjs

      - name: Upload SBOM reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-reports
          path: reports/sbom-*

      - name: Comment PR with SBOM results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = 'reports/sbom-report.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                
                let comment = '## 📦 SBOM Generation Results\n\n';
                comment += `- **Total Packages**: ${report.summary.totalPackages}\n`;
                comment += `- **Vulnerabilities**: ${report.summary.vulnerabilities}\n`;
                comment += `- **Licenses**: ${report.summary.licenses}\n`;
                comment += `- **Tools Used**: ${report.summary.toolsUsed.join(', ')}\n`;
                comment += `- **Errors**: ${report.summary.errors}\n\n`;
                
                if (report.summary.vulnerabilities > 0) {
                  comment += '⚠️ **VULNERABILITIES DETECTED** - Please review security issues.\n\n';
                  
                  const bySeverity = {};
                  report.vulnerabilities.forEach(vuln => {
                    const severity = vuln.severity || 'unknown';
                    bySeverity[severity] = (bySeverity[severity] || 0) + 1;
                  });
                  
                  comment += '### Vulnerabilities by Severity\n';
                  Object.entries(bySeverity).forEach(([severity, count]) => {
                    comment += `- **${severity}**: ${count}\n`;
                  });
                  comment += '\n';
                } else {
                  comment += '✅ **No vulnerabilities detected** - Dependencies are secure!\n';
                }
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error creating comment:', error);
            }

  # =============================================================================
  # DEPENDENCY AUDIT
  # =============================================================================
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level=high || true
          
          echo "Generating audit report..."
          pnpm audit --json > reports/pnpm-audit.json || true

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=high || true
          
          echo "Generating npm audit report..."
          npm audit --json > reports/npm-audit.json || true

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-reports
          path: reports/*audit.json

  # =============================================================================
  # SECURITY SUMMARY
  # =============================================================================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [anti-secrets-scan, sbom-generation, dependency-audit]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Anti-secrets scan results
          if [ -f "artifacts/anti-secrets-report/anti-secrets-scan.json" ]; then
            SECRETS_FOUND=$(jq -r '.summary.secretsFound' artifacts/anti-secrets-report/anti-secrets-scan.json)
            echo "### 🔐 Anti-Secrets Scan" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.anti-secrets-scan.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Secrets Found**: $SECRETS_FOUND" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # SBOM generation results
          if [ -f "artifacts/sbom-reports/sbom-report.json" ]; then
            VULNERABILITIES=$(jq -r '.summary.vulnerabilities' artifacts/sbom-reports/sbom-report.json)
            PACKAGES=$(jq -r '.summary.totalPackages' artifacts/sbom-reports/sbom-report.json)
            echo "### 📦 SBOM Generation" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.sbom-generation.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Packages**: $PACKAGES" >> $GITHUB_STEP_SUMMARY
            echo "- **Vulnerabilities**: $VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dependency audit results
          echo "### 🔍 Dependency Audit" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.dependency-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall security status
          if [ "${{ needs.anti-secrets-scan.result }}" = "success" ] && [ "${{ needs.sbom-generation.result }}" = "success" ] && [ "${{ needs.dependency-audit.result }}" = "success" ]; then
            echo "### ✅ Overall Security Status" >> $GITHUB_STEP_SUMMARY
            echo "All security scans completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Overall Security Status" >> $GITHUB_STEP_SUMMARY
            echo "Some security scans failed. Please review the results." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: $GITHUB_STEP_SUMMARY
