name: Deploy to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'infra/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_infrastructure:
        description: 'Skip infrastructure deployment'
        required: false
        default: false
        type: boolean

env:
  AZURE_REGION: 'West Europe'
  RESOURCE_GROUP: 'econeura-rg'

jobs:
  # Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_infrastructure != 'true' }}
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Azure CLI
      uses: azure/setup-azure-cli@v2
      with:
        version: 'latest'
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Bicep
      run: |
        az bicep install
        az bicep version
    
    - name: Deploy Infrastructure
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        
        # Deploy infrastructure using Bicep
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file infra/main.bicep \
          --parameters \
            environment=$ENVIRONMENT \
            location=${{ env.AZURE_REGION }} \
            domainName=${{ secrets.DOMAIN_NAME }} \
            enableFrontDoor=true \
            enableACR=true \
            enableKeyVault=true \
            enableAppInsights=true \
            enablePostgreSQL=true \
            enableFunctions=true \
            enableContainerApps=true \
          --verbose
        
        # Get deployment outputs
        DEPLOYMENT_OUTPUTS=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name main \
          --query properties.outputs \
          --output json)
        
        # Set outputs for next jobs
        echo "ACR_LOGIN_SERVER=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.acrLoginServer.value')" >> $GITHUB_ENV
        echo "KEY_VAULT_NAME=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.keyVaultName.value')" >> $GITHUB_ENV
        echo "APP_INSIGHTS_CONNECTION_STRING=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.appInsightsConnectionString.value')" >> $GITHUB_ENV
        echo "POSTGRES_SERVER_FQDN=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.postgresServerFqdn.value')" >> $GITHUB_ENV
        echo "API_URL=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.apiUrl.value')" >> $GITHUB_ENV
        echo "WEB_URL=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.webUrl.value')" >> $GITHUB_ENV
        echo "FRONT_DOOR_URL=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.frontDoorUrl.value')" >> $GITHUB_ENV
        echo "API_FRONT_DOOR_URL=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.apiFrontDoorUrl.value')" >> $GITHUB_ENV

  # Build and Push Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Azure CLI
      uses: azure/setup-azure-cli@v2
      with:
        version: 'latest'
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '9'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build applications
      run: pnpm build
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/api
        file: ./apps/api/Dockerfile
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/econeura-api:${{ github.sha }}
          ${{ env.ACR_LOGIN_SERVER }}/econeura-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        file: ./apps/web/Dockerfile
        push: true
        tags: |
          ${{ env.ACR_LOGIN_SERVER }}/econeura-web:${{ github.sha }}
          ${{ env.ACR_LOGIN_SERVER }}/econeura-web:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Deploy Applications
  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Azure CLI
      uses: azure/setup-azure-cli@v2
      with:
        version: 'latest'
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy API Container App
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        RESOURCE_PREFIX="econeura-${ENVIRONMENT}"
        
        # Update API Container App with new image
        az containerapp update \
          --name "${RESOURCE_PREFIX}api" \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image "${{ env.ACR_LOGIN_SERVER }}/econeura-api:${{ github.sha }}" \
          --set-env-vars \
            NODE_ENV=$ENVIRONMENT \
            PGHOST=${{ env.POSTGRES_SERVER_FQDN }} \
            PGUSER=econeura_admin \
            PGDATABASE=econeura \
            PGPORT=5432 \
            APPLICATIONINSIGHTS_CONNECTION_STRING="${{ env.APP_INSIGHTS_CONNECTION_STRING }}" \
            MISTRAL_BASE_URL=${{ secrets.MISTRAL_BASE_URL }} \
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }} \
            AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }} \
            AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }} \
            MAKE_WEBHOOK_HMAC_SECRET=${{ secrets.MAKE_WEBHOOK_HMAC_SECRET }} \
            MAKE_ALLOWED_IPS=${{ secrets.MAKE_ALLOWED_IPS }}
    
    - name: Deploy Web Container App
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        RESOURCE_PREFIX="econeura-${ENVIRONMENT}"
        
        # Update Web Container App with new image
        az containerapp update \
          --name "${RESOURCE_PREFIX}web" \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image "${{ env.ACR_LOGIN_SERVER }}/econeura-web:${{ github.sha }}" \
          --set-env-vars \
            NODE_ENV=$ENVIRONMENT \
            NEXT_PUBLIC_API_URL="${{ env.API_URL }}"
    
    - name: Deploy Azure Functions
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        RESOURCE_PREFIX="econeura-${ENVIRONMENT}"
        
        # Deploy Functions app
        az functionapp deployment source config-zip \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name "${RESOURCE_PREFIX}func" \
          --src ./apps/workers/dist/workers.zip \
          --build-remote true

  # Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-applications]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '9'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run database migrations
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        
        # Set database environment variables
        export PGHOST="${{ env.POSTGRES_SERVER_FQDN }}"
        export PGUSER="econeura_admin"
        export PGPASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
        export PGDATABASE="econeura"
        export PGPORT="5432"
        
        # Run migrations
        pnpm db:migrate
        
        # Seed database if it's a new environment
        if [ "$ENVIRONMENT" = "dev" ] || [ "$ENVIRONMENT" = "staging" ]; then
          pnpm db:seed
        fi

  # Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-applications, database-migration]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '9'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run smoke tests
      run: |
        # Test API health endpoint
        echo "Testing API health endpoint..."
        curl -f "${{ env.API_URL }}/health" || exit 1
        
        # Test Web application
        echo "Testing Web application..."
        curl -f "${{ env.WEB_URL }}" || exit 1
        
        # Test Front Door (if enabled)
        if [ "${{ env.FRONT_DOOR_URL }}" != "null" ]; then
          echo "Testing Front Door..."
          curl -f "${{ env.FRONT_DOOR_URL }}" || exit 1
        fi
        
        echo "✅ All smoke tests passed!"

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-applications, database-migration]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    if: ${{ github.event.inputs.environment == 'prod' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '9'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run performance tests
      run: |
        # Set environment variables for performance tests
        export API_URL="${{ env.API_URL }}"
        export WEB_URL="${{ env.WEB_URL }}"
        
        # Run performance tests
        pnpm test:performance
        
        # Upload performance results
        if [ -f "./performance-results/summary.json" ]; then
          echo "Performance test results:"
          cat ./performance-results/summary.json
        fi

  # Notify Deployment
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [smoke-tests, performance-tests]
    if: always()
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Deployment Summary
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **API:** ${{ env.API_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Web:** ${{ env.WEB_URL }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.FRONT_DOOR_URL }}" != "null" ]; then
          echo "- **Front Door:** ${{ env.FRONT_DOOR_URL }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Smoke Tests:** ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
        if [ "$ENVIRONMENT" = "prod" ]; then
          echo "- **Performance Tests:** ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Infrastructure" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group:** ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region:** ${{ env.AZURE_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Registry:** ${{ env.ACR_LOGIN_SERVER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Key Vault:** ${{ env.KEY_VAULT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PostgreSQL:** ${{ env.POSTGRES_SERVER_FQDN }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify Teams (if production)
      if: ${{ github.event.inputs.environment == 'prod' && needs.smoke-tests.result == 'success' }}
      run: |
        # Send notification to Teams webhook
        curl -H "Content-Type: application/json" \
          -d '{
            "text": "🎉 **ECONEURA Production Deployment Successful!**\n\n'\
            '**Environment:** Production\n'\
            '**Commit:** ${{ github.sha }}\n'\
            '**API:** ${{ env.API_URL }}\n'\
            '**Web:** ${{ env.WEB_URL }}\n'\
            '**Front Door:** ${{ env.FRONT_DOOR_URL }}\n\n'\
            'All smoke tests passed! 🚀"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}
