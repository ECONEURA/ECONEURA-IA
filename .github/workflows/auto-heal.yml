---
name: Auto-Heal CI

"on":
  workflow_run:
    types: [completed]

jobs:
  auto-rerun-once:
    name: Re-run once on failure
    if: >-
      ${{ github.event.workflow_run.name != 'Auto-Heal CI' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.run_attempt == 1 }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Re-run failed workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.payload.workflow_run.id;
            await github.request(
              'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun',
              { owner, repo, run_id }
            );

  open-issue-after-second-failure:
    name: Open issue after second failure
    if: >-
      ${{ github.event.workflow_run.name != 'Auto-Heal CI' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.run_attempt >= 2 }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Create tracking issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const run = context.payload.workflow_run;
            const title = `CI failed twice: ${run.name} #${run.run_number}`;
            const body = [
              `Workflow: ${run.name}`,
              `Run URL: ${run.html_url}`,
              `Event: ${run.event}`,
              `Branch: ${run.head_branch}`,
              `Commit: ${run.head_commit?.id || ''}`,
              '',
              'Este issue se abrió automáticamente tras dos fallos ' +
              'consecutivos.'
            ].join('\n');

            try {
              await github.rest.issues.create({
                owner, repo, title, body, labels: ['ci', 'failed']
              });
            } catch (e) {
              // Si las etiquetas no existen, crea el issue sin labels
              await github.rest.issues.create({ owner, repo, title, body });
            }
