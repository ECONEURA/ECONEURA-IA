name: oidc-setup-and-deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEPLOY_ENABLED: "false"  # Always false to prevent actual deployment

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      can-deploy: ${{ steps.check-deploy.outputs.can-deploy }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check deployment prerequisites
      id: check-deploy
      run: |
        echo "Checking deployment prerequisites..."

        CAN_DEPLOY="false"

        # Check if deployment is enabled
        if [ "$DEPLOY_ENABLED" = "true" ]; then
          echo "DEPLOY_ENABLED is true"

          # Check for required secrets
          if [ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ] && [ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "Azure OIDC secrets are configured"
            CAN_DEPLOY="true"
          else
            echo "Azure OIDC secrets are missing"
            exit 1
          fi
        else
          echo "Deployment disabled by DEPLOY_ENABLED=false"
        fi

        echo "can-deploy=$CAN_DEPLOY" >> $GITHUB_OUTPUT
        echo "Deployment check: $CAN_DEPLOY"
    
    - name: Setup Azure CLI
      if: steps.check-deploy.outputs.can-deploy == 'true'
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

        # Verify installation
        az version

    - name: Azure Login via OIDC
      if: steps.check-deploy.outputs.can-deploy == 'true'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Verify Azure access
      if: steps.check-deploy.outputs.can-deploy == 'true'
      run: |
        az account show
        az group list --query "[0].name" -o tsv

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.can-deploy == 'true'

    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build for production
      run: |
        pnpm build

        # Verify build artifacts
        if [ -d "dist/" ] || [ -d ".next/" ]; then
          echo "Build artifacts found"
        else
          echo "No build artifacts found"
          exit 1
        fi

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy to Azure
      run: |
        echo "Starting deployment to Azure Container Apps..."

        if [ "$DEPLOY_ENABLED" = "true" ]; then
          # Deploy to Azure Container Apps
          az containerapp update \
            --name econeura-api \
            --resource-group econeura-rg \
            --image econeura/api:latest
        else
          echo "Deployment skipped - DEPLOY_ENABLED is false"
          exit 1
        fi

    - name: Deployment summary
      run: |
        echo "=== Deployment Summary ==="
        echo "Status: Completed successfully"
        echo "DEPLOY_ENABLED: $DEPLOY_ENABLED"
        echo "Environment: production"