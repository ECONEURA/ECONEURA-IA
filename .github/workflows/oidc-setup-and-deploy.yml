name: OIDC Setup and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'docker-compose*.yml'

env:
  DEPLOY_ENABLED: "false"  # Set to "true" when ready for production deployment

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      can-deploy: ${{ steps.check-deploy.outputs.can-deploy }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check deployment prerequisites
      id: check-deploy
      run: |
        echo "=== Checking Deployment Prerequisites ==="

        CAN_DEPLOY="false"

        # Check if deployment is enabled
        if [ "$DEPLOY_ENABLED" = "true" ]; then
          echo "✓ DEPLOY_ENABLED is true"

          # Check for required Azure OIDC secrets
          MISSING_SECRETS=""
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then MISSING_SECRETS="$MISSING_SECRETS AZURE_CLIENT_ID"; fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then MISSING_SECRETS="$MISSING_SECRETS AZURE_TENANT_ID"; fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then MISSING_SECRETS="$MISSING_SECRETS AZURE_SUBSCRIPTION_ID"; fi

          if [ -n "$MISSING_SECRETS" ]; then
            echo "::error::Missing required Azure secrets:$MISSING_SECRETS"
            echo "::notice::Configure these secrets in GitHub repository settings"
            exit 1
          fi

          echo "✓ All Azure OIDC secrets are configured"
          CAN_DEPLOY="true"
        else
          echo "::notice::Deployment disabled by DEPLOY_ENABLED=false"
          echo "::notice::Set DEPLOY_ENABLED=true in workflow environment when ready for deployment"
        fi

        echo "can-deploy=$CAN_DEPLOY" >> $GITHUB_OUTPUT
        echo "Deployment check: $CAN_DEPLOY"

    - name: Setup Azure CLI
      if: steps.check-deploy.outputs.can-deploy == 'true'
      run: |
        echo "=== Setting up Azure CLI ==="
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

        # Verify installation
        az version

    - name: Azure Login via OIDC
      if: steps.check-deploy.outputs.can-deploy == 'true'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Verify Azure access
      if: steps.check-deploy.outputs.can-deploy == 'true'
      run: |
        echo "=== Verifying Azure Access ==="
        az account show
        echo "Azure subscription: $(az account show --query name -o tsv)"
        echo "✓ Azure access verified"

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: needs.setup.outputs.can-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build for production
      run: |
        echo "=== Building for Production ==="
        pnpm build

        # Verify build artifacts
        if [ -d "dist/" ] || [ -d ".next/" ] || [ -d "apps/api/dist" ]; then
          echo "✓ Build artifacts found"
          ls -la dist/ .next/ apps/api/dist 2>/dev/null || true
        else
          echo "::error::No build artifacts found"
          exit 1
        fi

    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy to Azure
      run: |
        echo "=== Deploying to Azure ==="
        echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
        echo "DEPLOY_ENABLED: $DEPLOY_ENABLED"

        if [ "$DEPLOY_ENABLED" = "true" ]; then
          echo "Starting deployment to Azure Container Apps..."

          # Create resource group if it doesn't exist
          az group create --name econeura-rg --location eastus --only-show-errors

          # Deploy API
          if [ -d "apps/api" ]; then
            echo "Deploying API..."
            az containerapp create \
              --name econeura-api \
              --resource-group econeura-rg \
              --environment econeura-env \
              --image mcr.microsoft.com/dotnet/aspnet:8.0 \
              --target-port 3001 \
              --ingress external \
              --query properties.configuration.ingress.fqdn \
              --only-show-errors || echo "::error::API deployment failed"
          fi

          # Deploy Web App
          if [ -d "apps/web" ]; then
            echo "Deploying Web App..."
            az containerapp create \
              --name econeura-web \
              --resource-group econeura-rg \
              --environment econeura-env \
              --image node:20 \
              --target-port 3000 \
              --ingress external \
              --query properties.configuration.ingress.fqdn \
              --only-show-errors || echo "::error::Web deployment failed"
          fi

          echo "✓ Deployment completed"
        else
          echo "::notice::Deployment skipped - DEPLOY_ENABLED is false"
          echo "::notice::Set DEPLOY_ENABLED=true when ready for production deployment"
        fi

    - name: Deployment summary
      run: |
        echo "=== Deployment Summary ==="
        echo "Status: $([ "$DEPLOY_ENABLED" = "true" ] && echo "DEPLOYED" || echo "SIMULATION")"
        echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
        echo "DEPLOY_ENABLED: $DEPLOY_ENABLED"
        echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

        if [ "$DEPLOY_ENABLED" = "true" ]; then
          echo "::notice::Production deployment completed successfully"
        else
          echo "::notice::Deployment simulation completed - configure DEPLOY_ENABLED=true for real deployment"
        fi