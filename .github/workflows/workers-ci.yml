name: Workers CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/workers/**'
      - 'packages/shared/**'
      - '.github/workflows/workers-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/workers/**'
      - 'packages/shared/**'
      - '.github/workflows/workers-ci.yml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  DEPLOY_ENABLED: "false"
  SKIP_RELEASE: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Workers
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint workers
        run: pnpm --filter @econeura/workers lint

      - name: Type check workers
        run: pnpm --filter @econeura/workers typecheck

      - name: Run unit tests
        run: pnpm --filter @econeura/workers test
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run integration tests
        run: pnpm --filter @econeura/workers test:integration
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Generate test coverage
        run: pnpm --filter @econeura/workers test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/workers/coverage/lcov.info
          flags: workers
          name: workers-coverage

  build:
    name: Build Workers
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build workers
        run: pnpm --filter @econeura/workers build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: workers-build
          path: apps/workers/dist/

  load-test:
    name: Load Test Workers
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build workers
        run: pnpm --filter @econeura/workers build

      - name: Start workers in background
        run: |
          cd apps/workers
          pnpm start &
          WORKERS_PID=$!
          echo "WORKERS_PID=$WORKERS_PID" >> $GITHUB_ENV
          sleep 10
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3001

      - name: Wait for workers to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3001/health; then
              echo "Workers are ready"
              break
            fi
            echo "Waiting for workers... ($i/30)"
            sleep 2
          done

      - name: Run load tests
        run: |
          cd apps/workers
          k6 run tests/load-test.js
        env:
          BASE_URL: http://localhost:3001

      - name: Run stress tests
        run: |
          cd apps/workers
          k6 run tests/stress-test.js
        env:
          BASE_URL: http://localhost:3001

      - name: Stop workers
        run: kill ${{ env.WORKERS_PID }}

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: apps/workers/load-test-results.json

      - name: Upload stress test results
        uses: actions/upload-artifact@v3
        with:
          name: stress-test-results
          path: apps/workers/stress-test-results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, load-test, security-scan]
    if: env.DEPLOY_ENABLED == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: workers-build
          path: apps/workers/dist/

      - name: Deploy to staging
        run: |
          echo "Deploying workers to staging environment..."
          # Add your staging deployment commands here
          # Example: docker build, kubectl apply, etc.

      - name: Run smoke tests
        run: |
          # Add smoke tests for staging deployment
          curl -f https://staging-workers.econeura.com/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, load-test, security-scan]
    if: env.DEPLOY_ENABLED == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: workers-build
          path: apps/workers/dist/

      - name: Deploy to production
        run: |
          echo "Deploying workers to production environment..."
          # Add your production deployment commands here
          # Example: docker build, kubectl apply, etc.

      - name: Run production smoke tests
        run: |
          # Add smoke tests for production deployment
          curl -f https://workers.econeura.com/health

      - name: Notify deployment
        run: |
          echo "Workers deployed successfully to production!"
          # Add notification logic (Slack, email, etc.)

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Setup monitoring
        run: |
          echo "Setting up performance monitoring..."
          # Add monitoring setup (Prometheus, Grafana, etc.)

      - name: Configure alerts
        run: |
          echo "Configuring performance alerts..."
          # Add alert configuration
