# ECONEURA Infrastructure Deployment
# Dedicated workflow for Azure infrastructure provisioning

name: 'Infrastructure Deployment'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - validate

env:
  AZURE_RESOURCE_GROUP: 'econeura-${{ github.event.inputs.environment }}-rg'
  AZURE_LOCATION: 'West Europe'

jobs:
  validate-infrastructure:
    name: 'Validate Infrastructure'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'validate' || github.event.inputs.action == 'deploy'
    timeout-minutes: 10
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', upper(github.event.inputs.environment))] }}

      - name: 'Validate Bicep Template'
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./infrastructure/azure/bicep/main.bicep
          parameters: ./infrastructure/azure/bicep/parameters.${{ github.event.inputs.environment }}.json
          deploymentMode: 'Validate'

      - name: 'What-If Analysis'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az deployment group what-if \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --template-file ./infrastructure/azure/bicep/main.bicep \
              --parameters ./infrastructure/azure/bicep/parameters.${{ github.event.inputs.environment }}.json

  deploy-infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    if: github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 45
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', upper(github.event.inputs.environment))] }}

      - name: 'Create Resource Group'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create \
              --name ${{ env.AZURE_RESOURCE_GROUP }} \
              --location "${{ env.AZURE_LOCATION }}" \
              --tags Environment=${{ github.event.inputs.environment }} \
                     Project=ECONEURA \
                     CreatedBy=GitHub-Actions \
                     CreatedAt=$(date -u +%Y-%m-%dT%H:%M:%SZ)

      - name: 'Deploy Infrastructure'
        uses: azure/arm-deploy@v1
        id: deploy
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./infrastructure/azure/bicep/main.bicep
          parameters: ./infrastructure/azure/bicep/parameters.${{ github.event.inputs.environment }}.json
          failOnStdErr: false

      - name: 'Output Deployment Results'
        run: |
          echo "Deployment completed successfully!"
          echo "Web App URL: ${{ steps.deploy.outputs.webAppUrl }}"
          echo "API App URL: ${{ steps.deploy.outputs.apiAppUrl }}"
          echo "Key Vault: ${{ steps.deploy.outputs.keyVaultName }}"
          echo "Database Host: ${{ steps.deploy.outputs.postgresHost }}"

      - name: 'Configure App Settings'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Configure CORS for web app
            az webapp cors add \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name econeura-${{ github.event.inputs.environment }}-*-web \
              --allowed-origins "*"
            
            # Enable detailed logging
            az webapp log config \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name econeura-${{ github.event.inputs.environment }}-*-api \
              --web-server-logging filesystem \
              --detailed-error-messages true \
              --failed-request-tracing true

      - name: 'Test Infrastructure'
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Test database connectivity
          echo "Testing database connectivity..."
          
          # Test Key Vault access
          echo "Testing Key Vault access..."
          
          echo "‚úÖ Infrastructure tests passed"

  destroy-infrastructure:
    name: 'Destroy Infrastructure'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 30
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', upper(github.event.inputs.environment))] }}

      - name: 'Confirm Destruction'
        run: |
          echo "‚ö†Ô∏è  WARNING: This will destroy all resources in ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Proceeding with destruction in 10 seconds..."
          sleep 10

      - name: 'Backup Critical Data'
        if: github.event.inputs.environment == 'prod'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create final backup before destruction
            az postgres flexible-server backup create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --server-name econeura-${{ github.event.inputs.environment }}-*-postgres \
              --backup-name "final-backup-$(date +%Y%m%d%H%M%S)"

      - name: 'Delete Resource Group'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group delete \
              --name ${{ env.AZURE_RESOURCE_GROUP }} \
              --yes \
              --no-wait

      - name: 'Confirm Destruction'
        run: |
          echo "üóëÔ∏è  Resource group ${{ env.AZURE_RESOURCE_GROUP }} destruction initiated"
          echo "This process will complete in the background"