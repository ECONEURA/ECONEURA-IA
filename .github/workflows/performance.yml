name: Performance Testing

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: true
        default: 'load'
        type: choice
        options:
        - load
        - chaos
        - both
      base_url:
        description: 'Base URL for testing'
        required: false
        default: 'http://localhost:3001'
        type: string
      max_vus:
        description: 'Maximum virtual users'
        required: false
        default: '20'
        type: string

env:
  K6_BASE_URL: ${{ github.event.inputs.base_url || 'http://localhost:3001' }}
  K6_MAX_VUS: ${{ github.event.inputs.max_vus || '20' }}
  K6_DURATION: '5m'
  K6_RAMP_DURATION: '2m'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup and build
  setup:
    name: Setup Performance Environment
    runs-on: ubuntu-latest
    outputs:
      test_type: ${{ steps.setup.outputs.test_type }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test parameters
        id: setup
        run: |
          TEST_TYPE="${{ github.event.inputs.test_type || 'both' }}"
          echo "test_type=${TEST_TYPE}" >> $GITHUB_OUTPUT
          echo "Running performance tests: ${TEST_TYPE}"
          
      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg software-properties-common
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          k6 version

  # Load testing
  load-test:
    name: K6 Load Testing  
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.test_type == 'load' || needs.setup.outputs.test_type == 'both' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg software-properties-common
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          
      - name: Setup Node.js and dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - run: corepack enable && corepack prepare pnpm@9.12.2 --activate
      
      - name: Start services for testing
        run: |
          echo "Would start services here for local testing"
          echo "For now, testing against external endpoints or mocked responses"
          
      - name: Run k6 Load Tests (with retry)
        run: |
          mkdir -p performance-results .artifacts
          for i in {1..2}; do
            k6 run tests/k6/load-test.js \
              --out json=performance-results/load-test-results.json \
              --summary-export .artifacts/k6-summary.json \
              --env K6_BASE_URL="${{ env.K6_BASE_URL }}" \
              --env K6_MAX_VUS="${{ env.K6_MAX_VUS }}" \
              --summary-trend-stats="avg,min,med,max,p(90),p(95),p(99)" \
              --summary-time-unit=ms && break
            echo "k6 load test attempt $i failed, retrying..."
            sleep 10
          done
            
      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            performance-results/load-test-results.json
            .artifacts/k6-summary.json
          retention-days: 30

  # Chaos testing  
  chaos-test:
    name: K6 Chaos Testing
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.test_type == 'chaos' || needs.setup.outputs.test_type == 'both' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg software-properties-common
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          
      - name: Setup Node.js and dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - run: corepack enable && corepack prepare pnpm@9.12.2 --activate
      
      - name: Start services for testing
        run: |
          echo "Would start services here for local testing"
          echo "For now, testing against external endpoints or mocked responses"
          
      - name: Run k6 Chaos Tests (with retry)
        run: |
          mkdir -p performance-results .artifacts
          for i in {1..2}; do
            k6 run tests/k6/chaos-test.js \
              --out json=performance-results/chaos-test-results.json \
              --summary-export .artifacts/k6-chaos-summary.json \
              --env K6_BASE_URL="${{ env.K6_BASE_URL }}" \
              --summary-trend-stats="avg,min,med,max,p(90),p(95),p(99)" \
              --summary-time-unit=ms && break
            echo "k6 chaos test attempt $i failed, retrying..."
            sleep 10
          done
            
      - name: Upload chaos test results
        uses: actions/upload-artifact@v4
        with:
          name: chaos-test-results
          path: |
            performance-results/chaos-test-results.json
            .artifacts/k6-chaos-summary.json
          retention-days: 30

  # Performance analysis and reporting
  performance-analysis:
    name: Performance Analysis & Reporting
    runs-on: ubuntu-latest
    needs: [setup, load-test, chaos-test]
    if: always() && needs.setup.result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download performance artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*test-results"
          path: artifacts/
          merge-multiple: true
        continue-on-error: true
        
      - name: Analyze performance results
        run: |
          echo "## 🚀 Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if results exist and analyze them
          if [ -f "artifacts/load-test-results.json" ]; then
            echo "### 📊 Load Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics from k6 JSON output
            if command -v jq >/dev/null 2>&1; then
              TOTAL_REQS=$(jq -r '.metrics.http_reqs.values.count // "N/A"' artifacts/load-test-results.json)
              AVG_DURATION=$(jq -r '.metrics.http_req_duration.values.avg // "N/A"' artifacts/load-test-results.json)
              P95_DURATION=$(jq -r '.metrics.http_req_duration.values["p(95)"] // "N/A"' artifacts/load-test-results.json)
              ERROR_RATE=$(jq -r '.metrics.http_req_failed.values.rate // "N/A"' artifacts/load-test-results.json)
              
              echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Total Requests | ${TOTAL_REQS} |" >> $GITHUB_STEP_SUMMARY
              echo "| Average Duration | ${AVG_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
              echo "| 95th Percentile | ${P95_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
              echo "| Error Rate | ${ERROR_RATE} |" >> $GITHUB_STEP_SUMMARY
            else
              echo "Load test results available but jq not installed for parsing" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "artifacts/chaos-test-results.json" ]; then
            echo "### 🌪️ Chaos Test Results" >> $GITHUB_STEP_SUMMARY  
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if command -v jq >/dev/null 2>&1; then
              CHAOS_REQS=$(jq -r '.metrics.chaos_request_count.values.count // "N/A"' artifacts/chaos-test-results.json)
              CHAOS_ERROR_RATE=$(jq -r '.metrics.chaos_error_rate.values.rate // "N/A"' artifacts/chaos-test-results.json)
              CHAOS_AVG_DURATION=$(jq -r '.metrics.chaos_response_time.values.avg // "N/A"' artifacts/chaos-test-results.json)
              
              echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Total Chaos Requests | ${CHAOS_REQS} |" >> $GITHUB_STEP_SUMMARY
              echo "| Chaos Error Rate | ${CHAOS_ERROR_RATE} |" >> $GITHUB_STEP_SUMMARY
              echo "| Average Response Time | ${CHAOS_AVG_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
            else
              echo "Chaos test results available but jq not installed for parsing" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ ! -f "artifacts/load-test-results.json" ] && [ ! -f "artifacts/chaos-test-results.json" ]; then
            echo "⚠️ No performance test results found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 🔧 Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Base URL**: ${{ env.K6_BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Max VUs**: ${{ env.K6_MAX_VUS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Type**: ${{ needs.setup.outputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered**: ${{ github.event_name == 'schedule' && 'Scheduled' || 'Manual' }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-results
          path: artifacts/
          retention-days: 90
        if: hashFiles('artifacts/*.json') != ''