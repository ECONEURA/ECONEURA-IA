env:
  DEPLOY_ENABLED: "false"
name: Dependency Security Monitor

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'apps/*/package.json'
      - 'packages/*/package.json'
  workflow_dispatch:
    inputs:
      severity_threshold:
        description: 'Minimum severity to report (low, moderate, high, critical)'
        required: false
        default: 'moderate'
        type: choice
        options:
        - low
        - moderate
        - high
        - critical
      create_issue:
        description: 'Create GitHub issue for vulnerabilities'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      vulnerabilities-found: ${{ steps.scan.outputs.found }}
      critical-count: ${{ steps.scan.outputs.critical }}
      high-count: ${{ steps.scan.outputs.high }}
      moderate-count: ${{ steps.scan.outputs.moderate }}
      low-count: ${{ steps.scan.outputs.low }}
      report-path: ${{ steps.scan.outputs.report }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run pnpm audit
      id: audit
      run: |
echo "🔍 Running pnpm audit..."
        
        # Run audit and capture output
        pnpm audit --audit-level low --json > audit-results.json || true
        
        # Parse results
        if [ -f audit-results.json ] && [ -s audit-results.json ]; then
          echo "📊 Processing audit results..."
          
          # Extract vulnerability counts
          CRITICAL=$(jq '[.[] | select(.severity == "critical")] | length' audit-results.json 2>/dev/null || echo 0)
          HIGH=$(jq '[.[] | select(.severity == "high")] | length' audit-results.json 2>/dev/null || echo 0)
          MODERATE=$(jq '[.[] | select(.severity == "moderate")] | length' audit-results.json 2>/dev/null || echo 0)
          LOW=$(jq '[.[] | select(.severity == "low")] | length' audit-results.json 2>/dev/null || echo 0)
          
          TOTAL=$((CRITICAL + HIGH + MODERATE + LOW))
          
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          echo "low=$LOW" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          
          echo "📈 Audit Results:"
          echo "  Critical: $CRITICAL"
          echo "  High: $HIGH"
          echo "  Moderate: $MODERATE"
          echo "  Low: $LOW"
          echo "  Total: $TOTAL"
          
          if [ "$TOTAL" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ No vulnerabilities found"
          echo "found=false" >> $GITHUB_OUTPUT
          echo "critical=0" >> $GITHUB_OUTPUT
          echo "high=0" >> $GITHUB_OUTPUT
          echo "moderate=0" >> $GITHUB_OUTPUT
          echo "low=0" >> $GITHUB_OUTPUT
          echo "total=0" >> $GITHUB_OUTPUT
        fi

    - name: Run npm audit (fallback)
      if: steps.audit.outcome == 'failure'
      run: |
echo "⚠️  pnpm audit failed, trying npm audit..."
        npm audit --audit-level=low --json > npm-audit-results.json || true

    - name: Check for outdated dependencies
      run: |
echo "📅 Checking for outdated dependencies..."
        
        pnpm outdated --json > outdated.json || true
        
        if [ -f outdated.json ] && [ -s outdated.json ]; then
          OUTDATED_COUNT=$(jq 'length' outdated.json 2>/dev/null || echo 0)
          echo "outdated=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "⚠️  Found $OUTDATED_COUNT outdated dependencies"
            
            # Check for major version updates (potentially breaking)
            MAJOR_UPDATES=$(jq '[.[] | select(.current | split(".")[0] != .latest | split(".")[0])] | length' outdated.json 2>/dev/null || echo 0)
            echo "major-updates=$MAJOR_UPDATES" >> $GITHUB_OUTPUT
            
            if [ "$MAJOR_UPDATES" -gt 0 ]; then
              echo "🚨 Found $MAJOR_UPDATES major version updates that may introduce breaking changes"
            fi
          else
            echo "✅ All dependencies are up to date"
          fi
        fi

    - name: Check license compliance
      run: |
echo "📋 Checking license compliance..."
        
        # Use a license checker tool if available
        if command -v license-checker > /dev/null 2>&1; then
          npx license-checker --json > licenses.json || true
          
          if [ -f licenses.json ]; then
            # Check for problematic licenses
            PROBLEMATIC=$(jq '[.[] | select(.licenses | test("GPL|LGPL|MS-PL|BSD-4-Clause|CC-BY-NC"))] | length' licenses.json 2>/dev/null || echo 0)
            
            if [ "$PROBLEMATIC" -gt 0 ]; then
              echo "⚠️  Found $PROBLEMATIC dependencies with potentially problematic licenses"
              echo "license-issues=$PROBLEMATIC" >> $GITHUB_OUTPUT
            else
              echo "✅ License compliance check passed"
            fi
          fi
        else
          echo "ℹ️  License checker not available, skipping license compliance check"
        fi

    - name: Generate security report
      id: scan
      run: |
echo "📝 Generating security report..."
        
        mkdir -p artifacts/security
        
        REPORT_PATH="artifacts/security/dependency-report-$(date +%Y%m%d-%H%M%S).json"
        
        # Create comprehensive report
        cat > "$REPORT_PATH" << EOF
        {
          "timestamp": "$(date -Iseconds)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "trigger": "${{ github.event_name }}",
          "vulnerabilities": {
            "critical": ${CRITICAL:-0},
            "high": ${HIGH:-0},
            "moderate": ${MODERATE:-0},
            "low": ${LOW:-0},
            "total": ${TOTAL:-0}
          },
          "outdated": {
            "count": ${OUTDATED_COUNT:-0},
            "major_updates": ${MAJOR_UPDATES:-0}
          },
          "licenses": {
            "problematic": ${PROBLEMATIC:-0}
          },
          "threshold": "${{ github.event.inputs.severity_threshold || 'moderate' }}",
          "scan_success": true
        }
        EOF
        
        echo "report=$REPORT_PATH" >> $GITHUB_OUTPUT
        echo "found=${FOUND:-false}" >> $GITHUB_OUTPUT
        echo "critical=${CRITICAL:-0}" >> $GITHUB_OUTPUT
        echo "high=${HIGH:-0}" >> $GITHUB_OUTPUT
        echo "moderate=${MODERATE:-0}" >> $GITHUB_OUTPUT
        echo "low=${LOW:-0}" >> $GITHUB_OUTPUT
        
        echo "📄 Report generated: $REPORT_PATH"

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-report
        path: artifacts/security/
        retention-days: 30

  analyze-vulnerabilities:
    name: Analyze Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: dependency-scan
    if: needs.dependency-scan.outputs.vulnerabilities-found == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download security report
      uses: actions/download-artifact@v4
      with:
        name: dependency-security-report

    - name: Analyze vulnerability details
      run: |
echo "🔍 Analyzing vulnerability details..."
        
        REPORT_FILE=$(find . -name "dependency-report-*.json" | head -1)
        
        if [ -f "$REPORT_FILE" ]; then
          echo "📊 Detailed Analysis:"
          
          CRITICAL=$(jq '.vulnerabilities.critical' "$REPORT_FILE")
          HIGH=$(jq '.vulnerabilities.high' "$REPORT_FILE")
          MODERATE=$(jq '.vulnerabilities.moderate' "$REPORT_FILE")
          THRESHOLD="${{ github.event.inputs.severity_threshold || 'moderate' }}"
          
          echo "Threshold: $THRESHOLD"
          echo "Critical: $CRITICAL, High: $HIGH, Moderate: $MODERATE"
          
          # Determine if action is needed based on threshold
          ACTION_NEEDED=false
          
          case $THRESHOLD in
            "low")
              [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ] || [ "$MODERATE" -gt 0 ] && ACTION_NEEDED=true
              ;;
            "moderate")
              [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ] && ACTION_NEEDED=true
              ;;
            "high")
              [ "$CRITICAL" -gt 0 ] && ACTION_NEEDED=true
              ;;
            "critical")
              [ "$CRITICAL" -gt 0 ] && ACTION_NEEDED=true
              ;;
          esac
          
          echo "action-needed=$ACTION_NEEDED" >> $GITHUB_OUTPUT
          
          if [ "$ACTION_NEEDED" = true ]; then
            echo "🚨 Action required for vulnerabilities above threshold"
          else
            echo "✅ Vulnerabilities within acceptable threshold"
          fi
        fi

  create-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [dependency-scan, analyze-vulnerabilities]
    if: |
      (needs.dependency-scan.outputs.vulnerabilities-found == 'true' && 
       github.event.inputs.create_issue != 'false') ||
      (needs.analyze-vulnerabilities.outputs.action-needed == 'true' && 
       github.event.inputs.create_issue != 'false')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download security report
      uses: actions/download-artifact@v4
      with:
        name: dependency-security-report

    - name: Create GitHub issue
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Find the report file
          const reportFiles = fs.readdirSync('.').filter(file => file.startsWith('dependency-report-'));
          const reportFile = reportFiles[0];
          
          let report = {};
          if (reportFile && fs.existsSync(reportFile)) {
            report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
          }
          
          const { vulnerabilities, outdated, licenses } = report;
          const threshold = '${{ github.event.inputs.severity_threshold || "moderate" }}';
          
          // Determine severity level for issue
          let severity = 'minor';
          if (vulnerabilities.critical > 0) severity = 'critical';
          else if (vulnerabilities.high > 0) severity = 'major';
          else if (vulnerabilities.moderate > 0) severity = 'minor';
          
          // Create issue title
          const title = `🚨 Dependency Security Alert - ${vulnerabilities.total} vulnerabilities found`;
          
          // Create issue body
          const body = `
## Dependency Security Alert

**Scan Date:** ${new Date().toISOString()}
**Commit:** \`${context.sha.substring(0, 7)}\`
**Branch:** \`${context.ref.replace('refs/heads/', '')}\`
**Threshold:** \`${threshold}\`

### Vulnerability Summary
| Severity | Count |
|----------|-------|
| Critical | ${vulnerabilities.critical} |
| High | ${vulnerabilities.high} |
| Moderate | ${vulnerabilities.moderate} |
| Low | ${vulnerabilities.low} |
| **Total** | **${vulnerabilities.total}** |

### Additional Issues
- **Outdated Dependencies:** ${outdated.count}
- **Major Updates Available:** ${outdated.major_updates}
- **License Issues:** ${licenses.problematic}

### Recommended Actions
- [ ] Review critical and high-severity vulnerabilities
- [ ] Update vulnerable dependencies to patched versions
- [ ] Test application after dependency updates
- [ ] Consider pinning dependency versions for stability
- [ ] Review license compliance issues if any

### Scan Details
- **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
- **Report:** Available in workflow artifacts

---
*This issue was automatically created by the dependency security monitor*
          `;
          
          // Check if similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'dependencies', 'automated'],
            state: 'open'
          });
          
          const similarIssue = existingIssues.data.find(issue => 
            issue.title.includes('Dependency Security Alert')
          );
          
          if (!similarIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['security', 'dependencies', 'automated', severity]
            });
            
            console.log('Created new security issue');
          } else {
            console.log('Similar security issue already exists, skipping creation');
          }

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [dependency-scan, analyze-vulnerabilities]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate summary report
      run: |
echo "## 🔒 Dependency Security Monitor Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        VULN_FOUND="${{ needs.dependency-scan.outputs.vulnerabilities-found }}"
        CRITICAL="${{ needs.dependency-scan.outputs.critical-count }}"
        HIGH="${{ needs.dependency-scan.outputs.high-count }}"
        MODERATE="${{ needs.dependency-scan.outputs.moderate-count }}"
        LOW="${{ needs.dependency-scan.outputs.low-count }}"
        
        if [ "$VULN_FOUND" = "true" ]; then
          echo "### ⚠️  Security Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
          echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "### 🚨 Critical Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
            echo "Immediate action required to address critical security issues." >> $GITHUB_STEP_SUMMARY
          elif [ "$HIGH" -gt 0 ]; then
            echo "### ⚠️  High-Severity Vulnerabilities Detected" >> $GITHUB_STEP_SUMMARY
            echo "Review and address high-severity vulnerabilities promptly." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### ✅ No Security Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "All dependency checks passed successfully." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Report:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY

    - name: Send Slack notification (if configured)
      if: env.SLACK_WEBHOOK_URL && needs.dependency-scan.outputs.vulnerabilities-found == 'true'
      run: |
# Send Slack notification for security issues
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"🚨 Dependency Security Alert in ${GITHUB_REPOSITORY}\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Dependency Security Alert*\\nRepository: ${GITHUB_REPOSITORY}\\nBranch: ${GITHUB_REF_NAME}\\nCritical: ${CRITICAL}, High: ${HIGH}, Moderate: ${MODERATE}\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"View Details\"
                    },
                    \"url\": \"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"
                  }
                ]
              }
            ]
          }" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Final status
      run: |
if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "✅ Dependency security monitoring completed successfully"
        else
          echo "❌ Dependency security monitoring failed"
          exit 1
        fi

concurrency: hardening-global
