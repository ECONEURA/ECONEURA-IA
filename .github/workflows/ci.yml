name: Strong CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9'
  COVERAGE_THRESHOLD: '80'

jobs:
  # ECONEURA GATE: ci:typecheck
  ci-typecheck:
    name: 'Gate: TypeScript Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: TypeScript Check (STRICT - no any without justification)
      run: |
        echo "üîç Running TypeScript strict check..."
        pnpm typecheck
        
        # Check for 'as any' usage without justification
        echo "üîç Checking for unjustified 'as any' usage..."
        if grep -r "as any" --include="*.ts" --include="*.tsx" apps/ packages/ | grep -v "// @ts-expect-error" | grep -v "// justification:" ; then
          echo "‚ùå Found 'as any' usage without justification. Add '// justification: reason' comment."
          exit 1
        fi
        
        echo "‚úÖ TypeScript check passed"

  # ECONEURA GATE: ci:lint  
  ci-lint:
    name: 'Gate: Lint Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ci-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: ESLint Check (no console.log in hot-path)
      run: |
        echo "üîç Running ESLint..."
        pnpm lint
        
        # Check for console.log in hot-path routes
        echo "üîç Checking for console.log in hot-path routes..."
        if grep -r "console\.log" --include="*.ts" --include="*.tsx" apps/api/src/routes/ apps/api/src/middleware/ | grep -v "// debug:" ; then
          echo "‚ùå Found console.log in hot-path code. Use structured logger instead."
          exit 1
        fi
        
        echo "‚úÖ Lint check passed"

  # ECONEURA GATE: ci:build
  ci-build:
    name: 'Gate: Build Check'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: ci-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Turbo Build
      run: |
        echo "üîç Running turbo build..."
        pnpm build
        echo "‚úÖ Build check passed"

  # ECONEURA GATE: ci:test
  ci-test:
    name: 'Gate: Test Check'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: ci-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Unit + Integration Tests (coverage ‚â•30%)
      run: |
        echo "üîç Running unit and integration tests..."
        pnpm test:coverage
        
        # Check coverage threshold (‚â•30% initially)
        COVERAGE=$(npx coverage-badges-cli --input=coverage/lcov.info --output=coverage/badges --type=lcov --format=json | jq -r '.coverage' || echo "0")
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 30" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below threshold 30%"
          exit 1
        fi
        echo "‚úÖ Test check passed with $COVERAGE% coverage"
      env:
        CI: true
        NODE_ENV: test

  # ECONEURA GATE: ci:contract
  ci-contract:
    name: 'Gate: OpenAPI Contract'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ci-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build for OpenAPI generation
      run: pnpm build
    
    - name: Generate OpenAPI spec
      run: pnpm api:openapi
    
    - name: OpenAPI Diff (0 breaking changes)
      run: |
        echo "üîç Checking OpenAPI contract changes..."
        # If we have a previous spec, compare for breaking changes
        if [ -f "apps/api/openapi.baseline.json" ]; then
          npx @redocly/openapi-cli diff apps/api/openapi.baseline.json apps/api/openapi.json --format=stylish
          if [ $? -ne 0 ]; then
            echo "‚ùå Breaking changes detected in OpenAPI spec"
            exit 1
          fi
        else
          echo "‚ÑπÔ∏è  No baseline OpenAPI spec found, skipping diff"
        fi
        
        # Validate current spec
        npx @redocly/openapi-cli lint apps/api/openapi.json
        echo "‚úÖ Contract check passed"

  # ECONEURA GATE: cd:smoke
  cd-smoke:
    name: 'Gate: Smoke Test'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ci-contract
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: econeura_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build applications
      run: pnpm build
    
    - name: Start API server in background
      run: |
        cd apps/api
        PORT=3001 pnpm start &
        echo $! > api.pid
        sleep 5  # Give server time to start
      env:
        NODE_ENV: test
        PGHOST: localhost
        PGUSER: postgres
        PGPASSWORD: test
        PGDATABASE: econeura_test
        PGPORT: 5432
    
    - name: Smoke Test - Health Endpoint
      run: |
        echo "üîç Testing health endpoint..."
        
        # Test /health endpoint (MUST respond <200ms and NOT touch DB/externals)
        start_time=$(date +%s%N)
        response=$(curl -s -w "%{http_code},%{time_total}" http://localhost:3001/health)
        end_time=$(date +%s%N)
        
        http_code=$(echo $response | cut -d',' -f1 | tail -c 4)
        time_total=$(echo $response | cut -d',' -f2)
        response_body=$(echo $response | sed 's/,[^,]*$//')
        
        # Calculate response time in ms
        response_time_ms=$(echo "$time_total * 1000" | bc)
        
        echo "Response: $response_body"
        echo "HTTP Code: $http_code"
        echo "Response Time: ${response_time_ms}ms"
        
        # Check HTTP 200
        if [ "$http_code" != "200" ]; then
          echo "‚ùå Health endpoint returned $http_code instead of 200"
          exit 1
        fi
        
        # Check response time < 200ms
        if (( $(echo "$response_time_ms > 200" | bc -l) )); then
          echo "‚ùå Health endpoint took ${response_time_ms}ms (must be <200ms)"
          exit 1
        fi
        
        # Check JSON structure
        echo "$response_body" | jq -e '.status, .ts, .version' > /dev/null
        if [ $? -ne 0 ]; then
          echo "‚ùå Health endpoint response missing required fields (status, ts, version)"
          exit 1
        fi
        
        echo "‚úÖ RESULTADOS: PASS"
        echo "   - HTTP 200: ‚úÖ"
        echo "   - Response time <200ms: ‚úÖ (${response_time_ms}ms)"
        echo "   - JSON structure: ‚úÖ"
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f apps/api/api.pid ]; then
          kill $(cat apps/api/api.pid) || true
        fi
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert

  # Test Coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-gates
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests with coverage
      run: pnpm test:coverage
      env:
        CI: true
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(npx coverage-badges-cli --input=coverage/lcov.info --output=coverage/badges --type=lcov --format=json | jq -r '.coverage')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
          exit 1
        fi
        echo "‚úÖ Coverage $COVERAGE% meets threshold ${{ env.COVERAGE_THRESHOLD }}%"

  # OpenAPI Validation
  openapi-validation:
    name: OpenAPI Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build
      run: pnpm build
    
    - name: Generate OpenAPI spec
      run: pnpm api:openapi
    
    - name: Validate OpenAPI spec
      run: pnpm openapi:validate
    
    - name: Validate OpenAPI schema
      run: |
        npx @redocly/openapi-cli lint apps/api/openapi.json
        echo "‚úÖ OpenAPI schema validation passed"
    
    - name: OpenAPI diff check
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Compare with base branch
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }} -- apps/api/openapi.json
          mv apps/api/openapi.json apps/api/openapi.base.json
          git checkout ${{ github.sha }} -- apps/api/openapi.json
          
          # Run openapi-diff
          npx @redocly/openapi-cli diff apps/api/openapi.base.json apps/api/openapi.json --fail-on-breaking
        fi

  # Security Scanning
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        queries: security-extended,security-and-quality
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:javascript"
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      run: pnpm audit --audit-level=high
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

  # Secret Scanning
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --fail --no-update
        path: .
    
    - name: Run GitGuardian (optional)
      run: |
        echo "GitGuardian scanning would run here with API key"
        echo "Skipping for now - requires GITGUARDIAN_API_KEY secret"
      continue-on-error: true
    
    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline

  # Build & Package
  build-package:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-gates, test-coverage, openapi-validation, security-scanning, secret-scanning]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build all packages
      run: pnpm build
    
    - name: Package applications
      run: |
        # Create deployment packages
        mkdir -p dist
        tar -czf dist/econeura-api.tar.gz -C apps/api dist
        tar -czf dist/econeura-web.tar.gz -C apps/web .next
        tar -czf dist/econeura-workers.tar.gz -C apps/workers dist
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality-gates, test-coverage]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: econeura_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Setup test database
      run: |
        export PGHOST=localhost
        export PGUSER=postgres
        export PGPASSWORD=postgres
        export PGDATABASE=econeura_test
        export PGPORT=5432
        
        pnpm db:migrate
        pnpm db:seed
    
    - name: Run integration tests
      run: pnpm test:integration
      env:
        NODE_ENV: test
        PGHOST: localhost
        PGUSER: postgres
        PGPASSWORD: postgres
        PGDATABASE: econeura_test
        PGPORT: 5432
        MISTRAL_BASE_URL: http://localhost:8080
        AZURE_OPENAI_ENDPOINT: https://test.openai.azure.com
        AZURE_OPENAI_API_KEY: test-key

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-gates, test-coverage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build
      run: pnpm build
    
    - name: Run performance tests
      run: pnpm test:performance
      env:
        NODE_ENV: test
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: performance-results/
        retention-days: 7

  # Final Status Check - ECONEURA Gates
  econeura-gates-check:
    name: 'ECONEURA Gates Status'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ci-typecheck, ci-lint, ci-build, ci-test, ci-contract, cd-smoke]
    if: always()
    
    steps:
    - name: Check all ECONEURA gates status
      run: |
        echo "üîç Checking ECONEURA CI/CD gates status..."
        
        # Check if all required gates passed
        if [[ "${{ needs.ci-typecheck.result }}" != "success" ]]; then
          echo "‚ùå ci:typecheck gate failed"
          exit 1
        fi
        
        if [[ "${{ needs.ci-lint.result }}" != "success" ]]; then
          echo "‚ùå ci:lint gate failed"
          exit 1
        fi
        
        if [[ "${{ needs.ci-build.result }}" != "success" ]]; then
          echo "‚ùå ci:build gate failed"
          exit 1
        fi
        
        if [[ "${{ needs.ci-test.result }}" != "success" ]]; then
          echo "‚ùå ci:test gate failed"
          exit 1
        fi
        
        if [[ "${{ needs.ci-contract.result }}" != "success" ]]; then
          echo "‚ùå ci:contract gate failed"
          exit 1
        fi
        
        if [[ "${{ needs.cd-smoke.result }}" != "success" ]]; then
          echo "‚ùå cd:smoke gate failed"
          exit 1
        fi
        
        echo "‚úÖ All ECONEURA gates passed successfully!"
        echo "üöÄ Ready for deployment with:"
        echo "   - ci:typecheck: ‚úÖ"
        echo "   - ci:lint: ‚úÖ" 
        echo "   - ci:build: ‚úÖ"
        echo "   - ci:test: ‚úÖ"
        echo "   - ci:contract: ‚úÖ"
        echo "   - cd:smoke: ‚úÖ"
