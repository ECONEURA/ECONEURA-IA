name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check TypeScript
        run: npm run typecheck

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: econeura
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: econeura_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup database
        env:
          DATABASE_URL: postgresql://econeura:testpass@localhost:5432/econeura_test
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy
      
      - name: Run API tests
        env:
          DATABASE_URL: postgresql://econeura:testpass@localhost:5432/econeura_test
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret
        run: |
          cd apps/api
          npm test
      
      - name: Run Web tests
        run: |
          cd apps/web
          npm test

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build packages
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/api/dist
            apps/web/.next

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: econeura
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: econeura_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Setup database
        env:
          DATABASE_URL: postgresql://econeura:testpass@localhost:5432/econeura_e2e
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy
          npx tsx prisma/seed.improved.ts
      
      - name: Start API server
        env:
          DATABASE_URL: postgresql://econeura:testpass@localhost:5432/econeura_e2e
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret
          PORT: 3001
        run: |
          cd apps/api
          npm run build
          npm start &
          sleep 5
      
      - name: Start Web server
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api
        run: |
          cd apps/web
          npm run build
          npm start &
          sleep 5
      
      - name: Run E2E tests
        run: npx playwright test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate