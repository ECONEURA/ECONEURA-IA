name: Strong CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: read
  actions: read
  checks: write
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  DEPLOY_ENABLED: "false"

jobs:
  quality_gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-ci-tools
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install
        run: pnpm -w i --frozen-lockfile
      - name: Lint + Typecheck + Unit Coverage
        run: |
          pnpm -w lint
          pnpm -w typecheck
          pnpm -w test -- --coverage
      - name: Export coverage summary
        if: always()
        run: |
          mkdir -p .artifacts
          node -e "const fs=require('fs');const p='coverage/coverage-summary.json';fs.writeFileSync('.artifacts/coverage-summary.json',fs.existsSync(p)?fs.readFileSync(p):'{}')"
      - name: Upload artifacts (quality)
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: quality-artifacts, path: ./.artifacts }

  openapi_validate:
    runs-on: ubuntu-latest
    needs: [quality_gates]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install
        run: pnpm -w i --frozen-lockfile
      - name: Snapshot & Diff /v1
        run: |
          node scripts/openapi/snapshot.mjs || true
          node scripts/openapi/diff.mjs || true
      - name: Spectral Lint
        run: pnpm dlx @stoplight/spectral-cli lint apps/api/openapi/openapi.yaml || true
      - name: Upload openapi reports
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: openapi-reports, path: ./reports }

  api_tests:
    runs-on: ubuntu-latest
    needs: [quality_gates]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: ci
          POSTGRES_DB: econeura_ci
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U ci -d econeura_ci"
          --health-interval=5s --health-timeout=5s --health-retries=30
    env:
      NODE_ENV: test
      PORT: 3001
      DATABASE_URL: postgresql://ci:ci@127.0.0.1:5432/econeura_ci
      MOCK_EXTERNAL: "1"
      OPENAI_API_KEY: test
      AZURE_OPENAI_API_BASE: http://127.0.0.1:9999
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install
        run: pnpm -w i --frozen-lockfile
      - name: Start API (background) & wait /health
        run: |
          nohup pnpm -C apps/api start:ci > .artifacts/api.log 2>&1 &
          for i in {1..60}; do curl -fsS http://127.0.0.1:3001/health && break || sleep 2; done
      - name: Run API tests
        run: pnpm -w test:api || pnpm -w test --filter @api -- --reporter=dot
      - name: Upload API logs
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: api-logs, path: ./.artifacts/api.log }

  link_check:
    runs-on: ubuntu-latest
    needs: [quality_gates]
    steps:
      - uses: actions/checkout@v4
      - name: Lychee (docs)
        uses: lycheeverse/lychee-action@v1
        with:
          args: --config .lychee.toml docs
      - name: Save lychee report
        if: always()
        run: mkdir -p reports && cp -f lychee/out.md reports/lychee.out || true
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: lychee-report, path: ./reports/lychee.out }

  security_scan:
    runs-on: ubuntu-latest
    needs: [quality_gates]
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -s . -r reports/gitleaks.json --redact
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: gitleaks-report, path: ./reports/gitleaks.json }

  e2e_ui:
    runs-on: ubuntu-latest
    needs: [api_tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - uses: pnpm/action-setup@v4
      - name: Install + Playwright deps
        run: |
          pnpm -w i --frozen-lockfile
          pnpm exec playwright install --with-deps
      - name: Start Web (bg) & wait
        run: |
          nohup pnpm -C apps/web start:ci > .artifacts/web.log 2>&1 &
          npx wait-on http://127.0.0.1:3000
      - name: E2E run
        run: pnpm -w test:e2e || pnpm -w playwright test --retries=1
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: e2e-artifacts, path: .artifacts }

  perf_smoke:
    runs-on: ubuntu-latest
    needs: [api_tests]
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/setup-k6-action@v1
      - name: k6 smoke
        run: |
          [ -f scripts/ops/dev_smoke.sh ] && bash scripts/ops/dev_smoke.sh || echo "no smoke"

  status_check:
    runs-on: ubuntu-latest
    needs: [quality_gates, openapi_validate, api_tests, link_check, security_scan, e2e_ui, perf_smoke]
    steps:
      - uses: actions/checkout@v4
      - name: Summarize & NO_DEPLOY guard
        shell: bash
        run: |
          set -e
          MISS=$(grep -R --include="*.yml" -n "DEPLOY_ENABLED" .github/workflows | wc -l)
          if [ "$MISS" -eq 0 ]; then echo "NO_DEPLOY guard MISSING"; echo "NO_DEPLOY=MISS" >> $GITHUB_ENV; else echo "NO_DEPLOY=OK" >> $GITHUB_ENV; fi
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "- NO_DEPLOY: $NO_DEPLOY" >> $GITHUB_STEP_SUMMARY
      - name: Fail if any need failed
        if: ${{ contains(join(needs.*.result, ','), 'failure') || env.NO_DEPLOY == 'MISS' }}
        run: exit 1