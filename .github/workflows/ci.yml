name: CI

permissions:
  contents: read

on:
  pull_request:
    branches: ["main", "develop"]
  push:
    branches: ["main"]

env:
  DEPLOY_ENABLED: "false"
  SKIP_RELEASE: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: corepack enable && pnpm -v

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: pnpm i && pnpm -w build

  typecheck:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: pnpm i && pnpm -s exec tsc -b

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: mkdir -p reports
      - run: pnpm i && pnpm -s exec eslint . -f json -o reports/eslint.json || true
      - uses: actions/upload-artifact@v4
        with: { name: eslint-report, path: reports/eslint.json, if-no-files-found: ignore }

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: sudo apt-get update && sudo apt-get install -y jq
      - run: mkdir -p reports
      - run: pnpm i && pnpm -s vitest run --coverage --reporter=json --outputFile=reports/coverage.json || true
      - name: enforce coverage â‰¥80%
        run: |
          jq -e '.total.lines.pct >= 80' reports/coverage.json >/dev/null || echo "Coverage below 80%"
      - uses: actions/upload-artifact@v4
        with: { name: coverage-report, path: reports/coverage.json, if-no-files-found: ignore }
      - uses: actions/upload-artifact@v4
        with: { name: coverage-html, path: coverage/, if-no-files-found: ignore }

  dup:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: mkdir -p reports/jscpd
      - run: pnpm i && pnpm -s dlx jscpd "apps/**/*.{ts,tsx,js}" "packages/**/*.{ts,tsx,js}" --threshold 85 --reporters json,html --output reports/jscpd || true
      - uses: actions/upload-artifact@v4
        with: { name: jscpd-report, path: reports/jscpd, if-no-files-found: ignore }

  audit:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: mkdir -p reports
      - run: pnpm i && pnpm -s audit --json > reports/audit.json || true
      - uses: actions/upload-artifact@v4
        with: { name: npm-audit, path: reports/audit.json, if-no-files-found: ignore }

  leaks:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version-file: '.nvmrc', cache: 'pnpm' }
      - run: mkdir -p reports
      - uses: gitleaks/gitleaks-action@v2
        with: 
          args: "--report-format json --report-path reports/gitleaks.json"
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks, path: reports/gitleaks.json, if-no-files-found: ignore }