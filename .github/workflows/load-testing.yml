name: Load Testing

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for load testing'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      test_scenario:
        description: 'Load testing scenario to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - load
        - stress
        - spike
        - volume
        - endurance
      duration:
        description: 'Test duration in minutes (for endurance tests)'
        required: false
        default: '10'
        type: string
      vus:
        description: 'Number of virtual users (for custom load tests)'
        required: false
        default: '50'
        type: string
      custom_target_url:
        description: 'Custom target URL (optional, overrides environment default)'
        required: false
        type: string
  schedule:
    # Run comprehensive load test every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  K6_VERSION: '0.48.0'
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  deployments: read

jobs:
  setup-test-environment:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      target_url: ${{ steps.config.outputs.target_url }}
      api_url: ${{ steps.config.outputs.api_url }}
      web_url: ${{ steps.config.outputs.web_url }}
      test_scenario: ${{ steps.config.outputs.test_scenario }}
      environment: ${{ steps.config.outputs.environment }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure test environment
      id: config
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        SCENARIO="${{ github.event.inputs.test_scenario || 'smoke' }}"
        CUSTOM_URL="${{ github.event.inputs.custom_target_url }}"
        
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "test_scenario=$SCENARIO" >> $GITHUB_OUTPUT
        
        # Configure target URLs based on environment
        if [ -n "$CUSTOM_URL" ]; then
          echo "target_url=$CUSTOM_URL" >> $GITHUB_OUTPUT
          echo "api_url=$CUSTOM_URL" >> $GITHUB_OUTPUT
          echo "web_url=$CUSTOM_URL" >> $GITHUB_OUTPUT
        elif [ "$ENVIRONMENT" = "production" ]; then
          echo "target_url=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
          echo "api_url=${{ secrets.PRODUCTION_API_URL }}" >> $GITHUB_OUTPUT
          echo "web_url=${{ secrets.PRODUCTION_WEB_URL }}" >> $GITHUB_OUTPUT
        else
          echo "target_url=${{ secrets.STAGING_URL }}" >> $GITHUB_OUTPUT
          echo "api_url=${{ secrets.STAGING_API_URL }}" >> $GITHUB_OUTPUT
          echo "web_url=${{ secrets.STAGING_WEB_URL }}" >> $GITHUB_OUTPUT
        fi
        
        echo "ðŸ”§ Test Configuration:"
        echo "  Environment: $ENVIRONMENT"
        echo "  Scenario: $SCENARIO"
        echo "  Target URL: ${{ steps.config.outputs.target_url }}"

  prepare-test-scripts:
    name: Prepare Test Scripts
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup-test-environment

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate test scripts
      run: |
        mkdir -p tests/load/k6-scripts
        
        # Generate smoke test script
        cat > tests/load/k6-scripts/smoke-test.js << 'EOF'
import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
  vus: 1,
  duration: '30s',
  thresholds: {
    http_req_duration: ['p(95)<500'],
    http_req_failed: ['rate<0.1'],
  },
};

const BASE_URL = __ENV.BASE_URL;

export default function () {
  // Health check
  let response = http.get(`${BASE_URL}/health`);
  check(response, {
    'health check status is 200': (r) => r.status === 200,
    'health check response time < 200ms': (r) => r.timings.duration < 200,
  });

  // API smoke tests
  if (BASE_URL.includes('api')) {
    // Test companies endpoint
    response = http.get(`${BASE_URL}/api/crm/companies`);
    check(response, {
      'companies endpoint status is 200': (r) => r.status === 200,
      'companies response time < 1000ms': (r) => r.timings.duration < 1000,
    });

    // Test contacts endpoint
    response = http.get(`${BASE_URL}/api/crm/contacts`);
    check(response, {
      'contacts endpoint status is 200': (r) => r.status === 200,
      'contacts response time < 1000ms': (r) => r.timings.duration < 1000,
    });
  }

  sleep(1);
}
