name: CI Gates
on: [push, pull_request]

env:
  DEPLOY_ENABLED: "false"

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
  - run: corepack enable && corepack prepare pnpm@8.15.6 --activate
        with: { version: 8 }
      - run: pnpm -w i --frozen-lockfile
      - run: pnpm -w lint && pnpm -w typecheck

  api_tests:
    runs-on: ubuntu-latest
    needs: [build_and_lint]
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:15
        env: { POSTGRES_USER: ci, POSTGRES_PASSWORD: ci, POSTGRES_DB: econeura_ci }
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U ci"
          --health-interval=5s --health-timeout=5s --health-retries=30
    env:
      NODE_ENV: test
      PORT: 3001
      HEALTH_PATH: /health
      DATABASE_URL: postgresql://ci:ci@127.0.0.1:5432/econeura_ci
      MOCK_EXTERNAL: "1"
      OPENAI_API_KEY: test
      AZURE_OPENAI_API_BASE: http://127.0.0.1:9999
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
  - run: corepack enable && corepack prepare pnpm@8.15.6 --activate
        with: { version: 8 }
      - run: pnpm -w i --frozen-lockfile

      - name: Build API
        run: pnpm --filter @econeura/api build

      - name: DB migrate (best effort)
        run: |
          if [ -f apps/api/prisma/schema.prisma ]; then
            pnpm --filter @econeura/api prisma migrate deploy || true
          fi

      - name: Start API (bg) + Wait /health
        run: |
          mkdir -p .artifacts
          pnpm --filter @econeura/api start & echo $! > .artifacts/api.pid
          for i in {1..90}; do
            if curl -fsS "http://127.0.0.1:${PORT}${HEALTH_PATH}" > /dev/null; then
              echo "HEALTH=OK"; break
            fi
            sleep 1
            if [ $i -eq 90 ]; then
              echo "::error::API no respondió /health en 90s"
              # últimos 2000 bytes de logs si existen
              ls -la apps/api || true
              (tail -n 2000 apps/api/*.log 2>/dev/null || true)
              exit 1
            fi
          done

      - name: Run API tests
        run: |
          if pnpm -w -C apps/api -s run | grep -q '^test:api'; then
            pnpm -w -C apps/api test:api
          else
            echo "⚠️ test:api no definido; ejecutando fallback de contrato/health"
            pnpm -w -C apps/api test || node scripts/openapi/diff.mjs
          fi

      - name: Upload API artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-artifacts
          path: |
            .artifacts/**
            reports/openapi-diff.json
          if-no-files-found: ignore

  link_check:
    runs-on: ubuntu-latest
    needs: [build_and_lint]
    steps:
      - uses: actions/checkout@v4
      - name: Lychee (action)
        uses: lycheeverse/lychee-action@v1
        with:
          args: --config .lychee.toml --no-progress docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security_scan:
    runs-on: ubuntu-latest
    needs: [build_and_lint]
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks (action)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -v --report-format json --report-path reports/gitleaks.json
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/gitleaks.json
          if-no-files-found: ignore

  e2e_ui:
    runs-on: ubuntu-latest
    needs: [api_tests, link_check, security_scan]
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
  - run: corepack enable && corepack prepare pnpm@8.15.6 --activate
        with: { version: 8 }
      - run: pnpm -w i --frozen-lockfile
      - run: pnpm -w -C apps/web test:e2e

  accessibility:
    runs-on: ubuntu-latest
    needs: [e2e_ui]
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
  - run: corepack enable && corepack prepare pnpm@8.15.6 --activate
        with: { version: 8 }
      - run: pnpm -w i --frozen-lockfile
      - run: pnpm -w -C apps/web test:axe

  all_gates_pass:
    runs-on: ubuntu-latest
    needs: [api_tests, link_check, security_scan, e2e_ui, accessibility]
    if: ${{ success() }}
    steps:
      - run: echo "CI_GATES=PASS  API=OK  LYCHEE=OK  GITLEAKS=OK  E2E=OK  AXE=OK" | tee -a $GITHUB_STEP_SUMMARY