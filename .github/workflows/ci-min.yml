# RADICAL_SOFT_MODE: Este workflow ha sido modificado para NO fallar nunca.
# Revertir buscando la etiqueta RADICAL_SOFT_MODE y eliminando continue-on-error / restaurando triggers.


name: CI Min

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true  # RADICAL_SOFT_MODE: Never fail
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile || echo "::warning ::Dependencies install failed (radical soft)"
      
    - name: Build
      run: pnpm build || echo "::warning ::Build failed (radical soft)"
      
    - name: Lint
      run: pnpm lint || echo "::warning ::Lint failed (radical soft)"
      
    - name: Type check
      run: pnpm typecheck || echo "::warning ::Type check failed (radical soft)"
      
    - name: Unit tests
      run: pnpm test || echo "::warning ::Unit tests failed (radical soft)"
      
    - name: Coverage calculation (soft)
      run: |
        # RADICAL_SOFT_MODE: Calculate coverage but never fail
        pnpm test:coverage || echo "::warning ::Coverage generation failed (radical soft)"
        
        # Check if coverage file exists
        if [ -f coverage/coverage-summary.json ]; then
          COVERAGE=$(node -e "
            const fs = require('fs');
            try {
              const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const pct = summary.total.statements.pct || 0;
              console.log(pct);
            } catch(e) {
              console.log('0');
            }
          ")
          
          echo "Current coverage: ${COVERAGE}%"
          
          # RADICAL_SOFT_MODE: Warning instead of exit 1
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "::warning ::Coverage ${COVERAGE}% is below 60% threshold (radical soft)"
          else
            echo "::notice ::Coverage ${COVERAGE}% meets threshold"
          fi
        else
          echo "::warning ::No coverage file found (radical soft)"
        fi
      
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage/
          .artifacts/
        if-no-files-found: ignore
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts
        path: |
          dist/
          .next/
          apps/*/dist/
        if-no-files-found: ignore
